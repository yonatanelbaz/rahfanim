//
// +-------------------------------------------------------------------------+
// |   This file has been generated by The Interactive Disassembler (IDA)    |
// |           Copyright (c) 2017 Hex-Rays, <support@hex-rays.com>           |
// +-------------------------------------------------------------------------+
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
  // set 'loading idc file' mode
  set_inf_attr(INF_GENFLAGS, INFFL_LOADIDC|get_inf_attr(INF_GENFLAGS));
  GenInfo();            // various settings
  Segments();           // segmentation
  Enums();              // enumerations
  Structures();         // structure types
  ApplyStrucTInfos();   // structure type infos
  Patches();            // manual patches
  SegRegs();            // segment register values
  Bytes();              // individual bytes (code,data)
  Functions();          // function definitions
  // clear 'loading idc file' mode
  set_inf_attr(INF_GENFLAGS, ~INFFL_LOADIDC&get_inf_attr(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        delete_all_segments();    // purge database
	set_processor_type("ARM", SETPROC_USER);
	set_inf_attr(INF_COMPILER, 6);
	set_inf_attr(INF_STRLIT_BREAK, 0xA);
	set_flag(INF_CMTFLAG, SW_ALLCMT, 0);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_VOID, 0);
	set_inf_attr(INF_XREFNUM, 2);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_AUTO, 1);
	set_inf_attr(INF_INDENT, 16);
	set_inf_attr(INF_COMMENT, 40);
	set_inf_attr(INF_MAXREF, 0x10);
	add_default_til("armv12");
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	set_selector(0X1,0);
	set_selector(0X2,0);
	set_selector(0X3,0);
	set_selector(0X4,0);
	;
	add_segm_ex(0X400000,0X40D320,0X1,1,8,2,ADDSEG_NOSREG);
	SegRename(0X400000,".text");
	SegClass (0X400000,"CODE");
	SegDefReg(0x400000,"T",0x0);
	SegDefReg(0x400000,"DS",0x2);
	set_segm_type(0X400000,2);
	add_segm_ex(0X40D320,0X40D400,0X2,1,8,2,ADDSEG_NOSREG);
	SegRename(0X40D320,".data");
	SegClass (0X40D320,"DATA");
	SegDefReg(0x40D320,"T",0x0);
	SegDefReg(0x40D320,"DS",0x2);
	set_segm_type(0X40D320,3);
	add_segm_ex(0X203E0000,0X20440100,0X3,1,8,2,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X203E0000,".bss");
	SegClass (0X203E0000,"BSS");
	SegDefReg(0x203E0000,"T",0x0);
	SegDefReg(0x203E0000,"DS",0x2);
	set_segm_type(0X203E0000,9);
	add_segm_ex(0X400C0000,0X400C2000,0X4,1,8,2,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X400C0000,".bss2");
	SegClass (0X400C0000,"BSS");
	SegDefReg(0x400C0000,"T",0x0);
	SegDefReg(0x400C0000,"DS",0x2);
	set_segm_type(0X400C0000,9);
	set_inf_attr(INF_LOW_OFF, 0x400000);
	set_inf_attr(INF_HIGH_OFF, 0x400C2000);
}

static Enums_0(id) {

	id = add_enum(-1,"USBGenericRequest",0x1100000);
	add_enum_member(id,"USBGenericRequest_GETSTATUS",	0,	-1);
	add_enum_member(id,"USBGenericRequest_CLEARFEATURE",	0X1,	-1);
	add_enum_member(id,"USBGenericRequest_SETFEATURE",	0X3,	-1);
	add_enum_member(id,"USBGenericRequest_SETADDRESS",	0X5,	-1);
	add_enum_member(id,"USBGenericRequest_GETDESCRIPTOR",	0X6,	-1);
	add_enum_member(id,"USBGenericRequest_SETDESCRIPTOR",	0X7,	-1);
	add_enum_member(id,"USBGenericRequest_GETCONFIGURATION",	0X8,	-1);
	add_enum_member(id,"USBGenericRequest_SETCONFIGURATION",	0X9,	-1);
	add_enum_member(id,"USBGenericRequest_GETINTERFACE",	0XA,	-1);
	add_enum_member(id,"USBGenericRequest_SETINTERFACE",	0XB,	-1);
	add_enum_member(id,"USBGenericRequest_SYNCHFRAME",	0XC,	-1);
	id = add_enum(-1,"USBFeatureRequest",0x1100000);
	add_enum_member(id,"USBFeatureRequest_TESTJ",	0X1,	-1);
	add_enum_member(id,"USBFeatureRequest_TESTK",	0X2,	-1);
	add_enum_member(id,"USBFeatureRequest_TESTSE0NAK",	0X3,	-1);
	add_enum_member(id,"USBFeatureRequest_TESTPACKET",	0X4,	-1);
	add_enum_member(id,"USBFeatureRequest_TESTFORCEENABLE",	0X5,	-1);
	add_enum_member(id,"USBFeatureRequest_TESTSENDZLP",	0X6,	-1);
	id = add_enum(-1,"eXdmadRC",0x1100000);
	id = add_enum(-1,"CDCGenericRequest",0x1100000);
	add_enum_member(id,"CDCGenericRequest_SETLINECODING",	0X20,	-1);
	add_enum_member(id,"CDCGenericRequest_GETLINECODING",	0X21,	-1);
	add_enum_member(id,"CDCGenericRequest_SETCONTROLLINESTATE",	0X22,	-1);
	id = add_enum(-1,"XDMAD_TRANSFER",0x1100000);
	add_enum_member(id,"XDMAD_TRANSFER_TX",	0,	-1);
	add_enum_member(id,"XDMAD_TRANSFER_RX",	0X1,	-1);
	id = add_enum(-1,"USBHS_DEVISR",0x1100000);
	add_enum_member(id,"USBHS_DEVISR_SUSP",	0X1,	-1);
	add_enum_member(id,"USBHS_DEVISR_MSOF",	0X2,	-1);
	add_enum_member(id,"USBHS_DEVISR_SOF",	0X4,	-1);
	add_enum_member(id,"USBHS_DEVISR_EORST",	0X8,	-1);
	add_enum_member(id,"USBHS_DEVISR_WAKEUP",	0X10,	-1);
	add_enum_member(id,"USBHS_DEVISR_EORSM",	0X20,	-1);
	add_enum_member(id,"USBHS_DEVISR_UPRSM",	0X40,	-1);
	add_enum_member(id,"USBHS_DEVISR_PEP_0",	0X1000,	-1);
	add_enum_member(id,"USBHS_DEVISR_PEP_1",	0X2000,	-1);
	add_enum_member(id,"USBHS_DEVISR_PEP_2",	0X4000,	-1);
	add_enum_member(id,"USBHS_DEVISR_PEP_3",	0X8000,	-1);
	add_enum_member(id,"USBHS_DEVISR_PEP_4",	0X10000,	-1);
	add_enum_member(id,"USBHS_DEVISR_PEP_5",	0X20000,	-1);
	add_enum_member(id,"USBHS_DEVISR_PEP_6",	0X40000,	-1);
	add_enum_member(id,"USBHS_DEVISR_PEP_7",	0X80000,	-1);
	add_enum_member(id,"USBHS_DEVISR_PEP_8",	0X100000,	-1);
	add_enum_member(id,"USBHS_DEVISR_PEP_9",	0X200000,	-1);
	add_enum_member(id,"USBHS_DEVISR_PEP_10",	0X400000,	-1);
	add_enum_member(id,"USBHS_DEVISR_PEP_11",	0X800000,	-1);
	add_enum_member(id,"USBHS_DEVISR_DMA_1",	0X2000000,	-1);
	add_enum_member(id,"USBHS_DEVISR_DMA_2",	0X4000000,	-1);
	add_enum_member(id,"USBHS_DEVISR_DMA_3",	0X8000000,	-1);
	add_enum_member(id,"USBHS_DEVISR_DMA_4",	0X10000000,	-1);
	add_enum_member(id,"USBHS_DEVISR_DMA_5",	0X20000000,	-1);
	add_enum_member(id,"USBHS_DEVISR_DMA_6",	0X40000000,	-1);
	add_enum_member(id,"USBHS_DEVISR_DMA_7",	0X80000000,	-1);
	id = add_enum(-1,"PeripheralIds",0x2200000);
	add_enum_member(id,"ID_SUPC",	0,	-1);
	add_enum_member(id,"ID_RSTC",	0X1,	-1);
	add_enum_member(id,"ID_RTC",	0X2,	-1);
	add_enum_member(id,"ID_RTT",	0X3,	-1);
	add_enum_member(id,"ID_WDT",	0X4,	-1);
	add_enum_member(id,"ID_PMC",	0X5,	-1);
	add_enum_member(id,"ID_EFC",	0X6,	-1);
	add_enum_member(id,"ID_UART0",	0X7,	-1);
	add_enum_member(id,"ID_UART1",	0X8,	-1);
	add_enum_member(id,"ID_SMC",	0X9,	-1);
	add_enum_member(id,"ID_PIOA",	0XA,	-1);
	add_enum_member(id,"ID_PIOB",	0XB,	-1);
	add_enum_member(id,"ID_PIOC",	0XC,	-1);
	add_enum_member(id,"ID_USART0",	0XD,	-1);
	add_enum_member(id,"ID_USART1",	0XE,	-1);
	add_enum_member(id,"ID_USART2",	0XF,	-1);
	add_enum_member(id,"ID_PIOD",	0X10,	-1);
	add_enum_member(id,"ID_PIOE",	0X11,	-1);
	add_enum_member(id,"ID_HSMCI",	0X12,	-1);
	add_enum_member(id,"ID_TWIHS0",	0X13,	-1);
	add_enum_member(id,"ID_TWIHS1",	0X14,	-1);
	add_enum_member(id,"ID_SPI0",	0X15,	-1);
	add_enum_member(id,"ID_SSC",	0X16,	-1);
	add_enum_member(id,"ID_TC0",	0X17,	-1);
	add_enum_member(id,"ID_TC1",	0X18,	-1);
	add_enum_member(id,"ID_TC2",	0X19,	-1);
	add_enum_member(id,"ID_TC3",	0X1A,	-1);
	add_enum_member(id,"ID_TC4",	0X1B,	-1);
	add_enum_member(id,"ID_TC5",	0X1C,	-1);
	add_enum_member(id,"ID_AFEC0",	0X1D,	-1);
	add_enum_member(id,"ID_DACC",	0X1E,	-1);
	add_enum_member(id,"ID_PWM0",	0X1F,	-1);
	add_enum_member(id,"ID_ICM",	0X20,	-1);
	add_enum_member(id,"ID_ACC",	0X21,	-1);
	add_enum_member(id,"ID_USBHS",	0X22,	-1);
	add_enum_member(id,"ID_MCAN0",	0X23,	-1);
	add_enum_member(id,"ID_MCAN1",	0X25,	-1);
	add_enum_member(id,"ID_GMAC",	0X27,	-1);
	add_enum_member(id,"ID_AFEC1",	0X28,	-1);
	add_enum_member(id,"ID_TWIHS2",	0X29,	-1);
	add_enum_member(id,"ID_SPI1",	0X2A,	-1);
	add_enum_member(id,"ID_QSPI",	0X2B,	-1);
	add_enum_member(id,"ID_UART2",	0X2C,	-1);
	add_enum_member(id,"ID_UART3",	0X2D,	-1);
	add_enum_member(id,"ID_UART4",	0X2E,	-1);
	add_enum_member(id,"ID_TC6",	0X2F,	-1);
	add_enum_member(id,"ID_TC7",	0X30,	-1);
	add_enum_member(id,"ID_TC8",	0X31,	-1);
	add_enum_member(id,"ID_TC9",	0X32,	-1);
	add_enum_member(id,"ID_TC10",	0X33,	-1);
	add_enum_member(id,"ID_TC11",	0X34,	-1);
	add_enum_member(id,"ID_MLB",	0X35,	-1);
	add_enum_member(id,"ID_AES",	0X38,	-1);
	add_enum_member(id,"ID_TRNG",	0X39,	-1);
	add_enum_member(id,"ID_XDMAC",	0X3A,	-1);
	add_enum_member(id,"ID_ISI",	0X3B,	-1);
	add_enum_member(id,"ID_PWM1",	0X3C,	-1);
	add_enum_member(id,"ID_SDRAMC",	0X3E,	-1);
	add_enum_member(id,"ID_RSWDT",	0X3F,	-1);
	return id;
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        begin_type_updating(UTP_ENUM);
	id = Enums_0(id);
        end_type_updating(UTP_ENUM);
}

static ApplyStrucTInfos_0(void) {
        auto id;
	id = get_struc_id("FlashBlock");
	id = get_struc_id("Usart");
	id = get_struc_id("USBEndpointDescriptor");
	id = get_struc_id("USBDDriver");
	SetType(get_member_id(id, 0x0), "struct USBDDriverDescriptors *");
	SetType(get_member_id(id, 0x4), "uint8_t *");
	id = get_struc_id("USBDDriverDescriptors");
	SetType(get_member_id(id, 0x0), "struct USBConfigurationDescriptor *");
	SetType(get_member_id(id, 0x4), "struct USBConfigurationDescriptor *");
	SetType(get_member_id(id, 0x8), "struct USBConfigurationDescriptor *");
	SetType(get_member_id(id, 0xC), "struct USBConfigurationDescriptor *");
	SetType(get_member_id(id, 0x10), "struct USBConfigurationDescriptor *");
	SetType(get_member_id(id, 0x14), "struct USBConfigurationDescriptor *");
	SetType(get_member_id(id, 0x18), "struct USBConfigurationDescriptor *");
	SetType(get_member_id(id, 0x1C), "struct USBConfigurationDescriptor *");
	SetType(get_member_id(id, 0x20), "uint8_t **");
	id = get_struc_id("USBConfigurationDescriptor");
	id = get_struc_id("CDCDSerialPort");
	SetType(get_member_id(id, 0x14), "struct CDCLineCoding");
	id = get_struc_id("CDCLineCoding");
	id = get_struc_id("UnknStruct01");
	id = get_struc_id("UnknStruct02");
	return id;
}

//------------------------------------------------------------------------
// Information about type information for structure members

static ApplyStrucTInfos() {
	ApplyStrucTInfos_0();
}

static Structures_0(id) {
        auto mid;

	id = add_struc(-1,"FlashBlock",0);
	id = add_struc(-1,"Usart",0);
	id = add_struc(-1,"USBEndpointDescriptor",0);
	id = add_struc(-1,"USBDDriver",0);
	id = add_struc(-1,"USBDDriverDescriptors",0);
	id = add_struc(-1,"USBConfigurationDescriptor",0);
	id = add_struc(-1,"CDCDSerialPort",0);
	id = add_struc(-1,"CDCLineCoding",0);
	id = add_struc(-1,"UnknStruct01",0);
	id = add_struc(-1,"UnknStruct02",0);
	
	id = get_struc_id("FlashBlock");
	mid = add_struc_member(id,"field_0",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_4",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"state",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_C",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_10",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_14",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_18",	0X18,	0x20000400,	-1,	4);
	
	id = get_struc_id("Usart");
	
	id = get_struc_id("USBEndpointDescriptor");
	
	id = get_struc_id("USBDDriver");
	mid = add_struc_member(id,"pDescriptors",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pInterfaces",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"cfgnum",	0X8,	0x000400,	-1,	1);
	mid = add_struc_member(id,"isRemoteWakeUpEnabled",	0X9,	0x000400,	-1,	1);
	mid = add_struc_member(id,"otg_features_supported",	0XA,	0x000400,	-1,	1);
	
	id = get_struc_id("USBDDriverDescriptors");
	mid = add_struc_member(id,"pFsDevice",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pFsConfiguration",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pFsQualifier",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pFsOtherSpeed",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pHsDevice",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pHsConfiguration",	0X14,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pHsQualifier",	0X18,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pHsOtherSpeed",	0X1C,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pStrings",	0X20,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"numStrings",	0X24,	0x000400,	-1,	1);
	
	id = get_struc_id("USBConfigurationDescriptor");
	
	id = get_struc_id("CDCLineCoding");
	mid = add_struc_member(id,"dwDTERate",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bCharFormat",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"bParityType",	0X5,	0x000400,	-1,	1);
	mid = add_struc_member(id,"bDataBits",	0X6,	0x000400,	-1,	1);
	
	id = get_struc_id("CDCDSerialPort");
	mid = add_struc_member(id,"pUsbd",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"fEventHandler",	0X4,	0x20500400,	0,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pArg",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bInterfaceNdx",	0XC,	0x000400,	-1,	1);
	mid = add_struc_member(id,"bNumInterface",	0XD,	0x000400,	-1,	1);
	mid = add_struc_member(id,"bIntInPIPE",	0XE,	0x000400,	-1,	1);
	mid = add_struc_member(id,"bBulkInPIPE",	0XF,	0x000400,	-1,	1);
	mid = add_struc_member(id,"bBulkOutPIPE",	0X10,	0x000400,	-1,	1);
	mid = add_struc_member(id,"bControlLineState",	0X11,	0x000400,	-1,	1);
	mid = add_struc_member(id,"wSerialState",	0X12,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"lineCoding",	0X14,	0x60000400,	get_struc_id("CDCLineCoding"),	7);
	mid = add_struc_member(id,"bReserved",	0X1B,	0x000400,	-1,	1);
	
	id = get_struc_id("UnknStruct01");
	mid = add_struc_member(id,"field_0",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_1",	0X1,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_2",	0X2,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"field_4",	0X4,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"field_6",	0X6,	0x000400,	-1,	18);
	mid = add_struc_member(id,"field_18",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_1C",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_20",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_24",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_28",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_2C",	0X2C,	0x20000400,	-1,	4);
	
	id = get_struc_id("UnknStruct02");
	mid = add_struc_member(id,"field_0",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_1",	0X1,	0x000400,	-1,	3);
	mid = add_struc_member(id,"field_4",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_8",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_C",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_10",	0X10,	0x000400,	-1,	16);
	return id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        begin_type_updating(UTP_STRUCT);
	id = Structures_0(id);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	update_extra_cmt		(0X400000,	E_PREV + 0,	"; File Name   : wm220_0305_v34.04.00.23_20161122.pro.fw_0305.decrypted.elf");
	update_extra_cmt		(0X400000,	E_PREV + 1,	"; Format      : ELF for ARM (Executable)");
	update_extra_cmt		(0X400000,	E_PREV + 2,	"; Imagebase   : 400000");
	update_extra_cmt		(0X400000,	E_PREV + 3,	"; ");
	update_extra_cmt		(0X400000,	E_PREV + 4,	"; Options     : EF_ARM_VFP_FLOAT");
	update_extra_cmt		(0X400000,	E_PREV + 5,	"; EABI version: 5");
	update_extra_cmt		(0X400000,	E_PREV + 6,	"; ");
	create_dword	(x=0X400000);
	make_array	(x,	0X50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X400000,	"start");
	create_insn	(0X400140);
	create_insn	(0X400144);
	create_insn	(x=0X400148);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40015E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X400166);
	op_hex		(x,	1);
	create_insn	(x=0X40016E);
	op_hex		(x,	1);
	create_dword	(0X400174);
	make_array	(0X400174,	0X27);
	create_insn	(0X400210);
	set_name	(0X400210,	"print_sub_400210");
	create_insn	(x=0X40023A);
	op_hex		(x,	1);
	create_insn	(x=0X400280);
	op_hex		(x,	1);
	create_insn	(0X4002A0);
	create_insn	(0X4002C4);
	create_insn	(x=0X4002C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(0X4002D4);
	create_dword	(x=0X4002D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4002DC);
	create_insn	(0X4002E8);
	set_name	(0X4002E8,	"nullsub_5");
	make_array	(0X4002EA,	0X2);
	create_insn	(0X4002EC);
	set_name	(0X4002EC,	"snprintf_va");
	create_insn	(x=0X4002F4);
	op_stkvar	(x,	1);
	set_cmt	(0X4002FE,	"cb",	0);
	set_cmt	(0X400300,	"va",	0);
	set_cmt	(0X400302,	"dst",	0);
	create_insn	(x=0X400304);
	op_stkvar	(x,	1);
	set_cmt	(0X400306,	"fmt",	0);
	create_dword	(x=0X40031C);
	op_plain_offset	(x,	0,	0X400302);
	op_plain_offset	(x,	128,	0X400302);
	create_insn	(0X400320);
	set_name	(0X400320,	"TRACE_printf");
	set_cmt	(0X400322,	"a2",	0);
	create_insn	(x=0X400322);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X400326,	"args",	0);
	create_insn	(x=0X400326);
	op_stkvar	(x,	1);
	set_cmt	(0X400328,	"fmt",	0);
	create_insn	(x=0X400328);
	op_stkvar	(x,	1);
	create_insn	(x=0X400330);
	op_stkvar	(x,	1);
	create_dword	(x=0X400334);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X400334,	"a2");
	create_insn	(0X400338);
	create_insn	(0X400348);
	create_insn	(0X400350);
	create_insn	(0X400364);
	create_insn	(0X400372);
	create_insn	(0X400386);
	set_name	(0X400386,	"print_sub_400386");
	create_insn	(0X40039C);
	create_insn	(0X4003A0);
	create_insn	(0X4003C2);
	create_insn	(0X4003D8);
	set_name	(0X4003D8,	"print_sub_4003D8");
	create_insn	(x=0X4003E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4003F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X4003F8);
	create_insn	(x=0X4003FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X400402);
	create_insn	(x=0X400406);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X40040C);
	create_insn	(0X40041A);
	create_dword	(0X400440);
	create_dword	(0X400444);
	create_dword	(0X400448);
	create_insn	(0X400450);
	set_name	(0X400450,	"print_sub_400450");
	create_insn	(0X400460);
	create_insn	(x=0X40046E);
	op_hex		(x,	1);
	create_insn	(0X4004A0);
	create_insn	(0X4004A6);
	set_name	(0X4004A6,	"print_sub_4004A6");
	create_insn	(0X4004C2);
	create_insn	(x=0X4004C4);
	op_hex		(x,	1);
	create_insn	(0X4004CE);
	create_insn	(x=0X4004D2);
	op_hex		(x,	1);
	create_dword	(x=0X4004E0);
	op_plain_offset	(x,	0,	0X400466);
	op_plain_offset	(x,	128,	0X400466);
	create_insn	(0X4004E4);
	set_name	(0X4004E4,	"print_sub_4004E4");
	create_insn	(0X400516);
	create_insn	(0X400536);
	create_insn	(x=0X40053A);
	op_hex		(x,	1);
	create_insn	(0X400560);
	create_insn	(x=0X40057C);
	op_hex		(x,	1);
	create_insn	(0X400582);
	create_insn	(x=0X4005B8);
	op_hex		(x,	1);
	create_insn	(x=0X4005C6);
	op_hex		(x,	1);
	create_insn	(x=0X4005D0);
	op_hex		(x,	1);
	create_insn	(0X4005EE);
	create_insn	(0X4005F0);
	create_insn	(0X400612);
	create_insn	(x=0X400628);
	op_hex		(x,	1);
	create_insn	(x=0X400642);
	op_hex		(x,	1);
	create_insn	(0X40064C);
	create_insn	(0X400650);
	create_insn	(0X400654);
	create_insn	(0X400658);
	create_insn	(0X40065E);
	create_insn	(0X400662);
	create_dword	(x=0X400668);
	op_plain_offset	(x,	0,	0X4004F8);
	op_plain_offset	(x,	128,	0X4004F8);
	create_insn	(0X40066C);
	set_name	(0X40066C,	"abort");
	create_insn	(0X400682);
	create_insn	(0X4006A6);
	create_insn	(0X4006AC);
	create_insn	(0X4006B6);
	create_insn	(0X4006BA);
	create_insn	(0X4006DA);
	create_insn	(0X4006EC);
	create_insn	(x=0X4006FA);
	op_hex		(x,	1);
	create_insn	(0X400708);
	create_insn	(0X400722);
	create_insn	(0X400728);
	create_insn	(0X40074C);
	create_insn	(0X400750);
	create_insn	(0X400758);
	create_insn	(0X400760);
	create_insn	(0X400778);
	set_name	(0X400778,	"memcpy");
	create_insn	(x=0X40077E);
	op_hex		(x,	1);
	create_insn	(x=0X4007B0);
	op_hex		(x,	1);
	create_insn	(0X4007CE);
	create_insn	(0X400802);
	create_insn	(0X400866);
	create_insn	(x=0X400870);
	op_hex		(x,	1);
	create_insn	(0X400894);
	create_insn	(0X4008AA);
	set_name	(0X4008AA,	"memset_zero");
	create_insn	(x=0X4008D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X4008EC);
	op_hex		(x,	1);
	create_insn	(0X4008F8);
	create_insn	(0X400934);
	create_insn	(x=0X40093C);
	op_hex		(x,	1);
	create_insn	(0X400960);
	create_insn	(0X40096A);
	create_insn	(0X400972);
	create_insn	(0X40097C);
	create_insn	(0X400984);
	create_insn	(x=0X40099C);
	op_hex		(x,	1);
	create_insn	(0X4009A4);
	create_insn	(0X4009AE);
	create_insn	(0X4009CC);
	create_insn	(0X4009F0);
	create_insn	(0X400A08);
	create_insn	(0X400A32);
	create_insn	(0X400A36);
	create_insn	(0X400A44);
	create_insn	(0X400A4C);
	create_insn	(0X400A58);
	make_array	(0X400A5E,	0X2);
	create_insn	(0X400A60);
	set_name	(0X400A60,	"print_sub_400A60");
	create_insn	(0X400A6A);
	set_name	(0X400A6A,	"print_sub_400A6A");
	create_insn	(x=0X400A74);
	op_stkvar	(x,	1);
	make_array	(0X400A8A,	0X2);
	create_dword	(x=0X400A8C);
	op_plain_offset	(x,	0,	0X400A7C);
	op_plain_offset	(x,	128,	0X400A7C);
	create_insn	(0X400A90);
	set_name	(0X400A90,	"print_sub_400A90");
	create_insn	(0X400A9A);
	set_name	(0X400A9A,	"print_sub_400A9A");
	create_insn	(0X400AAA);
	set_name	(0X400AAA,	"print_sub_400AAA");
	create_insn	(0X400AB6);
	create_insn	(0X400ABE);
	create_insn	(0X400ACE);
	make_array	(0X400AD6,	0X2);
	create_insn	(0X400AD8);
	set_name	(0X400AD8,	"TRACE_printf_va");
	set_cmt	(0X400ADE,	"cb",	0);
	create_insn	(0X400AF4);
	create_dword	(x=0X400AF8);
	op_plain_offset	(x,	0,	0X400AE2);
	op_plain_offset	(x,	128,	0X400AE2);
	create_insn	(0X400AFC);
	create_insn	(0X400B1A);
	create_insn	(x=0X400B20);
	op_stkvar	(x,	1);
	create_insn	(0X400B6C);
	create_insn	(x=0X400B72);
	op_stkvar	(x,	1);
	create_insn	(x=0X400B82);
	op_stkvar	(x,	1);
	create_insn	(0X400B88);
	make_array	(0X400BB2,	0X2);
	create_dword	(x=0X400BB4);
	op_plain_offset	(x,	0,	0X400B0E);
	op_plain_offset	(x,	128,	0X400B0E);
	create_insn	(0X400BB8);
	set_name	(0X400BB8,	"print_sub_400BB8");
	create_insn	(x=0X400BC0);
	op_hex		(x,	1);
	create_insn	(x=0X400BCC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X400BE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X400BE6);
	create_insn	(x=0X400BEE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X400BF2);
	create_insn	(x=0X400BF6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X400C04);
	create_dword	(0X400C24);
	create_dword	(0X400C28);
	create_dword	(0X400C2C);
	create_dword	(0X400C30);
	create_insn	(0X400C34);
	create_insn	(x=0X400C3E);
	op_hex		(x,	1);
	create_insn	(x=0X400C5A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X400C60);
	op_hex		(x,	1);
	create_insn	(x=0X400C6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X400C78);
	set_name	(0X400C78,	"print_sub_400C78");
	create_insn	(0X400C90);
	create_insn	(x=0X400C92);
	op_hex		(x,	1);
	create_dword	(0X400C9C);
	create_dword	(0X400CA0);
	create_insn	(0X400CA4);
	create_insn	(0X400CB2);
	create_insn	(0X400D34);
	create_insn	(0X400D3C);
	create_insn	(0X400D3E);
	create_insn	(x=0X400D50);
	op_stkvar	(x,	1);
	create_insn	(x=0X400D54);
	op_stkvar	(x,	1);
	create_insn	(x=0X400D6C);
	op_hex		(x,	1);
	create_insn	(x=0X400D8A);
	op_stkvar	(x,	1);
	create_insn	(0X400DB0);
	create_insn	(0X400DBE);
	create_insn	(0X400DC2);
	create_insn	(x=0X400DD2);
	op_stkvar	(x,	1);
	create_insn	(0X400DE2);
	create_insn	(0X400DE8);
	create_insn	(x=0X400DEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X400DF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X400DFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X400E02);
	op_stkvar	(x,	1);
	create_insn	(x=0X400E12);
	op_stkvar	(x,	1);
	create_insn	(x=0X400E14);
	op_stkvar	(x,	1);
	create_insn	(x=0X400E22);
	op_stkvar	(x,	1);
	create_insn	(x=0X400E24);
	op_stkvar	(x,	1);
	create_insn	(0X400E2E);
	create_insn	(x=0X400E36);
	op_stkvar	(x,	1);
	create_insn	(x=0X400E38);
	op_stkvar	(x,	1);
	create_insn	(0X400E52);
	create_insn	(x=0X400E5C);
	op_stkvar	(x,	1);
	create_insn	(0X400E62);
	create_insn	(0X400E80);
	create_insn	(x=0X400E8C);
	op_stkvar	(x,	1);
	create_insn	(0X400E92);
	create_insn	(x=0X400EAA);
	op_stkvar	(x,	1);
	create_insn	(0X400EB0);
	create_insn	(0X400EB6);
	create_insn	(x=0X400ECC);
	op_stkvar	(x,	1);
	create_insn	(x=0X400ED4);
	op_stkvar	(x,	1);
	create_insn	(x=0X400ED6);
	op_stkvar	(x,	1);
	create_insn	(0X400EE2);
	create_insn	(0X400EEA);
	set_name	(0X400EEA,	"print_sub_400EEA");
	create_insn	(x=0X400EF4);
	op_hex		(x,	1);
	create_insn	(x=0X400F08);
	op_stkvar	(x,	1);
	create_insn	(0X400F12);
	create_insn	(0X400F1C);
	create_insn	(x=0X400F24);
	op_stkvar	(x,	1);
	create_insn	(0X400F38);
	create_insn	(0X400F42);
	create_insn	(0X400F5A);
	create_insn	(x=0X400F60);
	op_stkvar	(x,	1);
	create_insn	(0X400F68);
	create_insn	(x=0X400F6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X400F6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X400F70);
	op_stkvar	(x,	1);
	create_insn	(0X400F84);
	create_insn	(x=0X400F88);
	op_stkvar	(x,	1);
	create_insn	(x=0X400F8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X400F90);
	op_stkvar	(x,	1);
	create_insn	(x=0X400F92);
	op_stkvar	(x,	1);
	create_insn	(x=0X400F9C);
	op_stkvar	(x,	1);
	create_insn	(0X400FBE);
	create_insn	(x=0X400FCE);
	op_stkvar	(x,	1);
	create_insn	(0X400FD8);
	create_insn	(x=0X400FDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X400FDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X400FDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X400FFA);
	op_stkvar	(x,	1);
	create_insn	(0X40101A);
	create_insn	(0X40101E);
	create_insn	(0X401028);
	create_insn	(x=0X40104E);
	op_stkvar	(x,	1);
	create_insn	(x=0X401052);
	op_stkvar	(x,	1);
	create_insn	(0X401088);
	create_insn	(0X401098);
	create_insn	(x=0X4010A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X4010A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X4010CC);
	op_stkvar	(x,	1);
	create_insn	(0X4010EA);
	create_insn	(x=0X4010F2);
	op_stkvar	(x,	1);
	create_insn	(0X4010F8);
	create_insn	(0X401132);
	create_insn	(0X401156);
	set_name	(0X401156,	"print_sub_401156");
	create_insn	(0X401162);
	create_insn	(0X40116A);
	create_insn	(0X40117A);
	create_insn	(0X401182);
	create_insn	(0X4011A6);
	create_insn	(0X4011BC);
	create_insn	(0X4011C2);
	create_insn	(0X4011CA);
	create_insn	(0X4011CC);
	create_insn	(x=0X4011D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X4011DA,	0X2);
	create_strlit	(0X4011DC,	0X4011FA);
	set_name	(0X4011DC,	"aSigabrtAbnorma");
	make_array	(0X4011FA,	0X2);
	create_insn	(0X4011FC);
	make_array	(0X401206,	0X2);
	create_dword	(0X401208);
	create_insn	(0X40120C);
	create_dword	(x=0X401210);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X401214);
	create_insn	(x=0X401222);
	op_hex		(x,	1);
	create_insn	(x=0X40122A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40122E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X401232);
	create_insn	(x=0X401234);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X401238);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40123A);
	op_hex		(x,	1);
	create_insn	(0X401268);
	create_insn	(0X40126C);
	create_insn	(0X401284);
	create_insn	(0X401294);
	create_insn	(x=0X4012AE);
	op_stkvar	(x,	1);
	create_insn	(0X4012D8);
	create_insn	(0X4012EA);
	create_insn	(0X401312);
	create_insn	(x=0X40131A);
	op_stkvar	(x,	1);
	create_insn	(x=0X40132E);
	op_stkvar	(x,	1);
	create_insn	(x=0X401332);
	op_stkvar	(x,	1);
	create_insn	(x=0X401334);
	op_stkvar	(x,	1);
	create_insn	(x=0X40133A);
	op_stkvar	(x,	1);
	create_insn	(x=0X401350);
	op_stkvar	(x,	1);
	create_insn	(0X40135A);
	create_dword	(0X40136C);
	create_insn	(0X401370);
	create_insn	(0X401382);
	create_insn	(0X40138C);
	create_insn	(0X40139C);
	create_insn	(0X4013B4);
	create_insn	(x=0X4013BA);
	op_hex		(x,	1);
	create_insn	(x=0X4013DA);
	op_hex		(x,	1);
	create_insn	(x=0X4013EC);
	op_hex		(x,	1);
	create_insn	(0X4013F2);
	create_insn	(x=0X401438);
	op_hex		(x,	1);
	create_insn	(x=0X401440);
	op_hex		(x,	1);
	create_insn	(x=0X401498);
	op_hex		(x,	1);
	create_insn	(x=0X4014A0);
	op_hex		(x,	1);
	create_insn	(x=0X4014AC);
	op_hex		(x,	1);
	create_insn	(x=0X4014CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40159E);
	op_stkvar	(x,	1);
	create_insn	(x=0X401720);
	op_hex		(x,	1);
	create_insn	(0X40173A);
	create_insn	(0X4017D0);
	create_insn	(x=0X401812);
	op_hex		(x,	1);
	create_insn	(0X40181C);
	create_insn	(0X401822);
	create_insn	(0X401870);
	create_insn	(0X401896);
	create_insn	(0X4018BE);
	create_insn	(x=0X4018CC);
	op_hex		(x,	1);
	create_insn	(x=0X4018D2);
	op_hex		(x,	1);
	create_insn	(x=0X4018E6);
	op_hex		(x,	1);
	create_insn	(x=0X4018EE);
	op_hex		(x,	1);
	create_insn	(x=0X4018FA);
	op_hex		(x,	1);
	create_insn	(x=0X401902);
	op_hex		(x,	1);
	create_insn	(x=0X40190A);
	op_hex		(x,	1);
	create_insn	(0X4019F0);
	create_insn	(0X401A00);
	create_insn	(x=0X401A70);
	op_hex		(x,	1);
	create_insn	(0X401AE6);
	create_insn	(0X401B2A);
	create_insn	(0X401B2E);
	create_insn	(x=0X401B3C);
	op_stkvar	(x,	1);
	create_insn	(0X401B44);
	set_name	(0X401B44,	"BusFault_Handler");
	create_insn	(x=0X401B54);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X401B6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X401B7C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X401B80,	0X401BA7);
	set_name	(0X401B80,	"aD_03dBusFaultA");
	create_byte	(0X401BA7);
	create_insn	(0X401BA8);
	set_name	(0X401BA8,	"unkn1__ConfigurationChangedHandler");
	set_cmt	(0X401BB4,	"cfgNum",	0);
	create_insn	(0X401BC4);
	create_insn	(0X401BC6);
	set_name	(0X401BC6,	"CDCDSerialDriver_Initialize");
	set_cmt	(0X401BD8,	"bInterfaceNb",	0);
	set_cmt	(0X401BDA,	"pUsbd",	0);
	create_insn	(0X401BE8);
	set_name	(0X401BE8,	"CDCDSerialDriver_RequestHandler");
	set_cmt	(0X401BF8,	"request",	0);
	create_insn	(0X401C0E);
	create_insn	(0X401C10);
	set_name	(0X401C10,	"CDCDSerialPort_Initialize");
	set_cmt	(0X401C20,	"parity",	0);
	set_cmt	(0X401C24,	"stopbits",	0);
	set_cmt	(0X401C30,	"lineCoding",	0);
	set_cmt	(0X401C32,	"databits",	0);
	create_insn	(x=0X401C32);
	op_stkvar	(x,	1);
	set_cmt	(0X401C34,	"bitrate",	0);
	make_array	(0X401C3E,	0X2);
	create_insn	(0X401C40);
	create_insn	(x=0X401C46);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X401C4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X401C50);
	op_stkvar	(x,	1);
	make_array	(0X401C5A,	0X2);
	create_dword	(x=0X401C5C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X401C60);
	set_cmt	(0X401C62,	"bEndpoint",	0);
	create_insn	(x=0X401C64);
	op_stkvar	(x,	1);
	set_cmt	(0X401C68,	"pArgument",	0);
	create_insn	(x=0X401C68);
	op_stkvar	(x,	1);
	create_insn	(0X401C70);
	create_insn	(0X401C74);
	set_name	(0X401C74,	"CDCDSerialPort_RequestHandler");
	create_insn	(x=0X401C9A);
	op_enum		(x,	1,	GetEnum("CDCGenericRequest"),0);
	set_cmt	(0X401C9C,	"inlined _SetLineCoding",	1);
	create_insn	(x=0X401CA0);
	op_enum		(x,	1,	GetEnum("CDCGenericRequest"),0);
	set_cmt	(0X401CA2,	"inlined _GetLineCoding",	1);
	create_insn	(x=0X401CA4);
	op_enum		(x,	1,	GetEnum("CDCGenericRequest"),0);
	set_cmt	(0X401CAC,	"fCallback",	0);
	create_insn	(0X401CAC);
	set_cmt	(0X401CAE,	"dLength",	0);
	set_cmt	(0X401CB0,	"pData",	0);
	create_insn	(x=0X401CB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X401CB2,	"bEndpoint",	0);
	set_cmt	(0X401CB4,	"pArgument",	0);
	create_insn	(x=0X401CB4);
	op_stkvar	(x,	1);
	set_cmt	(0X401CBC,	"fCallback",	0);
	create_insn	(0X401CBC);
	set_cmt	(0X401CBE,	"pArgument",	0);
	create_insn	(x=0X401CBE);
	op_stkvar	(x,	1);
	set_cmt	(0X401CC0,	"dLength",	0);
	set_cmt	(0X401CC2,	"bEndpoint",	0);
	set_cmt	(0X401CC4,	"pData",	0);
	set_cmt	(0X401CCE,	"inlined _SetControlLineState",	1);
	create_insn	(0X401CCE);
	set_cmt	(0X401CD0,	"fCallback",	0);
	set_cmt	(0X401CD4,	"pData",	0);
	set_cmt	(0X401CD6,	"bEndpoint",	0);
	set_cmt	(0X401CD8,	"pArgument",	0);
	create_insn	(x=0X401CD8);
	op_stkvar	(x,	1);
	set_cmt	(0X401CDA,	"dLength",	0);
	create_dword	(x=0X401CF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X401CF0,	"fCallback");
	create_dword	(x=0X401CF4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X401CF8);
	set_cmt	(0X401CFA,	"bEndpoint",	0);
	create_insn	(x=0X401CFC);
	op_stkvar	(x,	1);
	set_cmt	(0X401D00,	"pArgument",	0);
	create_insn	(x=0X401D00);
	op_stkvar	(x,	1);
	create_insn	(0X401D08);
	create_insn	(0X401D0C);
	create_insn	(x=0X401D0E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X401D18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X401D1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X401D20);
	op_plain_offset	(x,	1,	0X20405930);
	op_plain_offset	(x,	129,	0X20405930);
	create_insn	(x=0X401D28);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X401D3E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X401D44);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X401D48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X401D4C,	0X401D71);
	set_name	(0X401D4C,	"aD_03dVcpDisabl");
	create_byte	(0X401D71);
	make_array	(0X401D71,	0X3);
	create_insn	(0X401D74);
	create_insn	(0X401D80);
	create_insn	(0X401D8E);
	create_insn	(0X401D9C);
	set_name	(0X401D9C,	"CDCDSerial_Initialize");
	set_cmt	(0X401DA2,	"pCdcd",	0);
	create_insn	(x=0X401DA2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X401DA4,	"pArg",	0);
	set_cmt	(0X401DA6,	"firstInterface",	0);
	set_cmt	(0X401DAA,	"fEventHandler",	0);
	create_insn	(x=0X401DAA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X401DAC,	"pUsbd",	0);
	create_dword	(x=0X401DB4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X401DB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X401DB8,	"fEventHandler");
	create_insn	(x=0X401DBC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X401DC2);
	op_plain_offset	(x,	1,	0X20405930);
	op_plain_offset	(x,	129,	0X20405930);
	create_insn	(x=0X401DCC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X401DD2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X401DD4);
	op_plain_offset	(x,	1,	0X20405930);
	op_plain_offset	(x,	129,	0X20405930);
	create_insn	(x=0X401DF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X401E14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X401E1E,	0X2);
	create_dword	(x=0X401E20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X401E24);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X401E28,	0X401E4C);
	set_name	(0X401E28,	"aD_03dVcpIsLock");
	create_strlit	(0X401E4C,	0X401E62);
	set_name	(0X401E4C,	"aD_03dVcpEnable");
	make_array	(0X401E62,	0X2);
	create_insn	(0X401E64);
	create_insn	(x=0X401E68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X401E6A);
	op_stkvar	(x,	1);
	create_dword	(x=0X401E78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401E7C,	"request",	0);
	create_insn	(0X401E7C);
	set_name	(0X401E7C,	"CDCDSerial_RequestHandler");
	set_cmt	(0X401E7E,	"pCdcd",	0);
	create_insn	(x=0X401E7E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X401E84);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X401E84,	"pCdcd");
	create_insn	(x=0X401E88);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X401E8C);
	op_plain_offset	(x,	1,	0X20405930);
	op_plain_offset	(x,	129,	0X20405930);
	create_insn	(x=0X401E94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X401EAA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X401EB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X401EB4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X401EB8,	0X401ED8);
	set_name	(0X401EB8,	"aD_03dVcpDisa_0");
	create_insn	(0X401ED8);
	create_insn	(x=0X401EDC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X401EDE);
	op_stkvar	(x,	1);
	create_dword	(x=0X401EEC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X401EF0);
	set_name	(0X401EF0,	"CDCLineCoding_Initialize");
	create_insn	(x=0X401EF2);
	op_stkvar	(x,	1);
	create_insn	(0X401EFE);
	set_name	(0X401EFE,	"do_disable_irq");
	create_insn	(0X401F02);
	set_name	(0X401F02,	"do_enable_irq");
	create_insn	(0X401F06);
	create_insn	(0X401F12);
	create_insn	(x=0X401F1A);
	op_hex		(x,	1);
	create_insn	(0X401F26);
	create_insn	(0X401F3C);
	make_array	(0X401F52,	0X2);
	create_insn	(0X401F54);
	create_insn	(x=0X401F56);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X401F5C);
	create_insn	(0X401F6C);
	create_insn	(x=0X401F70);
	op_hex		(x,	1);
	create_insn	(x=0X401F80);
	op_hex		(x,	1);
	make_array	(0X401F92,	0X2);
	create_dword	(x=0X401F94);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X401F98);
	create_insn	(x=0X401FAA);
	op_hex		(x,	1);
	create_insn	(x=0X401FB2);
	op_hex		(x,	1);
	create_insn	(0X401FBA);
	set_cmt	(0X401FC0,	"a4",	0);
	set_cmt	(0X401FC4,	"a3",	0);
	create_insn	(x=0X401FC4);
	op_stkvar	(x,	1);
	set_cmt	(0X401FC6,	"a2",	0);
	set_cmt	(0X401FC8,	"a1",	0);
	set_cmt	(0X401FCE,	"a4",	0);
	set_cmt	(0X401FD0,	"a2",	0);
	set_cmt	(0X401FD2,	"a3",	0);
	create_insn	(x=0X401FD2);
	op_stkvar	(x,	1);
	set_cmt	(0X401FD4,	"a1",	0);
	create_insn	(x=0X401FD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X401FDA);
	op_stkvar	(x,	1);
	create_insn	(x=0X401FE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X40200A);
	op_stkvar	(x,	1);
	create_insn	(x=0X402014);
	op_stkvar	(x,	1);
	create_insn	(0X402022);
	create_insn	(x=0X402028);
	op_hex		(x,	1);
	create_insn	(0X402034);
	create_insn	(0X402046);
	set_name	(0X402046,	"inf_loop");
	create_insn	(0X402048);
	set_name	(0X402048,	"flash_sub_402048");
	create_insn	(0X40205C);
	create_insn	(0X40206C);
	create_insn	(x=0X40206E);
	op_hex		(x,	1);
	create_insn	(0X402076);
	make_array	(0X40207A,	0X2);
	create_insn	(0X40207C);
	set_name	(0X40207C,	"flash_sub_40207C");
	create_insn	(x=0X402084);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40209A);
	op_hex		(x,	1);
	create_insn	(0X4020A4);
	create_insn	(x=0X4020A8);
	op_hex		(x,	1);
	create_insn	(x=0X4020B4);
	op_hex		(x,	1);
	make_array	(0X4020BA,	0X2);
	create_dword	(x=0X4020BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X4020C0);
	create_insn	(0X4020C4);
	create_insn	(x=0X4020CE);
	op_hex		(x,	1);
	create_insn	(x=0X4020D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X4020D8,	"flash_sub_4020D8");
	create_insn	(0X4020EA);
	make_array	(0X402106,	0X2);
	create_dword	(0X402108);
	create_insn	(0X40210C);
	set_cmt	(0X40210E,	"a4",	0);
	create_insn	(x=0X40210E);
	op_stkvar	(x,	1);
	set_cmt	(0X402110,	"a2",	0);
	set_cmt	(0X402112,	"a3",	0);
	create_insn	(x=0X402112);
	op_stkvar	(x,	1);
	set_cmt	(0X402114,	"a1",	0);
	create_insn	(x=0X40211A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40211E);
	op_stkvar	(x,	1);
	create_insn	(x=0X402124);
	op_stkvar	(x,	1);
	create_dword	(x=0X40212C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X402130);
	create_insn	(x=0X402132);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40213A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X402140);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X402144);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X402148);
	create_insn	(x=0X402154);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X402176);
	make_array	(0X40217A,	0X2);
	create_dword	(x=0X40217C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X402180);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X402184);
	create_insn	(0X402190);
	create_insn	(x=0X40219A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X4021AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X4021B0);
	create_insn	(0X4021B4);
	set_name	(0X4021B4,	"flash_unlock");
	create_insn	(x=0X4021BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X4021C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X4021C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X4021CE);
	op_stkvar	(x,	1);
	set_cmt	(0X4021D2,	"a4",	0);
	set_cmt	(0X4021D4,	"a2",	0);
	create_insn	(x=0X4021D4);
	op_stkvar	(x,	1);
	set_cmt	(0X4021D6,	"a1",	0);
	create_insn	(x=0X4021D6);
	op_stkvar	(x,	1);
	set_cmt	(0X4021D8,	"a3",	0);
	set_cmt	(0X4021DE,	"a4",	0);
	set_cmt	(0X4021E0,	"a2",	0);
	create_insn	(x=0X4021E0);
	op_stkvar	(x,	1);
	set_cmt	(0X4021E2,	"a3",	0);
	create_insn	(x=0X4021E2);
	op_stkvar	(x,	1);
	set_cmt	(0X4021E4,	"a1",	0);
	create_insn	(x=0X4021EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X4021EE);
	create_insn	(x=0X4021F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X4021FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X402202);
	op_stkvar	(x,	1);
	create_insn	(x=0X402206);
	op_stkvar	(x,	1);
	create_insn	(x=0X40220A);
	op_stkvar	(x,	1);
	create_dword	(x=0X402218);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40221C);
	set_name	(0X40221C,	"flash_write2");
	create_insn	(x=0X402220);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X40223A,	"a4",	0);
	create_insn	(x=0X40223A);
	op_stkvar	(x,	1);
	set_cmt	(0X40223C,	"a2",	0);
	set_cmt	(0X40223E,	"a3",	0);
	create_insn	(x=0X40223E);
	op_stkvar	(x,	1);
	set_cmt	(0X402240,	"a1",	0);
	create_insn	(x=0X402240);
	op_stkvar	(x,	1);
	create_insn	(x=0X402248);
	op_stkvar	(x,	1);
	create_insn	(x=0X402256);
	op_stkvar	(x,	1);
	create_insn	(x=0X40225A);
	op_stkvar	(x,	1);
	set_cmt	(0X402264,	"num",	0);
	create_insn	(x=0X402264);
	op_stkvar	(x,	1);
	set_cmt	(0X402268,	"source",	0);
	create_insn	(x=0X402268);
	op_stkvar	(x,	1);
	set_cmt	(0X402274,	"destination",	0);
	create_insn	(x=0X40227A);
	op_stkvar	(x,	1);
	set_cmt	(0X40227E,	"num",	0);
	set_cmt	(0X402280,	"source",	0);
	set_cmt	(0X402282,	"destination",	0);
	create_insn	(x=0X402288);
	op_stkvar	(x,	1);
	set_cmt	(0X40228C,	"num",	0);
	create_insn	(x=0X40228E);
	op_stkvar	(x,	1);
	set_cmt	(0X402294,	"source",	0);
	set_cmt	(0X402296,	"destination",	0);
	create_insn	(x=0X40229C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4022A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X4022B2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4022B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X4022BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X4022C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X4022D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X4022D6);
	op_stkvar	(x,	1);
	make_array	(0X4022E6,	0X2);
	create_dword	(x=0X4022E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4022EC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4022F0);
	set_name	(0X4022F0,	"USBDDriver_GetDescriptor");
	create_insn	(x=0X402302);
	op_stkvar	(x,	1);
	create_insn	(x=0X402308);
	op_stkvar	(x,	1);
	create_insn	(x=0X40232E);
	op_stkvar	(x,	1);
	set_cmt	(0X402330,	"switch 8 cases ",	0);
	set_cmt	(0X402334,	"switch jump",	0);
	set_cmt	(0X402338,	"jump table for switch statement",	0);
	create_byte	(0X402338);
	set_name	(0X402338,	"jpt_402334");
	create_byte	(0X402339);
	create_byte	(0X40233A);
	create_byte	(0X40233B);
	create_byte	(0X40233C);
	create_byte	(0X40233D);
	create_byte	(0X40233E);
	create_byte	(0X40233F);
	create_insn	(0X402340);
	set_cmt	(0X402346,	"jumptable 00402334 case 1",	1);
	create_insn	(0X402346);
	create_insn	(x=0X40235E);
	op_stkvar	(x,	1);
	set_cmt	(0X402362,	"jumptable 00402334 case 2",	1);
	create_insn	(0X402362);
	set_cmt	(0X402382,	"pArgument",	0);
	create_insn	(x=0X402382);
	op_stkvar	(x,	1);
	create_insn	(0X40238A);
	set_cmt	(0X40238E,	"fCallback",	0);
	create_insn	(0X40238E);
	set_cmt	(0X402390,	"dLength",	0);
	set_cmt	(0X402392,	"pData",	0);
	set_cmt	(0X402394,	"bEndpoint",	0);
	set_cmt	(0X4023A0,	"jumptable 00402334 case 6",	1);
	create_insn	(0X4023A0);
	create_insn	(x=0X4023BC);
	op_stkvar	(x,	1);
	set_cmt	(0X4023C0,	"jumptable 00402334 case 7",	1);
	create_insn	(0X4023C0);
	create_insn	(0X4023D6);
	create_insn	(0X4023DA);
	create_insn	(0X4023DE);
	create_insn	(0X4023E2);
	set_cmt	(0X4023EA,	"jumptable 00402334 case 3",	1);
	create_insn	(x=0X4023EA);
	op_stkvar	(x,	1);
	set_cmt	(0X4023F2,	"bEndpoint",	0);
	create_insn	(x=0X4023FC);
	op_stkvar	(x,	1);
	create_insn	(0X402424);
	create_insn	(0X402426);
	create_insn	(x=0X402428);
	op_stkvar	(x,	1);
	set_cmt	(0X40242E,	"jumptable 00402334 default case",	1);
	create_insn	(0X40242E);
	set_name	(0X40242E,	"def_402334");
	create_insn	(x=0X402430);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(0X402438);
	create_strlit	(0X40243C,	0X402479);
	set_name	(0X40243C,	"aWUsbddriver_ge");
	create_byte	(0X402479);
	make_array	(0X402479,	0X3);
	create_insn	(0X40247C);
	set_name	(0X40247C,	"USBDDriver_GetDeviceStatus");
	create_insn	(x=0X40247E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X402494);
	create_insn	(x=0X4024A2);
	op_hex		(x,	1);
	create_insn	(x=0X4024AE);
	op_hex		(x,	1);
	set_cmt	(0X4024B4,	"fCallback",	0);
	set_cmt	(0X4024B6,	"pData",	0);
	create_insn	(x=0X4024B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4024B8,	"dLength",	0);
	set_cmt	(0X4024BA,	"bEndpoint",	0);
	set_cmt	(0X4024BC,	"pArgument",	0);
	create_insn	(x=0X4024BC);
	op_stkvar	(x,	1);
	create_dword	(x=0X4024C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4024C4,	"pData");
	create_insn	(0X4024C8);
	set_name	(0X4024C8,	"HardFault_Handler");
	create_insn	(x=0X4024D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4024EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X402500);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X402504,	0X40252B);
	set_name	(0X402504,	"aD_03dHardfault");
	create_byte	(0X40252B);
	create_insn	(0X40252C);
	set_name	(0X40252C,	"HardFault_reason");
	create_insn	(x=0X402530);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40254A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40256A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40258C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4025AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4025D0,	"fmt",	0);
	create_insn	(x=0X4025D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4025F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X402616);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40263C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X402660);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X402682);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4026A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X4026C8);
	create_insn	(x=0X4026CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4026D2);
	op_hex		(x,	1);
	create_insn	(x=0X4026F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X402720,	"fmt",	0);
	create_insn	(x=0X402720);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X402742);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X402764);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X402786);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4027A8,	"fmt",	0);
	create_insn	(x=0X4027A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4027B0);
	op_hex		(x,	1);
	create_insn	(x=0X4027D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4027F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X402806,	0X2);
	create_dword	(x=0X402808);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X40280C,	0X40282D);
	set_name	(0X40280C,	"aD_03dInHardFau");
	create_byte	(0X40282D);
	make_array	(0X40282D,	0X3);
	create_dword	(0X402830);
	create_strlit	(0X402834,	0X402852);
	set_name	(0X402834,	"aD_03dScbHfsr0x");
	make_array	(0X402852,	0X2);
	create_strlit	(0X402854,	0X402876);
	set_name	(0X402854,	"aD_03dDebugEven");
	make_array	(0X402876,	0X2);
	create_strlit	(0X402878,	0X402895);
	set_name	(0X402878,	"aD_03dScbDfsr0x");
	create_byte	(0X402895);
	make_array	(0X402895,	0X3);
	create_dword	(x=0X402898);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X402898,	"fmt");
	create_dword	(0X40289C);
	create_strlit	(0X4028A0,	0X4028BD);
	set_name	(0X4028A0,	"aD_03dForcedHar");
	create_byte	(0X4028BD);
	make_array	(0X4028BD,	0X3);
	create_strlit	(0X4028C0,	0X4028DE);
	set_name	(0X4028C0,	"aD_03dScbCfsr0x");
	make_array	(0X4028DE,	0X2);
	create_strlit	(0X4028E0,	0X4028F7);
	set_name	(0X4028E0,	"aD_03dUsageFaul");
	create_byte	(0X4028F7);
	create_strlit	(0X4028F8,	0X402912);
	set_name	(0X4028F8,	"aD_03dDivideByZ");
	make_array	(0X402912,	0X2);
	create_strlit	(0X402914,	0X402936);
	set_name	(0X402914,	"aD_03dUnaligned");
	make_array	(0X402936,	0X2);
	create_strlit	(0X402938,	0X40295C);
	set_name	(0X402938,	"aD_03dCoprocess");
	create_strlit	(0X40295C,	0X40298B);
	set_name	(0X40295C,	"aD_03dIntegrity");
	create_byte	(0X40298B);
	create_strlit	(0X40298C,	0X4029A1);
	set_name	(0X40298C,	"aD_03dBusFault");
	create_byte	(0X4029A1);
	make_array	(0X4029A1,	0X3);
	create_dword	(x=0X4029A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X4029A8,	0X4029DD);
	set_name	(0X4029A8,	"aD_03dBusFaultH");
	create_byte	(0X4029DD);
	make_array	(0X4029DD,	0X3);
	create_strlit	(0X4029E0,	0X402A16);
	set_name	(0X4029E0,	"aD_03dBusFaul_0");
	make_array	(0X402A16,	0X2);
	create_strlit	(0X402A18,	0X402A3F);
	set_name	(0X402A18,	"aD_03dImprecise");
	create_byte	(0X402A3F);
	create_dword	(x=0X402A40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X402A44,	0X402A5C);
	set_name	(0X402A44,	"aD_03dMemoryFau");
	create_insn	(0X402A5C);
	create_insn	(x=0X402A94);
	op_hex		(x,	1);
	create_insn	(x=0X402A9E);
	op_hex		(x,	1);
	create_insn	(0X402AB8);
	create_insn	(0X402B5C);
	make_array	(0X402B8E,	0X2);
	create_insn	(x=0X402B90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X402BA0);
	op_hex		(x,	1);
	create_dword	(x=0X402BAC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X402BB0);
	create_insn	(x=0X402BB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X402BB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X402BC2);
	op_hex		(x,	1);
	create_insn	(x=0X402BEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X402BF4);
	op_stkvar	(x,	1);
	create_insn	(0X402C00);
	create_insn	(x=0X402C06);
	op_stkvar	(x,	1);
	create_insn	(x=0X402C16);
	op_stkvar	(x,	1);
	create_insn	(x=0X402C20);
	op_stkvar	(x,	1);
	create_insn	(x=0X402C26);
	op_stkvar	(x,	1);
	create_insn	(x=0X402C2C);
	op_stkvar	(x,	1);
	make_array	(0X402C3A,	0X2);
	create_dword	(0X402C3C);
	create_insn	(0X402C40);
	create_insn	(x=0X402C44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X402C4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X402C50);
	op_hex		(x,	1);
	create_insn	(x=0X402C80);
	op_stkvar	(x,	1);
	create_insn	(x=0X402C86);
	op_stkvar	(x,	1);
	create_insn	(0X402C92);
	create_insn	(x=0X402C98);
	op_stkvar	(x,	1);
	create_insn	(x=0X402CA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X402CB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X402CB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X402CBE);
	op_stkvar	(x,	1);
	create_dword	(0X402CCC);
	create_dword	(x=0X402CD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X402CD4);
	create_insn	(0X402CD8);
	create_insn	(0X402CDE);
	create_insn	(0X402CE4);
	create_insn	(0X402CEA);
	create_insn	(0X402CF0);
	create_insn	(x=0X402CF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X402D06);
	op_hex		(x,	1);
	create_insn	(x=0X402D14);
	op_hex		(x,	1);
	create_insn	(x=0X402D18);
	op_hex		(x,	1);
	create_insn	(0X402D2C);
	create_insn	(0X402D36);
	create_insn	(x=0X402D3A);
	op_hex		(x,	1);
	make_array	(0X402D42,	0X2);
	create_insn	(0X402D44);
	create_insn	(0X402D84);
	create_insn	(x=0X402DD2);
	op_hex		(x,	1);
	create_insn	(0X402E86);
	create_insn	(0X402E88);
	create_insn	(0X402EB4);
	create_insn	(0X402EC2);
	create_insn	(x=0X402ED8);
	op_hex		(x,	1);
	create_insn	(x=0X402EDE);
	op_hex		(x,	1);
	create_dword	(x=0X402EF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X402EF4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X402EF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X402EFC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X402F00);
	create_insn	(x=0X402F04);
	op_hex		(x,	1);
	create_insn	(x=0X402F08);
	op_hex		(x,	1);
	create_insn	(0X402F10);
	create_insn	(x=0X402F16);
	op_hex		(x,	1);
	create_insn	(0X402F20);
	create_insn	(0X402F32);
	create_insn	(0X402F3A);
	create_insn	(0X402F52);
	create_insn	(0X402F5A);
	create_insn	(0X402F84);
	create_insn	(0X402F9A);
	create_insn	(x=0X402FA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X402FCA,	0X2);
	create_dword	(x=0X402FCC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X402FD0);
	create_dword	(0X402FEC);
	create_dword	(0X402FF0);
	create_insn	(0X402FF4);
	create_insn	(x=0X403012);
	op_stkvar	(x,	1);
	create_insn	(x=0X403036);
	op_stkvar	(x,	1);
	create_insn	(x=0X40304E);
	op_stkvar	(x,	1);
	create_insn	(x=0X403066);
	op_stkvar	(x,	1);
	create_insn	(x=0X40307E);
	op_stkvar	(x,	1);
	create_insn	(x=0X403096);
	op_stkvar	(x,	1);
	create_insn	(x=0X4030AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X4030C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X4030DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X4030F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X40310A);
	op_stkvar	(x,	1);
	create_insn	(x=0X403128);
	op_stkvar	(x,	1);
	create_insn	(x=0X403140);
	op_stkvar	(x,	1);
	create_insn	(x=0X403158);
	op_stkvar	(x,	1);
	create_insn	(x=0X403170);
	op_stkvar	(x,	1);
	create_insn	(x=0X403188);
	op_stkvar	(x,	1);
	create_insn	(x=0X4031A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X4031B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X4031D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X4031E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X403200);
	op_stkvar	(x,	1);
	create_insn	(x=0X403218);
	op_stkvar	(x,	1);
	create_insn	(x=0X403230);
	op_stkvar	(x,	1);
	create_insn	(x=0X403248);
	op_stkvar	(x,	1);
	create_insn	(x=0X403260);
	op_stkvar	(x,	1);
	create_insn	(x=0X403278);
	op_stkvar	(x,	1);
	create_insn	(x=0X403290);
	op_stkvar	(x,	1);
	create_insn	(x=0X4032A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X4032C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X4032D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X4032F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X403308);
	op_stkvar	(x,	1);
	create_insn	(x=0X403310);
	op_stkvar	(x,	1);
	create_insn	(x=0X403322);
	op_stkvar	(x,	1);
	create_insn	(x=0X403338);
	op_stkvar	(x,	1);
	create_insn	(x=0X403350);
	op_stkvar	(x,	1);
	create_insn	(x=0X403364);
	op_stkvar	(x,	1);
	create_insn	(x=0X403374);
	op_stkvar	(x,	1);
	create_insn	(x=0X40338C);
	op_stkvar	(x,	1);
	create_insn	(x=0X40339C);
	op_stkvar	(x,	1);
	create_insn	(x=0X4033B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X4033C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X4033DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X4033F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X403400);
	op_stkvar	(x,	1);
	create_dword	(0X403414);
	create_dword	(0X403418);
	create_dword	(0X40341C);
	create_dword	(0X403420);
	create_dword	(0X403424);
	create_dword	(0X403428);
	create_dword	(0X40342C);
	create_dword	(0X403430);
	create_dword	(0X403434);
	create_dword	(0X403438);
	create_dword	(0X40343C);
	create_dword	(0X403440);
	create_dword	(0X403444);
	create_dword	(0X403448);
	create_dword	(0X40344C);
	create_dword	(0X403450);
	create_dword	(0X403454);
	create_dword	(0X403458);
	create_dword	(0X40345C);
	create_dword	(0X403460);
	create_dword	(0X403464);
	create_dword	(0X403468);
	create_dword	(0X40346C);
	create_dword	(0X403470);
	create_dword	(0X403474);
	create_dword	(0X403478);
	create_dword	(0X40347C);
	create_dword	(0X403480);
	create_dword	(0X403484);
	create_dword	(0X403488);
	create_dword	(0X40348C);
	create_dword	(0X403490);
	create_dword	(0X403494);
	create_dword	(0X403498);
	create_dword	(0X40349C);
	create_dword	(0X4034A0);
	create_dword	(0X4034A4);
	create_dword	(0X4034A8);
	create_dword	(0X4034AC);
	create_dword	(0X4034B0);
	create_dword	(0X4034B4);
	create_dword	(0X4034B8);
	create_dword	(0X4034BC);
	create_dword	(0X4034C0);
	create_insn	(x=0X4034C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X4034DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X4034EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X403502);
	op_stkvar	(x,	1);
	create_insn	(x=0X403516);
	op_stkvar	(x,	1);
	create_insn	(x=0X40352A);
	op_stkvar	(x,	1);
	create_insn	(x=0X40353E);
	op_stkvar	(x,	1);
	create_insn	(x=0X403552);
	op_stkvar	(x,	1);
	create_insn	(x=0X403566);
	op_stkvar	(x,	1);
	create_insn	(x=0X40357C);
	op_stkvar	(x,	1);
	create_insn	(x=0X40358E);
	op_stkvar	(x,	1);
	create_insn	(x=0X4035A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X4035B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X4035CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X4035DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X4035F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X403606);
	op_stkvar	(x,	1);
	create_insn	(x=0X40361A);
	op_stkvar	(x,	1);
	create_insn	(x=0X40362E);
	op_stkvar	(x,	1);
	make_array	(0X403662,	0X2);
	create_dword	(0X403664);
	create_dword	(0X403668);
	create_dword	(0X40366C);
	create_dword	(0X403670);
	create_dword	(0X403674);
	create_dword	(0X403678);
	create_dword	(0X40367C);
	create_dword	(0X403680);
	create_dword	(0X403684);
	create_dword	(0X403688);
	create_dword	(0X40368C);
	create_dword	(0X403690);
	create_dword	(0X403694);
	create_dword	(0X403698);
	create_dword	(0X40369C);
	create_dword	(0X4036A0);
	create_dword	(0X4036A4);
	create_dword	(0X4036A8);
	create_dword	(0X4036AC);
	create_insn	(0X4036B0);
	set_cmt	(0X4036E4,	"num",	0);
	set_cmt	(0X4036E6,	"destination",	0);
	set_cmt	(0X4036E8,	"source",	0);
	set_cmt	(0X403700,	"source",	0);
	create_insn	(0X403700);
	set_cmt	(0X403702,	"destination",	0);
	create_insn	(x=0X403702);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X403704,	"num",	0);
	create_insn	(x=0X40370A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X40371E,	"num",	0);
	set_cmt	(0X403724,	"source",	0);
	set_cmt	(0X40372A,	"destination",	0);
	create_dword	(x=0X403730);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403730,	"destination");
	create_insn	(0X403734);
	set_name	(0X403734,	"MemManage_Handler");
	create_insn	(x=0X403740);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X403756);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X403768);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X40376C,	0X4037A4);
	set_name	(0X40376C,	"aD_03dMemorymem");
	create_insn	(0X4037A4);
	create_insn	(0X4037A6);
	set_name	(0X4037A6,	"NVIC_ClearPendingIRQ");
	create_insn	(x=0X4037A8);
	op_hex		(x,	1);
	create_insn	(x=0X4037B2);
	create_insn	(0X4037BC);
	create_insn	(x=0X4037C8);
	op_hex		(x,	1);
	create_insn	(x=0X4037D0);
	op_hex		(x,	1);
	create_dword	(x=0X4037D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4037DC);
	create_insn	(0X4037E2);
	create_insn	(0X4037E8);
	create_insn	(0X4037EE);
	create_insn	(0X4037F4);
	create_insn	(0X4037FA);
	create_insn	(0X403802);
	create_insn	(0X40380A);
	set_cmt	(0X40380C,	"switch 7 cases ",	0);
	set_cmt	(0X403810,	"switch jump",	0);
	set_cmt	(0X403814,	"jump table for switch statement",	0);
	create_byte	(0X403814);
	set_name	(0X403814,	"jpt_403810");
	create_byte	(0X403815);
	create_byte	(0X403816);
	create_byte	(0X403817);
	create_byte	(0X403818);
	create_byte	(0X403819);
	create_byte	(0X40381A);
	set_cmt	(0X40381C,	"jumptable 00403810 case 0",	1);
	create_insn	(0X40381C);
	create_insn	(x=0X403822);
	op_hex		(x,	1);
	create_insn	(0X40382E);
	set_cmt	(0X40383C,	"jumptable 00403810 case 1",	1);
	create_insn	(0X40383C);
	create_insn	(x=0X403842);
	op_hex		(x,	1);
	create_insn	(0X40384E);
	set_cmt	(0X403864,	"jumptable 00403810 case 2",	1);
	create_insn	(0X403864);
	create_insn	(x=0X40386A);
	op_hex		(x,	1);
	create_insn	(0X403876);
	set_cmt	(0X403884,	"jumptable 00403810 case 3",	1);
	create_insn	(0X403884);
	create_insn	(x=0X40388A);
	op_hex		(x,	1);
	create_insn	(0X403896);
	set_cmt	(0X4038A6,	"jumptable 00403810 case 4",	1);
	create_insn	(0X4038A6);
	create_insn	(0X4038BC);
	create_insn	(x=0X4038BE);
	op_hex		(x,	1);
	create_insn	(0X4038C8);
	create_insn	(0X4038D4);
	set_cmt	(0X4038E0,	"jumptable 00403810 cases 5,6",	1);
	create_insn	(0X4038E0);
	create_insn	(x=0X4038EE);
	op_hex		(x,	1);
	set_cmt	(0X4038FC,	"jumptable 00403810 default case",	1);
	create_insn	(0X4038FC);
	set_name	(0X4038FC,	"def_403810");
	create_insn	(0X4038FE);
	create_insn	(0X403902);
	create_insn	(0X40390A);
	create_insn	(0X403912);
	create_insn	(0X403926);
	create_insn	(0X40392A);
	create_insn	(0X403942);
	create_insn	(0X403946);
	make_array	(0X40394E,	0X2);
	create_insn	(0X403950);
	create_insn	(x=0X403974);
	op_hex		(x,	1);
	create_insn	(x=0X403978);
	op_hex		(x,	1);
	make_array	(0X403986,	0X2);
	create_dword	(0X403988);
	create_dword	(0X40398C);
	create_insn	(0X403990);
	make_array	(0X4039B2,	0X2);
	create_dword	(0X4039B4);
	create_insn	(0X4039B8);
	create_insn	(0X4039C2);
	create_insn	(0X4039DA);
	make_array	(0X4039F2,	0X2);
	create_dword	(0X4039F4);
	create_insn	(0X4039F8);
	set_name	(0X4039F8,	"PMC_EnablePeripheral");
	create_insn	(0X403A02);
	create_insn	(0X403A1A);
	make_array	(0X403A32,	0X2);
	create_dword	(x=0X403A34);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X403A38);
	set_name	(0X403A38,	"PMC_IsPeriphEnabled");
	create_insn	(0X403A42);
	create_insn	(0X403A4E);
	make_array	(0X403A5E,	0X2);
	create_dword	(x=0X403A60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X403A64);
	create_insn	(0X403A6A);
	create_insn	(0X403A70);
	make_array	(0X403A76,	0X2);
	create_insn	(x=0X403A78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X403A7A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X403A7E);
	op_hex		(x,	1);
	create_insn	(x=0X403A9A);
	op_hex		(x,	1);
	create_insn	(x=0X403AA4);
	op_hex		(x,	1);
	create_insn	(x=0X403AB8);
	op_hex		(x,	1);
	create_insn	(0X403AC4);
	make_array	(0X403AC6,	0X2);
	create_dword	(x=0X403AC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X403ACC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X403AD0);
	create_dword	(0X403AD4);
	create_dword	(0X403AD8);
	create_dword	(0X403ADC);
	create_insn	(0X403AE0);
	create_insn	(0X403AE6);
	create_insn	(0X403AEC);
	set_name	(0X403AEC,	"USBDDriver_SetConfiguration");
	set_cmt	(0X403B04,	"cfgnum",	0);
	create_insn	(x=0X403B1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X403B24);
	op_stkvar	(x,	1);
	create_insn	(0X403B28);
	set_cmt	(0X403B2E,	"pDescriptor",	0);
	set_cmt	(0X403B3C,	"bEndpoint",	0);
	set_cmt	(0X403B3E,	"pArgument",	0);
	create_insn	(x=0X403B3E);
	op_stkvar	(x,	1);
	set_cmt	(0X403B40,	"fCallback",	0);
	set_cmt	(0X403B42,	"dLength",	0);
	set_cmt	(0X403B44,	"pData",	0);
	make_array	(0X403B4E,	0X2);
	create_insn	(x=0X403B50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X403B58);
	op_hex		(x,	1);
	create_insn	(x=0X403B5C);
	op_plain_offset	(x,	1,	0X204024D0);
	op_plain_offset	(x,	129,	0X204024D0);
	create_dword	(x=0X403B68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X403B6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X403B78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X403B7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X403B84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X403BB0);
	op_hex		(x,	1);
	create_insn	(x=0X403BC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X403BE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X403BEC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X403BF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X403BF4);
	create_dword	(0X403BF8);
	create_dword	(0X403BFC);
	create_dword	(0X403C00);
	create_dword	(x=0X403C04);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X403C08);
	create_dword	(x=0X403C0C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X403C10);
	create_insn	(0X403C16);
	create_insn	(0X403C1C);
	create_insn	(0X403C22);
	create_insn	(0X403C28);
	create_insn	(0X403C2E);
	create_insn	(0X403C34);
	create_insn	(0X403C3A);
	create_insn	(0X403C40);
	create_insn	(0X403C46);
	create_insn	(0X403C4C);
	create_insn	(0X403C52);
	create_insn	(0X403C58);
	create_insn	(0X403C5E);
	create_insn	(0X403C64);
	create_insn	(0X403C6A);
	create_insn	(0X403CAE);
	create_insn	(0X403CC0);
	create_insn	(0X403CCE);
	make_array	(0X403CD2,	0X2);
	create_dword	(0X403CD4);
	create_insn	(0X403CD8);
	create_insn	(0X403CE6);
	make_array	(0X403CEA,	0X2);
	create_dword	(0X403CEC);
	create_insn	(0X403CF0);
	create_insn	(0X403CFC);
	create_insn	(0X403D00);
	create_insn	(0X403D0A);
	create_insn	(0X403D0E);
	create_insn	(0X403D18);
	create_insn	(0X403D1C);
	create_insn	(0X403D24);
	create_insn	(0X403D28);
	set_cmt	(0X403D2A,	"bEndpoint",	0);
	set_cmt	(0X403D2C,	"fCallback",	0);
	set_cmt	(0X403D2E,	"dLength",	0);
	set_cmt	(0X403D30,	"pData",	0);
	set_cmt	(0X403D32,	"pArgument",	0);
	create_insn	(x=0X403D32);
	op_stkvar	(x,	1);
	create_insn	(0X403D3A);
	create_insn	(0X403D40);
	create_insn	(0X403D46);
	create_insn	(0X403D4C);
	create_insn	(0X403D52);
	create_insn	(0X403D58);
	create_insn	(0X403D78);
	create_insn	(0X403D7C);
	create_insn	(0X403D80);
	create_insn	(0X403D84);
	create_insn	(0X403D88);
	create_insn	(x=0X403D8A);
	op_hex		(x,	1);
	create_insn	(0X403D90);
	create_insn	(0X403D96);
	create_insn	(0X403D9C);
	create_insn	(0X403DA2);
	create_insn	(0X403DA8);
	set_name	(0X403DA8,	"UDPHS_AddWr");
	create_insn	(x=0X403DB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X403DCC);
	create_insn	(0X403E02);
	create_insn	(0X403E06);
	create_insn	(0X403E3A);
	create_insn	(0X403E3E);
	create_insn	(0X403E4E);
	create_insn	(x=0X403E58);
	op_hex		(x,	1);
	make_array	(0X403E8E,	0X2);
	create_dword	(0X403E90);
	create_dword	(x=0X403E94);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X403E98);
	set_name	(0X403E98,	"UDPHS_DmaHandler");
	create_insn	(x=0X403E9E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X403EA2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X403ED4);
	op_hex		(x,	1);
	create_insn	(0X403F06);
	set_cmt	(0X403F08,	"dwCfg",	0);
	set_cmt	(0X403F0A,	"pXfr",	0);
	set_cmt	(0X403F0C,	"bEndpoint",	0);
	create_insn	(0X403F14);
	create_insn	(x=0X403F26);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X403F40);
	create_dword	(x=0X403F44);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X403F48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X403F4C,	0X403F6C);
	set_name	(0X403F4C,	"aEUdphs_dmahand");
	create_insn	(0X403F6C);
	set_name	(0X403F6C,	"UDPHS_DmaSingle");
	create_insn	(x=0X403F70);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X403FA6,	0X2);
	create_dword	(x=0X403FA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X403FAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X403FAC,	"UDPHS_EndOfTransfer");
	create_insn	(0X403FEC);
	create_insn	(0X40401A);
	make_array	(0X40401E,	0X2);
	create_dword	(x=0X404020);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X404024);
	set_name	(0X404024,	"UDPHS_EndpointHandler");
	create_insn	(x=0X40402A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40402C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X404052);
	op_stkvar	(x,	1);
	create_insn	(x=0X404054);
	op_stkvar	(x,	1);
	create_insn	(x=0X40405A);
	op_stkvar	(x,	1);
	create_insn	(x=0X40406C);
	op_hex		(x,	1);
	create_insn	(0X404088);
	create_insn	(0X4040C4);
	create_insn	(0X4040CE);
	create_insn	(0X4040FE);
	create_insn	(x=0X404116);
	op_stkvar	(x,	1);
	create_insn	(0X404148);
	create_insn	(0X404174);
	create_insn	(0X404188);
	create_insn	(0X404192);
	create_insn	(x=0X40419E);
	op_stkvar	(x,	1);
	create_insn	(x=0X4041BC);
	op_stkvar	(x,	1);
	create_insn	(0X4041C0);
	create_insn	(x=0X4041F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X404240);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X404276);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X404286);
	create_insn	(x=0X404296);
	op_stkvar	(x,	1);
	create_insn	(x=0X4042BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X4042C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X4042DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4042E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X4042E4);
	create_dword	(0X4042E8);
	create_strlit	(0X4042EC,	0X4042FC);
	set_name	(0X4042EC,	"aWStallD");
	create_strlit	(0X4042FC,	0X40430B);
	set_name	(0X4042FC,	"aWIsoeD");
	create_byte	(0X40430B);
	create_strlit	(0X40430C,	0X40431C);
	set_name	(0X40430C,	"aWIsofeD");
	create_insn	(0X40431C);
	create_insn	(0X404336);
	create_insn	(0X404356);
	make_array	(0X40436E,	0X2);
	create_insn	(0X404370);
	create_insn	(x=0X404374);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40438E);
	op_stkvar	(x,	1);
	create_insn	(x=0X4043B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X4043CA);
	op_hex		(x,	1);
	create_insn	(0X4043D0);
	create_insn	(x=0X404408);
	op_stkvar	(x,	1);
	make_array	(0X40440E,	0X2);
	create_dword	(x=0X404410);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X404414);
	create_insn	(0X404418);
	create_insn	(0X40441E);
	create_insn	(0X404424);
	create_insn	(0X40442A);
	set_name	(0X40442A,	"USART_Configure");
	set_cmt	(0X40443C,	"OverSamp",	0);
	set_cmt	(0X40443E,	"pUsart",	0);
	create_insn	(0X40444A);
	create_insn	(0X40444E);
	create_insn	(0X404452);
	create_insn	(0X404456);
	make_array	(0X40445A,	0X2);
	create_insn	(0X40445C);
	set_name	(0X40445C,	"USART_SetBaudrate");
	create_insn	(x=0X4044BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4044D4);
	op_hex		(x,	1);
	create_insn	(0X4044DC);
	create_insn	(0X4044EC);
	make_array	(0X404512,	0X2);
	create_strlit	(0X404514,	0X404534);
	set_name	(0X404514,	"aECanontSetThis");
	create_insn	(0X404534);
	create_insn	(0X40453A);
	create_insn	(0X404540);
	create_insn	(0X404546);
	create_insn	(0X40454C);
	set_name	(0X40454C,	"USBConfigurationDescriptor_GetTotalLength");
	create_insn	(0X404550);
	set_name	(0X404550,	"USBConfigurationDescriptor_IsSelfPowered");
	create_insn	(0X40455A);
	create_insn	(0X40455E);
	set_name	(0X40455E,	"USBConfigurationDescriptor_Parse");
	create_insn	(0X404566);
	create_insn	(0X404592);
	create_insn	(0X40459A);
	create_insn	(0X4045A2);
	set_name	(0X4045A2,	"USBDCallbacks_Initialized");
	create_insn	(x=0X4045A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4045A6);
	op_plain_offset	(x,	1,	0X2040248C);
	op_plain_offset	(x,	129,	0X2040248C);
	create_insn	(x=0X4045AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4045C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X4045CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4045D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X4045D4,	0X4045E6);
	set_name	(0X4045D4,	"aD_03dNullReq");
	make_array	(0X4045E6,	0X2);
	create_insn	(0X4045E8);
	set_name	(0X4045E8,	"USBDCallbacks_Reset");
	make_array	(0X4045EA,	0X2);
	create_insn	(x=0X4045EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X4045EC,	"USBDCallbacks_Resumed");
	create_insn	(x=0X404608);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40460E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X404612);
	op_plain_offset	(x,	1,	0X2040248C);
	op_plain_offset	(x,	129,	0X2040248C);
	create_insn	(x=0X404614);
	op_plain_offset	(x,	1,	0X2040248C);
	op_plain_offset	(x,	129,	0X2040248C);
	create_insn	(0X404620);
	make_array	(0X404622,	0X2);
	create_dword	(x=0X404624);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X404628,	0X40463F);
	set_name	(0X404628,	"aD_03dUsbConnec");
	create_byte	(0X40463F);
	create_dword	(x=0X404640);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X404644);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X404644,	"USBDCallbacks_Suspended");
	create_insn	(x=0X404660);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X404666);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40466A);
	op_plain_offset	(x,	1,	0X2040248C);
	op_plain_offset	(x,	129,	0X2040248C);
	create_insn	(x=0X40466C);
	op_plain_offset	(x,	1,	0X2040248C);
	op_plain_offset	(x,	129,	0X2040248C);
	create_insn	(0X404678);
	make_array	(0X40467A,	0X2);
	create_dword	(x=0X40467C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X404680,	0X40469A);
	set_name	(0X404680,	"aD_03dUsbDiscon");
	make_array	(0X40469A,	0X2);
	create_dword	(x=0X40469C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4046A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X4046A0,	"USBDDriverCallbacks_ConfigurationChanged");
	create_insn	(x=0X4046A2);
	op_plain_offset	(x,	1,	0X2040248C);
	op_plain_offset	(x,	129,	0X2040248C);
	create_insn	(x=0X4046A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4046C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X4046C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4046CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X4046D0,	0X4046E2);
	set_name	(0X4046D0,	"aD_03dNullCfg");
	make_array	(0X4046E2,	0X2);
	create_insn	(0X4046E4);
	set_name	(0X4046E4,	"USBDDriverCallbacks_InterfaceSettingChanged");
	create_insn	(0X4046E6);
	set_name	(0X4046E6,	"USBDDriver_GetCfgDescriptors");
	create_insn	(0X4046FA);
	set_name	(0X4046FA,	"USBDDriver_Initialize");
	make_array	(0X404706,	0X2);
	create_insn	(0X404708);
	set_name	(0X404708,	"USBDDriver_RequestHandler");
	set_cmt	(0X40471A,	"switch 12 cases ",	0);
	set_cmt	(0X40471E,	"switch jump",	0);
	set_cmt	(0X404722,	"jump table for switch statement",	0);
	create_byte	(0X404722);
	set_name	(0X404722,	"jpt_40471E");
	create_byte	(0X404723);
	create_byte	(0X404724);
	create_byte	(0X404725);
	create_byte	(0X404726);
	create_byte	(0X404727);
	create_byte	(0X404728);
	create_byte	(0X404729);
	create_byte	(0X40472A);
	create_byte	(0X40472B);
	create_byte	(0X40472C);
	create_byte	(0X40472D);
	set_cmt	(0X40472E,	"jumptable 0040471E case 6",	1);
	create_insn	(0X40472E);
	set_cmt	(0X404756,	"jumptable 0040471E case 5",	1);
	create_insn	(0X404756);
	create_insn	(x=0X40475E);
	op_stkvar	(x,	1);
	set_cmt	(0X404762,	"jumptable 0040471E case 9",	1);
	create_insn	(0X404762);
	set_cmt	(0X404774,	"jumptable 0040471E case 8",	1);
	create_insn	(0X404774);
	create_insn	(x=0X40477C);
	op_stkvar	(x,	1);
	create_insn	(0X404780);
	create_insn	(x=0X404782);
	op_stkvar	(x,	1);
	set_cmt	(0X404784,	"fCallback",	0);
	set_cmt	(0X404786,	"dLength",	0);
	set_cmt	(0X404788,	"pArgument",	0);
	create_insn	(x=0X404788);
	op_stkvar	(x,	1);
	set_cmt	(0X40478A,	"pData",	0);
	create_insn	(x=0X40478A);
	op_stkvar	(x,	1);
	set_cmt	(0X40478C,	"bEndpoint",	0);
	set_cmt	(0X404796,	"jumptable 0040471E case 0",	1);
	create_insn	(0X404796);
	create_insn	(x=0X4047AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X4047AE);
	create_insn	(0X4047B8);
	create_insn	(x=0X4047BC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4047BE,	"inline USBD_IsHalted",	1);
	create_insn	(x=0X4047C0);
	op_plain_offset	(x,	1,	0X20402468);
	op_plain_offset	(x,	129,	0X20402468);
	create_insn	(x=0X4047D2);
	op_plain_offset	(x,	1,	0X20402468);
	op_plain_offset	(x,	129,	0X20402468);
	create_insn	(x=0X4047D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4047DA);
	op_stkvar	(x,	1);
	set_cmt	(0X4047E0,	"jumptable 0040471E case 1",	1);
	create_insn	(0X4047E0);
	create_insn	(0X4047EE);
	create_insn	(0X4047FA);
	set_cmt	(0X4047FE,	"jumptable 0040471E default case",	1);
	create_insn	(0X4047FE);
	set_name	(0X4047FE,	"def_40471E");
	create_insn	(0X404800);
	set_cmt	(0X404806,	"jumptable 0040471E case 3",	1);
	create_insn	(0X404806);
	create_insn	(x=0X40481E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X404822);
	create_insn	(0X404826);
	create_insn	(0X404832);
	create_insn	(0X404868);
	create_insn	(0X404876);
	create_insn	(0X404884);
	set_cmt	(0X404892,	"jumptable 0040471E case 11",	1);
	create_insn	(0X404892);
	create_insn	(0X4048B8);
	create_insn	(x=0X4048BA);
	op_stkvar	(x,	1);
	set_cmt	(0X4048C2,	"jumptable 0040471E case 10",	1);
	create_insn	(0X4048C2);
	create_insn	(x=0X4048D0);
	op_stkvar	(x,	1);
	create_insn	(0X4048D8);
	set_cmt	(0X4048DC,	"bEndpoint",	0);
	set_cmt	(0X4048E2,	"jumptable 0040471E cases 2,4,7",	1);
	create_insn	(0X4048E2);
	create_insn	(x=0X4048EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X4048EE,	0X2);
	create_dword	(0X4048F0);
	create_strlit	(0X4048F4,	0X40492C);
	set_name	(0X4048F4,	"aWUsbddriver_re");
	create_dword	(x=0X40492C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X404930,	0X40496F);
	set_name	(0X404930,	"aWUsbddriver__0");
	create_byte	(0X40496F);
	create_strlit	(0X404970,	0X4049AB);
	set_name	(0X404970,	"aWUsbddriver__1");
	create_byte	(0X4049AB);
	create_insn	(0X4049AC);
	set_name	(0X4049AC,	"USBD_ConfigureEndpoint");
	create_insn	(0X4049B0);
	set_name	(0X4049B0,	"USBD_Connect");
	create_insn	(0X4049B4);
	set_name	(0X4049B4,	"USBD_Disconnect");
	create_insn	(x=0X4049BA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4049BE);
	op_plain_offset	(x,	1,	0X20402464);
	op_plain_offset	(x,	129,	0X20402464);
	create_insn	(x=0X4049C4);
	op_plain_offset	(x,	1,	0X20402464);
	op_plain_offset	(x,	129,	0X20402464);
	create_insn	(x=0X4049C6);
	op_plain_offset	(x,	1,	0X20402464);
	op_plain_offset	(x,	129,	0X20402464);
	create_insn	(x=0X4049CC);
	op_plain_offset	(x,	1,	0X20402464);
	op_plain_offset	(x,	129,	0X20402464);
	create_dword	(x=0X4049D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4049D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X4049D4,	"USBD_GetDriver");
	create_dword	(x=0X4049D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4049DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X4049DC,	"USBD_GetState");
	create_insn	(x=0X4049DE);
	op_plain_offset	(x,	1,	0X20402464);
	op_plain_offset	(x,	129,	0X20402464);
	make_array	(0X4049E2,	0X2);
	create_dword	(x=0X4049E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4049E8);
	set_name	(0X4049E8,	"USBD_HAL_Activate");
	create_insn	(x=0X4049EE);
	op_hex		(x,	1);
	create_dword	(x=0X4049F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4049FC);
	set_name	(0X4049FC,	"USBD_HAL_ConfigureEP");
	create_insn	(x=0X404A02);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X404A10);
	op_hex		(x,	1);
	create_insn	(x=0X404A1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X404A20);
	op_stkvar	(x,	1);
	create_insn	(0X404A62);
	create_insn	(0X404A66);
	create_insn	(0X404A70);
	create_insn	(x=0X404A7A);
	op_plain_offset	(x,	1,	0X20405770);
	op_plain_offset	(x,	129,	0X20405770);
	create_insn	(x=0X404A7C);
	op_plain_offset	(x,	1,	0X20405770);
	op_plain_offset	(x,	129,	0X20405770);
	create_insn	(0X404A80);
	create_insn	(0X404A84);
	create_insn	(x=0X404A88);
	op_stkvar	(x,	1);
	create_insn	(0X404AC2);
	create_insn	(0X404AC6);
	create_insn	(0X404ACA);
	create_insn	(0X404AE6);
	create_insn	(0X404AF0);
	create_insn	(0X404AFA);
	create_insn	(0X404B04);
	create_insn	(0X404B10);
	create_insn	(0X404B1C);
	create_insn	(x=0X404B3A);
	op_hex		(x,	1);
	create_insn	(x=0X404B86);
	op_hex		(x,	1);
	create_insn	(x=0X404B96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X404B9E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X404BA6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X404BAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X404BB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X404BC2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X404BCA);
	create_insn	(0X404BDE);
	create_insn	(0X404BF6);
	create_dword	(x=0X404C18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X404C1C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X404C20,	0X404C39);
	set_name	(0X404C20,	"aEPbBendpoint0x");
	create_byte	(0X404C39);
	make_array	(0X404C39,	0X3);
	create_strlit	(0X404C3C,	0X404C54);
	set_name	(0X404C3C,	"aEPbBsizeept0xX");
	create_strlit	(0X404C54,	0X404C70);
	set_name	(0X404C54,	"aEPbBendpointdi");
	create_strlit	(0X404C70,	0X404C85);
	set_name	(0X404C70,	"aEPbBtype0xX");
	create_byte	(0X404C85);
	make_array	(0X404C85,	0X3);
	create_strlit	(0X404C88,	0X404CA7);
	set_name	(0X404C88,	"aEPbPendpointBa");
	create_byte	(0X404CA7);
	create_strlit	(0X404CA8,	0X404CC4);
	set_name	(0X404CA8,	"aEPbUdphs_eptcf");
	create_insn	(0X404CC4);
	set_name	(0X404CC4,	"USBD_HAL_Connect");
	create_insn	(x=0X404CCC);
	op_hex		(x,	1);
	set_cmt	(0X404CD4,	"Enable",	0);
	set_cmt	(0X404CD6,	"pUsbhs",	0);
	set_cmt	(0X404CDC,	"pDescriptor",	0);
	create_insn	(x=0X404CE4);
	op_hex		(x,	1);
	create_insn	(x=0X404CEC);
	op_hex		(x,	1);
	create_dword	(x=0X404CF4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X404CF4,	"pUsbhs");
	set_cmt	(0X404CF8,	"pUsbhs",	0);
	create_insn	(0X404CF8);
	set_name	(0X404CF8,	"USBD_HAL_Disconnect");
	set_cmt	(0X404CFE,	"inlined USBHS_FreezeClock()",	1);
	create_insn	(x=0X404CFE);
	op_hex		(x,	1);
	set_cmt	(0X404D06,	"Enable",	0);
	create_dword	(x=0X404D0C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X404D10);
	set_name	(0X404D10,	"USBD_HAL_Halt");
	create_insn	(x=0X404D16);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X404D18);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X404D2A);
	op_hex		(x,	1);
	create_insn	(0X404D34);
	create_insn	(0X404D5E);
	create_insn	(x=0X404D66);
	op_hex		(x,	1);
	create_insn	(0X404D9A);
	create_insn	(0X404D9C);
	create_insn	(0X404DBE);
	create_insn	(0X404DC8);
	create_insn	(x=0X404DDA);
	op_hex		(x,	1);
	create_dword	(x=0X404E04);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X404E08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X404E0C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X404E0C,	"USBD_HAL_Init");
	create_insn	(x=0X404E10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X404E12,	"USBHS",	1);
	create_insn	(x=0X404E22);
	op_hex		(x,	1);
	create_insn	(x=0X404E36);
	op_hex		(x,	1);
	create_insn	(x=0X404E3E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X404E48);
	create_insn	(x=0X404E60);
	op_hex		(x,	1);
	create_dword	(x=0X404E78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X404E7C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X404E80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X404E84);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X404E88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X404E8C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X404E8C,	"USBD_HAL_IsHighSpeed");
	create_dword	(x=0X404E98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X404E9C);
	set_name	(0X404E9C,	"USBD_HAL_Read");
	create_insn	(x=0X404EA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X404EB8);
	set_cmt	(0X404EC0,	"pXfr",	0);
	create_insn	(0X404ECA);
	create_insn	(0X404EEC);
	set_cmt	(0X404EEE,	"dwCfg",	0);
	set_cmt	(0X404EF0,	"bEndpoint",	0);
	create_insn	(0X404EF8);
	make_array	(0X404F0E,	0X2);
	create_dword	(x=0X404F10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X404F14);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X404F18);
	set_name	(0X404F18,	"USBD_HAL_ResetEPs");
	create_insn	(x=0X404F20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X404F5E);
	make_array	(0X404F76,	0X2);
	create_dword	(x=0X404F78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X404F7C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X404F80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X404F86);
	op_hex		(x,	1);
	create_insn	(x=0X404F90);
	op_hex		(x,	1);
	create_insn	(0X404F96);
	create_insn	(x=0X404F98);
	op_hex		(x,	1);
	create_dword	(x=0X404FA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X404FA4);
	set_name	(0X404FA4,	"USBD_HAL_SetConfiguration");
	make_array	(0X404FA6,	0X2);
	create_insn	(x=0X404FA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X404FA8,	"USBD_HAL_SetTransferCallback");
	create_insn	(0X404FBE);
	make_array	(0X404FC6,	0X2);
	create_dword	(x=0X404FC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X404FCC);
	set_name	(0X404FCC,	"USBD_HAL_Stall");
	create_insn	(x=0X404FCE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X404FE0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X404FEA);
	make_array	(0X404FFA,	0X2);
	create_dword	(x=0X404FFC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X405000);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X405004,	0X405021);
	set_name	(0X405004,	"aWUdp_stallEpDL");
	create_byte	(0X405021);
	make_array	(0X405021,	0X3);
	create_insn	(x=0X405024);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X405024,	"USBD_HAL_Suspend");
	create_insn	(x=0X40502A);
	op_hex		(x,	1);
	create_dword	(x=0X405034);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X405038);
	set_name	(0X405038,	"USBD_HAL_Test");
	create_insn	(x=0X40503E);
	op_hex		(x,	1);
	create_insn	(x=0X405046);
	op_hex		(x,	1);
	create_insn	(x=0X40504E);
	op_hex		(x,	1);
	set_cmt	(0X405054,	"switch 7 cases ",	0);
	set_cmt	(0X405058,	"switch jump",	0);
	set_cmt	(0X40505C,	"jump table for switch statement",	0);
	create_byte	(0X40505C);
	set_name	(0X40505C,	"jpt_405058");
	create_byte	(0X40505D);
	create_byte	(0X40505E);
	create_byte	(0X40505F);
	create_byte	(0X405060);
	create_byte	(0X405061);
	create_byte	(0X405062);
	set_cmt	(0X405064,	"jumptable 00405058 case 4",	1);
	create_insn	(0X405064);
	create_insn	(x=0X40507E);
	op_hex		(x,	1);
	create_insn	(x=0X4050AA);
	op_hex		(x,	1);
	create_insn	(x=0X4050B4);
	op_hex		(x,	1);
	set_cmt	(0X4050BC,	"jumptable 00405058 default case",	1);
	set_cmt	(0X4050BE,	"jumptable 00405058 case 1",	1);
	create_insn	(0X4050BE);
	create_insn	(x=0X4050C0);
	op_hex		(x,	1);
	set_cmt	(0X4050C6,	"jumptable 00405058 case 2",	1);
	create_insn	(0X4050C6);
	create_insn	(x=0X4050C8);
	op_hex		(x,	1);
	set_cmt	(0X4050D0,	"jumptable 00405058 case 3",	1);
	create_insn	(0X4050D0);
	set_cmt	(0X4050DA,	"jumptable 00405058 case 6",	1);
	create_insn	(0X4050DA);
	create_insn	(x=0X4050DE);
	op_hex		(x,	1);
	create_dword	(x=0X4050E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X4050EC);
	create_dword	(x=0X4050F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4050F4);
	set_name	(0X4050F4,	"USBD_HAL_Write");
	create_insn	(x=0X4050F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X40510E,	"inlined UDPHS_Write",	1);
	create_insn	(0X40510E);
	set_cmt	(0X40511A,	"pXfr",	0);
	create_insn	(0X405128);
	create_insn	(0X40514E);
	set_cmt	(0X405150,	"dwCfg",	0);
	set_cmt	(0X405152,	"bEndpoint",	0);
	create_insn	(0X40515A);
	create_dword	(x=0X405170);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X405174);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X405178,	"ctl",	0);
	create_insn	(0X405178);
	set_name	(0X405178,	"USBD_Halt");
	make_array	(0X40517E,	0X2);
	create_insn	(0X405180);
	set_name	(0X405180,	"USBD_Init");
	create_insn	(x=0X405186);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40518A);
	op_plain_offset	(x,	1,	0X20402464);
	op_plain_offset	(x,	129,	0X20402464);
	create_insn	(x=0X40518E);
	op_plain_offset	(x,	1,	0X20402464);
	op_plain_offset	(x,	129,	0X20402464);
	create_dword	(x=0X405198);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40519C);
	set_name	(0X40519C,	"USBD_IsHighSpeed");
	create_insn	(0X4051A0);
	set_name	(0X4051A0,	"USBD_Read");
	set_cmt	(0X4051A8,	"fCallback",	0);
	set_cmt	(0X4051AA,	"pCbData",	0);
	create_insn	(x=0X4051AA);
	op_stkvar	(x,	1);
	set_cmt	(0X4051B0,	"dLength",	0);
	set_cmt	(0X4051B2,	"pData",	0);
	set_cmt	(0X4051B4,	"bEndpoint",	0);
	make_array	(0X4051BE,	0X2);
	create_insn	(0X4051C0);
	set_name	(0X4051C0,	"USBD_RequestHandler");
	create_insn	(x=0X4051C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X4051CA);
	create_strlit	(0X4051D0,	0X405200);
	set_name	(0X4051D0,	"aWEpDRequestNot");
	create_insn	(x=0X405200);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X405200,	"USBD_ResetHandler");
	create_insn	(x=0X405206);
	op_plain_offset	(x,	1,	0X20402464);
	op_plain_offset	(x,	129,	0X20402464);
	set_cmt	(0X40520C,	"bStatus",	0);
	set_cmt	(0X40520E,	"bKeepCfg",	0);
	set_cmt	(0X405210,	"bmEPs",	0);
	set_cmt	(0X405216,	"pDescriptor",	0);
	create_dword	(x=0X405224);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X405228);
	set_name	(0X405228,	"USBD_ResumeHandler");
	create_insn	(x=0X40522A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40522C);
	op_plain_offset	(x,	1,	0X20402464);
	op_plain_offset	(x,	129,	0X20402464);
	create_insn	(x=0X405236);
	op_plain_offset	(x,	1,	0X20402464);
	op_plain_offset	(x,	129,	0X20402464);
	create_insn	(x=0X405238);
	op_plain_offset	(x,	1,	0X20402464);
	op_plain_offset	(x,	129,	0X20402464);
	create_insn	(0X405246);
	create_dword	(x=0X405248);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40524C);
	create_insn	(x=0X405254);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40525A);
	op_plain_offset	(x,	1,	0X20402464);
	op_plain_offset	(x,	129,	0X20402464);
	create_insn	(0X40525E);
	make_array	(0X405262,	0X2);
	create_dword	(x=0X405264);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X405268);
	set_name	(0X405268,	"USBD_SetConfiguration");
	create_insn	(x=0X405270);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X405276);
	op_plain_offset	(x,	1,	0X20402464);
	op_plain_offset	(x,	129,	0X20402464);
	create_insn	(0X40527A);
	create_insn	(x=0X40527C);
	op_plain_offset	(x,	1,	0X20402464);
	op_plain_offset	(x,	129,	0X20402464);
	set_cmt	(0X40527E,	"bKeepCfg",	0);
	set_cmt	(0X405280,	"bStatus",	0);
	set_cmt	(0X405286,	"bmEPs",	0);
	create_dword	(x=0X40528C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X405290);
	set_name	(0X405290,	"USBD_Stall");
	create_insn	(x=0X405294);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X405294,	"USBD_SuspendHandler");
	create_insn	(x=0X405298);
	op_plain_offset	(x,	1,	0X20402464);
	op_plain_offset	(x,	129,	0X20402464);
	create_insn	(x=0X40529E);
	op_plain_offset	(x,	1,	0X20402464);
	op_plain_offset	(x,	129,	0X20402464);
	create_insn	(x=0X4052A2);
	op_plain_offset	(x,	1,	0X20402464);
	op_plain_offset	(x,	129,	0X20402464);
	create_insn	(0X4052B0);
	make_array	(0X4052B2,	0X2);
	create_dword	(x=0X4052B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4052B8);
	set_name	(0X4052B8,	"USBD_Test");
	set_cmt	(0X4052BC,	"ctl",	0);
	create_insn	(0X4052BC);
	set_name	(0X4052BC,	"USBD_Unhalt");
	create_insn	(0X4052C2);
	set_name	(0X4052C2,	"USBD_Write");
	set_cmt	(0X4052CA,	"fCallback",	0);
	set_cmt	(0X4052CC,	"pCbData",	0);
	create_insn	(x=0X4052CC);
	op_stkvar	(x,	1);
	set_cmt	(0X4052D2,	"dLength",	0);
	set_cmt	(0X4052D4,	"pData",	0);
	set_cmt	(0X4052D6,	"bEndpoint",	0);
	create_insn	(0X4052E0);
	set_name	(0X4052E0,	"USBEndpointDescriptor_GetDirection");
	create_insn	(0X4052EA);
	create_insn	(0X4052EE);
	set_name	(0X4052EE,	"USBEndpointDescriptor_GetMaxPacketSize");
	create_insn	(0X4052F2);
	set_name	(0X4052F2,	"USBEndpointDescriptor_GetNumber");
	create_insn	(x=0X4052F4);
	op_hex		(x,	1);
	create_insn	(x=0X4052FA);
	op_dec		(x,	1);
	set_name	(0X4052FA,	"USBEndpointDescriptor_GetType");
	create_insn	(x=0X4052FC);
	op_hex		(x,	1);
	create_insn	(0X405302);
	set_name	(0X405302,	"USBFeatureRequest_GetFeatureSelector");
	create_insn	(x=0X405306);
	op_dec		(x,	1);
	set_name	(0X405306,	"USBFeatureRequest_GetTestSelector");
	create_insn	(0X40530C);
	set_name	(0X40530C,	"USBGenericDescriptor_GetLength");
	create_insn	(0X405310);
	create_insn	(0X40533A);
	create_insn	(0X40533E);
	set_name	(0X40533E,	"USBGenericRequest_GetEndpointNumber");
	create_insn	(x=0X405340);
	op_hex		(x,	1);
	create_insn	(0X405346);
	set_name	(0X405346,	"USBGenericRequest_GetIndex");
	create_insn	(0X40534A);
	set_name	(0X40534A,	"USBGenericRequest_GetLength");
	create_insn	(0X40534E);
	set_name	(0X40534E,	"USBGenericRequest_GetRecipient");
	create_insn	(x=0X405350);
	op_hex		(x,	1);
	create_insn	(0X405356);
	set_name	(0X405356,	"USBGenericRequest_GetRequest");
	create_insn	(0X40535A);
	create_insn	(0X405362);
	set_name	(0X405362,	"USBGetDescriptorRequest_GetDescriptorIndex");
	create_insn	(0X405366);
	set_name	(0X405366,	"USBGetDescriptorRequest_GetDescriptorType");
	create_insn	(0X40536C);
	set_name	(0X40536C,	"USBHS_AckEpInterrupt");
	create_insn	(0X40537C);
	set_name	(0X40537C,	"USBHS_AutoSwitchBankEnable");
	create_insn	(x=0X405386);
	op_hex		(x,	1);
	create_insn	(x=0X40538C);
	op_hex		(x,	1);
	create_insn	(0X405396);
	set_name	(0X405396,	"USBHS_DetachUsb");
	create_insn	(x=0X40539C);
	op_hex		(x,	1);
	create_insn	(x=0X4053A2);
	op_hex		(x,	1);
	create_insn	(0X4053AA);
	set_name	(0X4053AA,	"USBHS_DisableEPIntType");
	create_insn	(0X4053BA);
	set_name	(0X4053BA,	"USBHS_EnableDMAIntEP");
	create_insn	(0X4053C4);
	create_insn	(0X4053D2);
	set_name	(0X4053D2,	"USBHS_EnableEP");
	create_insn	(0X4053DE);
	create_insn	(0X4053E4);
	set_name	(0X4053E4,	"USBHS_EnableEPIntType");
	create_insn	(0X4053F4);
	create_insn	(x=0X4053FA);
	op_hex		(x,	1);
	create_insn	(x=0X405400);
	op_hex		(x,	1);
	create_insn	(0X40540A);
	set_name	(0X40540A,	"USBHS_EnableIntEP");
	create_insn	(0X405418);
	set_name	(0X405418,	"USBHS_Handler");
	create_insn	(x=0X40542C);
	op_enum		(x,	1,	GetEnum("USBHS_DEVISR"),0);
	create_insn	(0X405432);
	create_insn	(x=0X405438);
	op_enum		(x,	1,	GetEnum("USBHS_DEVISR"),0);
	create_insn	(0X40543E);
	create_insn	(x=0X405442);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40544C);
	op_hex		(x,	1);
	create_insn	(x=0X405456);
	op_dec		(x,	1);
	create_insn	(x=0X40545E);
	op_hex		(x,	1);
	create_insn	(x=0X405468);
	op_hex		(x,	1);
	create_insn	(x=0X405472);
	op_hex		(x,	1);
	create_insn	(x=0X40547E);
	op_hex		(x,	1);
	create_insn	(x=0X40548C);
	op_hex		(x,	1);
	create_insn	(x=0X405496);
	op_hex		(x,	1);
	create_insn	(x=0X40549E);
	op_hex		(x,	1);
	create_insn	(x=0X4054A6);
	op_hex		(x,	1);
	create_insn	(x=0X4054AE);
	op_hex		(x,	1);
	create_insn	(0X4054B6);
	create_insn	(x=0X4054BC);
	op_hex		(x,	1);
	create_insn	(x=0X4054C4);
	op_hex		(x,	1);
	create_insn	(x=0X4054CC);
	op_hex		(x,	1);
	create_insn	(0X4054D8);
	create_insn	(x=0X4054DE);
	op_hex		(x,	1);
	create_insn	(0X4054E6);
	create_insn	(0X4054F2);
	create_insn	(0X40550A);
	create_insn	(0X40550C);
	set_cmt	(0X405514,	"bEndpoint",	0);
	create_insn	(0X405530);
	make_array	(0X405542,	0X2);
	create_dword	(x=0X405544);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X405548,	0X40554E);
	set_name	(0X405548,	"aSusp");
	make_array	(0X40554E,	0X2);
	create_insn	(0X405550);
	create_insn	(x=0X405558);
	op_hex		(x,	1);
	create_insn	(0X405562);
	create_insn	(0X405566);
	set_name	(0X405566,	"USBHS_UsbEnable");
	create_insn	(x=0X40556E);
	op_hex		(x,	1);
	create_insn	(x=0X405574);
	op_hex		(x,	1);
	create_insn	(0X40557E);
	set_name	(0X40557E,	"USBInterfaceRequest_GetAlternateSetting");
	create_insn	(0X405582);
	set_name	(0X405582,	"USBInterfaceRequest_GetInterface");
	create_insn	(0X405586);
	set_name	(0X405586,	"USBSetAddressRequest_GetAddress");
	create_insn	(x=0X405588);
	op_hex		(x,	1);
	create_insn	(0X40558E);
	set_name	(0X40558E,	"USBSetConfigurationRequest_GetConfiguration");
	make_array	(0X405592,	0X2);
	create_insn	(0X405594);
	set_name	(0X405594,	"UsageFault_Handler");
	create_insn	(x=0X4055A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4055B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X4055C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X4055CC,	0X4055F3);
	set_name	(0X4055CC,	"aD_03dUsageFa_0");
	create_byte	(0X4055F3);
	create_insn	(0X4055F4);
	create_insn	(0X4055F8);
	set_name	(0X4055F8,	"XDMAC_DisableChannel");
	create_insn	(0X405604);
	create_insn	(0X40560C);
	set_name	(0X40560C,	"XDMAC_DisableChannelIt");
	create_insn	(0X405618);
	create_insn	(0X405620);
	set_name	(0X405620,	"XDMAC_DisableGIt");
	create_insn	(0X40562C);
	create_insn	(0X405630);
	create_insn	(0X40563C);
	create_insn	(0X405644);
	create_insn	(0X405650);
	create_insn	(0X405658);
	set_name	(0X405658,	"XDMAC_EnableGIt");
	create_insn	(0X405664);
	create_insn	(0X405668);
	create_insn	(0X405674);
	create_insn	(0X40567C);
	set_name	(0X40567C,	"XDMAC_GetChannelIsr");
	create_insn	(0X405688);
	create_insn	(0X405690);
	set_name	(0X405690,	"XDMAC_GetChannelItMask");
	create_insn	(0X40569C);
	create_insn	(0X4056A4);
	set_name	(0X4056A4,	"XDMAC_GetGIsr");
	create_insn	(0X4056AC);
	create_insn	(0X4056B0);
	set_name	(0X4056B0,	"XDMAC_GetGlobalChStatus");
	create_insn	(0X4056B8);
	create_insn	(0X4056BC);
	set_name	(0X4056BC,	"XDMAC_GetMaskChannelIsr");
	create_insn	(0X4056C8);
	create_insn	(0X4056D4);
	set_name	(0X4056D4,	"XDMAC_GetType");
	create_insn	(0X4056DC);
	set_cmt	(0X4056E0,	"pDmad",	0);
	create_insn	(x=0X4056E0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X4056E6,	0X2);
	create_dword	(x=0X4056E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4056E8,	"pDmad");
	create_insn	(0X4056EC);
	set_name	(0X4056EC,	"XDMAC_SetBlockControl");
	create_insn	(0X4056F8);
	create_insn	(0X405704);
	set_name	(0X405704,	"XDMAC_SetChannelConfig");
	create_insn	(0X405710);
	create_insn	(0X405718);
	set_name	(0X405718,	"XDMAC_SetDataStride_MemPattern");
	create_insn	(0X405724);
	create_insn	(0X40572C);
	set_name	(0X40572C,	"XDMAC_SetDescriptorAddr");
	create_insn	(0X40573C);
	create_insn	(x=0X405740);
	op_hex		(x,	1);
	create_insn	(0X40574A);
	set_name	(0X40574A,	"XDMAC_SetDescriptorControl");
	create_insn	(0X405756);
	create_insn	(0X40575E);
	set_name	(0X40575E,	"XDMAC_SetDestinationAddr");
	create_insn	(0X40576A);
	create_insn	(0X405772);
	set_name	(0X405772,	"XDMAC_SetDestinationMicroBlockStride");
	create_insn	(0X40577E);
	create_insn	(x=0X405782);
	op_hex		(x,	1);
	create_insn	(0X40578C);
	set_name	(0X40578C,	"XDMAC_SetMicroblockControl");
	create_insn	(0X405798);
	create_insn	(x=0X40579C);
	op_hex		(x,	1);
	create_insn	(0X4057A4);
	set_name	(0X4057A4,	"XDMAC_SetSourceAddr");
	create_insn	(0X4057B0);
	create_insn	(0X4057B8);
	set_name	(0X4057B8,	"XDMAC_SetSourceMicroBlockStride");
	create_insn	(0X4057C4);
	create_insn	(x=0X4057C8);
	op_hex		(x,	1);
	create_insn	(0X4057D2);
	create_insn	(0X4057DE);
	create_insn	(0X4057E6);
	set_name	(0X4057E6,	"XDMAD_AllocateChannel");
	create_insn	(x=0X4057F2);
	op_stkvar	(x,	1);
	set_cmt	(0X4057F4,	"Lock_Variable",	0);
	set_cmt	(0X405802,	"bDstID",	0);
	set_cmt	(0X405804,	"bSrcID",	0);
	set_cmt	(0X405806,	"pXdmad",	0);
	set_cmt	(0X40580E,	"Lock_Variable",	0);
	create_insn	(0X405818);
	set_name	(0X405818,	"XDMAD_AllocateXdmacChannel");
	create_insn	(0X405834);
	create_insn	(x=0X405846);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X405848);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X40584C);
	create_insn	(0X40585E);
	create_insn	(x=0X405870);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X405872);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X40587A);
	set_cmt	(0X405886,	"bTransfer",	0);
	set_cmt	(0X40588A,	"bPeriphID",	0);
	set_cmt	(0X405892,	"bTransfer",	0);
	set_cmt	(0X405896,	"bPeriphID",	0);
	set_cmt	(0X40589C,	"bTransfer",	0);
	set_cmt	(0X4058A0,	"bPeriphID",	0);
	set_cmt	(0X4058A6,	"bTransfer",	0);
	set_cmt	(0X4058AA,	"bPeriphID",	0);
	make_array	(0X4058B6,	0X2);
	create_dword	(x=0X4058B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X4058BC,	0X4058D7);
	set_name	(0X4058BC,	"aESAllocationFa");
	create_byte	(0X4058D7);
	create_strlit	(0X4058D8,	0X40590E);
	set_name	(0X4058D8,	"aESAllocation_0");
	make_array	(0X40590E,	0X2);
	create_insn	(0X405910);
	set_name	(0X405910,	"XDMAD_ConfigureTransfer");
	create_insn	(x=0X40594C);
	op_hex		(x,	1);
	create_insn	(0X405954);
	create_insn	(0X405958);
	create_insn	(0X40595E);
	create_insn	(0X405962);
	create_insn	(x=0X4059B2);
	op_hex		(x,	1);
	create_insn	(0X4059C2);
	create_insn	(0X405A2C);
	set_name	(0X405A2C,	"XDMAD_Handler");
	create_insn	(x=0X405A3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X405A46);
	op_stkvar	(x,	1);
	create_insn	(0X405A56);
	create_insn	(0X405A5A);
	create_insn	(x=0X405A7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X405A8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X405AB2);
	op_stkvar	(x,	1);
	create_insn	(0X405AC6);
	create_insn	(x=0X405AD6);
	op_plain_offset	(x,	1,	0X20402F14);
	op_plain_offset	(x,	129,	0X20402F14);
	make_array	(0X405AE2,	0X2);
	create_insn	(0X405AE4);
	create_insn	(x=0X405AEE);
	op_stkvar	(x,	1);
	set_cmt	(0X405AF2,	"Lock_Variable",	0);
	create_insn	(x=0X405B00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X405B06,	"Lock_Variable",	0);
	create_insn	(0X405B0E);
	create_insn	(0X405B12);
	create_insn	(x=0X405B24);
	op_hex		(x,	1);
	create_insn	(0X405B32);
	make_array	(0X405B5E,	0X2);
	create_dword	(x=0X405B60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X405B64);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X405B68);
	set_name	(0X405B68,	"XDMAD_PrepareChannel");
	create_insn	(0X405B9A);
	create_insn	(0X405B9E);
	create_insn	(0X405BA2);
	create_insn	(0X405BA6);
	set_cmt	(0X405BC6,	"channel",	0);
	set_cmt	(0X405BC8,	"pXdmac",	0);
	create_insn	(0X405C10);
	create_insn	(0X405C38);
	create_insn	(0X405C3C);
	create_insn	(0X405C40);
	create_insn	(0X405C44);
	set_name	(0X405C44,	"XDMAD_StartTransfer");
	create_insn	(0X405C58);
	create_insn	(0X405C5C);
	create_insn	(0X405C84);
	create_insn	(x=0X405C86);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X405C8E);
	create_insn	(x=0X405C90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X405C9A);
	make_array	(0X405CA6,	0X2);
	create_dword	(0X405CA8);
	create_strlit	(0X405CAC,	0X405CC9);
	set_name	(0X405CAC,	"aESXdmad_state_");
	create_byte	(0X405CC9);
	make_array	(0X405CC9,	0X3);
	create_strlit	(0X405CCC,	0X405CEA);
	set_name	(0X405CCC,	"aESXdmad_stat_0");
	make_array	(0X405CEA,	0X2);
	create_insn	(0X405CEC);
	set_name	(0X405CEC,	"XDMAD_StopTransfer");
	create_insn	(0X405CFE);
	create_insn	(0X405D02);
	set_cmt	(0X405D10,	"channel",	0);
	set_cmt	(0X405D12,	"pXdmac",	0);
	create_insn	(0X405D34);
	set_name	(0X405D34,	"XDMAIF_Get_ChannelNumber");
	create_insn	(x=0X405D3A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X405D46);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X405D4A);
	create_insn	(0X405D6A);
	make_array	(0X405D76,	0X2);
	create_dword	(x=0X405D78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X405D7C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X405D80);
	set_name	(0X405D80,	"XDMAIF_IsValidatedPeripherOnDma");
	create_insn	(x=0X405D92);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X405D98);
	create_insn	(0X405DAA);
	make_array	(0X405DB6,	0X2);
	create_dword	(0X405DB8);
	create_dword	(x=0X405DBC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X405DC0);
	create_insn	(x=0X405DCC);
	op_hex		(x,	1);
	create_insn	(0X405DD8);
	create_insn	(x=0X405DE8);
	op_enum		(x,	1,	GetEnum("PeripheralIds"),0);
	create_insn	(x=0X405E0A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X405E1E,	0X2);
	create_dword	(x=0X405E20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X405E24);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X405E28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X405E2C);
	create_insn	(0X405E3C);
	create_insn	(0X405E40);
	create_insn	(0X405E56);
	create_insn	(0X405E62);
	create_insn	(0X405E6A);
	create_insn	(x=0X405E80);
	op_hex		(x,	1);
	create_insn	(x=0X405E92);
	op_hex		(x,	1);
	create_insn	(0X405E9A);
	create_insn	(x=0X405EA0);
	op_hex		(x,	1);
	create_insn	(0X405EA8);
	create_insn	(0X405EBC);
	create_insn	(x=0X405EC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X405EC4);
	op_hex		(x,	1);
	make_array	(0X405EE2,	0X2);
	create_dword	(x=0X405EE4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X405EE8);
	create_insn	(x=0X405EEC);
	op_hex		(x,	1);
	make_array	(0X405EFE,	0X2);
	create_dword	(x=0X405F00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X405F04);
	set_name	(0X405F04,	"_SetLineCodingCallback");
	create_insn	(x=0X405F0E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X405F1A,	"bEndpoint",	0);
	create_insn	(x=0X405F20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X405F26);
	op_plain_offset	(x,	1,	0X2040246C);
	op_plain_offset	(x,	129,	0X2040246C);
	create_insn	(x=0X405F2A);
	op_plain_offset	(x,	1,	0X2040246C);
	op_plain_offset	(x,	129,	0X2040246C);
	create_insn	(x=0X405F2E);
	op_plain_offset	(x,	1,	0X2040246C);
	op_plain_offset	(x,	129,	0X2040246C);
	set_cmt	(0X405F32,	"bEndpoint",	0);
	set_cmt	(0X405F34,	"fCallback",	0);
	set_cmt	(0X405F36,	"dLength",	0);
	set_cmt	(0X405F38,	"pData",	0);
	set_cmt	(0X405F3A,	"pArgument",	0);
	create_insn	(x=0X405F3A);
	op_stkvar	(x,	1);
	make_array	(0X405F42,	0X2);
	create_dword	(x=0X405F44);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X405F48);
	create_insn	(x=0X405F4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X405F4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X405F5C);
	op_hex		(x,	1);
	create_insn	(x=0X405F6A);
	op_hex		(x,	1);
	create_insn	(0X405F78);
	create_insn	(x=0X405F86);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X405FA2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X405FB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X405FBC,	0X405FE9);
	set_name	(0X405FBC,	"aD_03dAt24Reque");
	create_byte	(0X405FE9);
	make_array	(0X405FE9,	0X3);
	create_insn	(0X405FEC);
	create_insn	(x=0X406004);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40600A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40600E);
	op_stkvar	(x,	1);
	create_insn	(x=0X406022);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X40602E);
	create_insn	(0X406032);
	create_insn	(x=0X406038);
	op_stkvar	(x,	1);
	create_insn	(x=0X40603E);
	op_stkvar	(x,	1);
	create_insn	(x=0X406042);
	op_stkvar	(x,	1);
	create_insn	(x=0X40604C);
	op_stkvar	(x,	1);
	create_insn	(x=0X406050);
	op_stkvar	(x,	1);
	create_insn	(x=0X406052);
	op_stkvar	(x,	1);
	create_insn	(x=0X406056);
	op_stkvar	(x,	1);
	create_insn	(x=0X40605C);
	op_stkvar	(x,	1);
	create_insn	(x=0X406062);
	op_stkvar	(x,	1);
	create_insn	(x=0X406066);
	op_stkvar	(x,	1);
	create_insn	(x=0X406068);
	op_stkvar	(x,	1);
	create_insn	(x=0X406070);
	op_stkvar	(x,	1);
	create_insn	(0X406080);
	create_dword	(x=0X40608C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X406090);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X406094,	0X4060B2);
	set_name	(0X406094,	"aD_03dBugSNeste");
	make_array	(0X4060B2,	0X2);
	create_insn	(0X4060B4);
	create_insn	(x=0X4060CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4060D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X4060DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4060EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X4060FA);
	create_insn	(0X4060FE);
	create_insn	(x=0X406102);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40610C);
	op_stkvar	(x,	1);
	create_insn	(x=0X40610E);
	op_stkvar	(x,	1);
	set_cmt	(0X406110,	"num",	0);
	create_insn	(x=0X406112);
	op_stkvar	(x,	1);
	create_insn	(x=0X406116);
	op_stkvar	(x,	1);
	create_insn	(x=0X40611A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40611C);
	op_stkvar	(x,	1);
	create_insn	(x=0X406120);
	op_stkvar	(x,	1);
	create_insn	(x=0X406124);
	op_stkvar	(x,	1);
	create_insn	(x=0X40612A);
	op_stkvar	(x,	1);
	set_cmt	(0X40612E,	"source",	0);
	create_insn	(x=0X406130);
	op_stkvar	(x,	1);
	set_cmt	(0X406132,	"destination",	0);
	create_insn	(x=0X40613C);
	op_stkvar	(x,	1);
	create_insn	(0X40615A);
	create_dword	(x=0X406164);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X406168);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X40616C,	0X40618A);
	set_name	(0X40616C,	"aD_03dBugSNes_0");
	make_array	(0X40618A,	0X2);
	create_dword	(x=0X40618C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X406190);
	create_insn	(0X4061D2);
	create_insn	(0X4061DC);
	create_insn	(x=0X4061E0);
	op_stkvar	(x,	1);
	create_insn	(0X406204);
	create_insn	(x=0X40620E);
	op_stkvar	(x,	1);
	create_insn	(x=0X406212);
	op_stkvar	(x,	1);
	create_insn	(x=0X40621C);
	op_stkvar	(x,	1);
	create_insn	(0X40622C);
	create_insn	(x=0X40623C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X406244);
	op_plain_offset	(x,	1,	0X20407790);
	op_plain_offset	(x,	129,	0X20407790);
	create_insn	(0X40624A);
	create_insn	(x=0X406262);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X406266);
	op_plain_offset	(x,	1,	0X204078B8);
	op_plain_offset	(x,	129,	0X204078B8);
	create_insn	(0X40626C);
	create_insn	(0X4062A6);
	make_array	(0X4062AA,	0X2);
	create_dword	(x=0X4062AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4062B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4062B4);
	create_insn	(x=0X4062DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4062E6);
	op_plain_offset	(x,	1,	0X20402524);
	op_plain_offset	(x,	129,	0X20402524);
	create_insn	(x=0X4062EE);
	op_plain_offset	(x,	1,	0X20402524);
	op_plain_offset	(x,	129,	0X20402524);
	create_insn	(x=0X4062F4);
	op_plain_offset	(x,	1,	0X20402524);
	op_plain_offset	(x,	129,	0X20402524);
	create_insn	(x=0X4062FA);
	op_plain_offset	(x,	1,	0X20402524);
	op_plain_offset	(x,	129,	0X20402524);
	make_array	(0X4062FE,	0X2);
	create_dword	(0X406300);
	create_dword	(x=0X406304);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X406308);
	create_insn	(0X406314);
	create_insn	(0X40635C);
	create_insn	(x=0X406362);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X406380);
	create_insn	(0X406384);
	make_array	(0X40638A,	0X2);
	create_dword	(x=0X40638C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X406390);
	create_insn	(x=0X406396);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X4063B8);
	create_insn	(0X4063BC);
	create_insn	(0X4063C0);
	create_dword	(x=0X4063C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4063C8);
	create_insn	(x=0X4063DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X406400);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X40640C);
	create_insn	(x=0X406440);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X406454);
	set_cmt	(0X406466,	"bDstID",	0);
	set_cmt	(0X406468,	"bSrcID",	0);
	set_cmt	(0X40646A,	"pXdmad",	0);
	set_cmt	(0X406484,	"dwChannel",	0);
	set_cmt	(0X406488,	"pXdmad",	0);
	set_cmt	(0X40649C,	"bSrcID",	0);
	set_cmt	(0X40649E,	"bDstID",	0);
	set_cmt	(0X4064A0,	"pXdmad",	0);
	set_cmt	(0X4064BA,	"dwChannel",	0);
	set_cmt	(0X4064BE,	"pXdmad",	0);
	create_insn	(0X4064D0);
	create_dword	(x=0X4064D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X4064D8,	0X406503);
	set_name	(0X4064D8,	"aD_03dUartDTx_d");
	create_byte	(0X406503);
	create_strlit	(0X406504,	0X40652F);
	set_name	(0X406504,	"aD_03dUartDRx_d");
	create_byte	(0X40652F);
	create_dword	(0X406530);
	create_dword	(0X406534);
	create_insn	(0X406538);
	create_insn	(x=0X40655E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X406562);
	create_insn	(x=0X40656C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X406572);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X4065F6);
	create_insn	(0X4065F8);
	create_insn	(x=0X406610);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X406614);
	create_insn	(x=0X40662E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X406632);
	create_insn	(x=0X40664C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X406656);
	create_insn	(x=0X40668E);
	op_hex		(x,	1);
	create_insn	(0X40669C);
	create_insn	(x=0X4066AA);
	op_hex		(x,	1);
	create_insn	(x=0X4066C2);
	op_hex		(x,	1);
	create_insn	(x=0X4066FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X406706,	0X2);
	create_dword	(x=0X406708);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40670C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X406710);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X406714);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X406718);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40671C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X406720,	0X40673D);
	set_name	(0X406720,	"aD_03dUartDOpsE");
	create_byte	(0X40673D);
	make_array	(0X40673D,	0X3);
	create_strlit	(0X406740,	0X406767);
	set_name	(0X406740,	"aD_03dUartDTxBu");
	create_byte	(0X406767);
	create_strlit	(0X406768,	0X40678F);
	set_name	(0X406768,	"aD_03dUartDRxBu");
	create_byte	(0X40678F);
	create_dword	(x=0X406790);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X406794,	0X4067B7);
	set_name	(0X406794,	"aD_03dUartDRegi");
	create_byte	(0X4067B7);
	create_insn	(0X4067B8);
	create_insn	(0X4067C6);
	make_array	(0X4067CA,	0X2);
	create_insn	(0X4067CC);
	create_insn	(x=0X4067D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X4067DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4067E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X406802);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X406818);
	op_stkvar	(x,	1);
	create_insn	(x=0X406820);
	op_stkvar	(x,	1);
	create_insn	(0X406840);
	create_insn	(0X406846);
	create_dword	(x=0X40684C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X406850,	0X406869);
	set_name	(0X406850,	"aD_03dUartDD_D");
	create_byte	(0X406869);
	make_array	(0X406869,	0X3);
	create_insn	(0X40686C);
	create_insn	(0X40688E);
	create_insn	(0X406898);
	create_insn	(0X40689E);
	create_insn	(0X4068A4);
	create_insn	(0X4068D4);
	create_insn	(x=0X4068E4);
	op_stkvar	(x,	1);
	create_insn	(0X4068F0);
	create_insn	(0X40691C);
	create_insn	(0X406924);
	make_array	(0X406942,	0X2);
	create_insn	(x=0X406944);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X406948);
	op_plain_offset	(x,	1,	0X20402E60);
	op_plain_offset	(x,	129,	0X20402E60);
	create_insn	(x=0X40694C);
	op_stkvar	(x,	1);
	create_insn	(x=0X406950);
	op_stkvar	(x,	1);
	make_array	(0X406956,	0X2);
	create_dword	(x=0X406958);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40695C);
	create_insn	(x=0X406960);
	op_stkvar	(x,	1);
	create_insn	(x=0X40696C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X406972);
	op_stkvar	(x,	1);
	create_insn	(x=0X406992);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4069AE);
	op_hex		(x,	1);
	create_insn	(0X4069C2);
	create_insn	(x=0X4069C8);
	op_hex		(x,	1);
	create_insn	(x=0X4069CE);
	op_hex		(x,	1);
	create_insn	(x=0X4069D2);
	op_stkvar	(x,	1);
	set_cmt	(0X4069D4,	"baudrate",	0);
	set_cmt	(0X4069D8,	"mode",	0);
	set_cmt	(0X4069DA,	"masterClock",	0);
	create_insn	(x=0X4069DA);
	op_stkvar	(x,	1);
	set_cmt	(0X4069DC,	"pUsart",	0);
	make_array	(0X4069FA,	0X2);
	create_dword	(x=0X4069FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X406A00,	0X406A19);
	set_name	(0X406A00,	"aD_03dUartDD__0");
	create_byte	(0X406A19);
	make_array	(0X406A19,	0X3);
	create_insn	(0X406A1C);
	create_insn	(0X406A3E);
	create_insn	(0X406A48);
	create_insn	(0X406A4E);
	create_insn	(0X406A54);
	create_insn	(0X406A84);
	create_insn	(x=0X406A94);
	op_stkvar	(x,	1);
	create_insn	(0X406AA0);
	create_insn	(0X406ACC);
	create_insn	(0X406AD4);
	create_insn	(0X406AEA);
	make_array	(0X406AEE,	0X2);
	create_insn	(x=0X406AF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X406AF6,	0X2);
	create_dword	(x=0X406AF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X406AFC);
	create_insn	(x=0X406B00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X406B02);
	op_plain_offset	(x,	1,	0X2040248C);
	op_plain_offset	(x,	129,	0X2040248C);
	make_array	(0X406B06,	0X2);
	create_dword	(x=0X406B08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X406B0C);
	set_name	(0X406B0C,	"print_sub_406B0C");
	create_insn	(0X406B16);
	create_insn	(0X406B1A);
	create_insn	(0X406B1C);
	set_name	(0X406B1C,	"nullsub_1");
	create_insn	(0X406B1E);
	create_insn	(0X406B36);
	make_array	(0X406B4E,	0X2);
	create_insn	(0X406B50);
	create_insn	(x=0X406B5A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X406B64);
	op_plain_offset	(x,	1,	0X20402E14);
	op_plain_offset	(x,	129,	0X20402E14);
	create_insn	(x=0X406B68);
	op_plain_offset	(x,	1,	0X20402E14);
	op_plain_offset	(x,	129,	0X20402E14);
	create_insn	(x=0X406B6A);
	op_plain_offset	(x,	1,	0X20402E14);
	op_plain_offset	(x,	129,	0X20402E14);
	create_insn	(x=0X406B6C);
	op_plain_offset	(x,	1,	0X20402E14);
	op_plain_offset	(x,	129,	0X20402E14);
	create_insn	(0X406B70);
	create_insn	(x=0X406B74);
	op_hex		(x,	1);
	set_cmt	(0X406B84,	"buf",	0);
	set_cmt	(0X406B88,	"a2",	0);
	create_insn	(x=0X406B8A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X406B8C,	"a5",	0);
	create_insn	(x=0X406B8C);
	op_stkvar	(x,	1);
	set_cmt	(0X406B8E,	"a1",	0);
	set_cmt	(0X406B90,	"a4",	0);
	create_insn	(x=0X406BA6);
	op_plain_offset	(x,	1,	0X20402E14);
	op_plain_offset	(x,	129,	0X20402E14);
	create_insn	(x=0X406BAC);
	op_plain_offset	(x,	1,	0X20402E14);
	op_plain_offset	(x,	129,	0X20402E14);
	create_insn	(x=0X406BB6);
	op_plain_offset	(x,	1,	0X20402E14);
	op_plain_offset	(x,	129,	0X20402E14);
	make_array	(0X406BBA,	0X2);
	create_dword	(x=0X406BBC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X406BC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X406BC0,	"a5");
	create_insn	(0X406BC4);
	create_insn	(x=0X406BE6);
	op_hex		(x,	1);
	create_insn	(x=0X406BEE);
	op_hex		(x,	1);
	create_insn	(x=0X406BF6);
	op_hex		(x,	1);
	create_insn	(0X406C02);
	create_insn	(x=0X406C06);
	op_hex		(x,	1);
	create_insn	(x=0X406C22);
	op_stkvar	(x,	1);
	create_insn	(0X406C2A);
	create_insn	(0X406C44);
	create_insn	(0X406C52);
	create_insn	(0X406C86);
	create_insn	(x=0X406CA2);
	op_hex		(x,	1);
	create_insn	(0X406CAE);
	create_insn	(x=0X406CB8);
	op_hex		(x,	1);
	create_insn	(0X406CC8);
	create_insn	(0X406CD2);
	create_insn	(x=0X406CDC);
	op_hex		(x,	1);
	create_insn	(x=0X406CF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X406CFC);
	op_stkvar	(x,	1);
	create_insn	(0X406D0A);
	create_insn	(0X406D0E);
	create_insn	(0X406D20);
	create_insn	(0X406D3C);
	create_insn	(0X406D3E);
	create_insn	(x=0X406D82);
	op_hex		(x,	1);
	create_insn	(x=0X406D92);
	op_stkvar	(x,	1);
	create_insn	(x=0X406D9E);
	op_hex		(x,	1);
	create_insn	(0X406DAA);
	create_insn	(0X406DAE);
	create_insn	(0X406DBA);
	create_insn	(x=0X406DE6);
	op_stkvar	(x,	1);
	create_insn	(0X406DFE);
	create_insn	(0X406E04);
	make_array	(0X406E0A,	0X2);
	create_insn	(0X406E0C);
	create_insn	(x=0X406E0E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X406E1A);
	make_array	(0X406E22,	0X2);
	create_dword	(x=0X406E24);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X406E28);
	set_cmt	(0X406E5E,	"source",	0);
	set_cmt	(0X406E60,	"num",	0);
	set_cmt	(0X406E62,	"destination",	0);
	create_insn	(0X406E76);
	create_insn	(0X406E7E);
	create_insn	(x=0X406E80);
	op_stkvar	(x,	1);
	set_cmt	(0X406E84,	"source",	0);
	set_cmt	(0X406E86,	"destination",	0);
	set_cmt	(0X406E88,	"num",	0);
	create_insn	(x=0X406E8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X406E94);
	op_stkvar	(x,	1);
	create_insn	(x=0X406E9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X406EA4);
	op_stkvar	(x,	1);
	set_cmt	(0X406EA8,	"source",	0);
	set_cmt	(0X406EAC,	"num",	0);
	set_cmt	(0X406EAE,	"destination",	0);
	create_insn	(0X406EC2);
	set_cmt	(0X406EC4,	"num",	0);
	create_insn	(0X406EC4);
	set_cmt	(0X406EC6,	"destination",	0);
	create_insn	(0X406ED4);
	create_insn	(0X406EDC);
	set_cmt	(0X406EEA,	"source",	0);
	set_cmt	(0X406EEC,	"num",	0);
	set_cmt	(0X406EEE,	"destination",	0);
	create_insn	(0X406F04);
	create_insn	(x=0X406F30);
	op_hex		(x,	1);
	create_insn	(0X406F3E);
	set_cmt	(0X406F48,	"num",	0);
	create_insn	(x=0X406F4A);
	op_stkvar	(x,	1);
	set_cmt	(0X406F4E,	"destination",	0);
	create_insn	(x=0X406F4E);
	op_stkvar	(x,	1);
	set_cmt	(0X406F52,	"source",	0);
	create_insn	(x=0X406F5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X406F5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X406F62);
	op_stkvar	(x,	1);
	create_insn	(x=0X406F6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X406F7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X406F82);
	op_stkvar	(x,	1);
	create_insn	(0X406F94);
	create_insn	(0X406FAE);
	create_insn	(0X406FC4);
	create_insn	(0X406FD6);
	create_insn	(x=0X406FEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X406FF4);
	op_stkvar	(x,	1);
	create_insn	(0X407002);
	create_insn	(0X407042);
	create_insn	(0X407046);
	create_insn	(x=0X407056);
	op_stkvar	(x,	1);
	create_insn	(x=0X40705C);
	op_stkvar	(x,	1);
	create_insn	(x=0X407062);
	op_stkvar	(x,	1);
	create_insn	(x=0X407068);
	op_stkvar	(x,	1);
	create_insn	(x=0X407070);
	op_stkvar	(x,	1);
	create_insn	(x=0X407076);
	op_stkvar	(x,	1);
	create_insn	(x=0X40707E);
	op_stkvar	(x,	1);
	create_insn	(x=0X407084);
	op_stkvar	(x,	1);
	create_insn	(0X40708A);
	create_insn	(0X40708C);
	create_insn	(x=0X407094);
	op_stkvar	(x,	1);
	create_insn	(x=0X40709E);
	op_stkvar	(x,	1);
	create_insn	(x=0X4070A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X4070B0);
	op_stkvar	(x,	1);
	create_insn	(0X4070B6);
	create_insn	(0X4070B8);
	create_insn	(0X4070BE);
	create_insn	(0X4070C2);
	create_insn	(x=0X4070C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X4070CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X4070DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X4070E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X4070E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X4070EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X4070F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X4070FE);
	op_stkvar	(x,	1);
	create_insn	(0X40711E);
	create_insn	(x=0X407120);
	op_stkvar	(x,	1);
	create_insn	(x=0X407136);
	op_stkvar	(x,	1);
	create_insn	(x=0X40713E);
	op_stkvar	(x,	1);
	create_insn	(x=0X407140);
	op_stkvar	(x,	1);
	create_insn	(x=0X407142);
	op_stkvar	(x,	1);
	create_insn	(x=0X407148);
	op_stkvar	(x,	1);
	create_insn	(x=0X40714C);
	op_stkvar	(x,	1);
	create_insn	(x=0X407150);
	op_stkvar	(x,	1);
	create_insn	(x=0X407154);
	op_stkvar	(x,	1);
	create_insn	(x=0X407156);
	op_stkvar	(x,	1);
	create_insn	(x=0X40715E);
	op_stkvar	(x,	1);
	create_insn	(x=0X407160);
	op_stkvar	(x,	1);
	create_insn	(x=0X407162);
	op_stkvar	(x,	1);
	create_insn	(x=0X407164);
	op_stkvar	(x,	1);
	create_insn	(x=0X407166);
	op_stkvar	(x,	1);
	create_insn	(x=0X40716A);
	op_stkvar	(x,	1);
	create_insn	(x=0X40716E);
	op_stkvar	(x,	1);
	create_insn	(x=0X407170);
	op_stkvar	(x,	1);
	create_insn	(x=0X407172);
	op_stkvar	(x,	1);
	create_insn	(x=0X407174);
	op_stkvar	(x,	1);
	create_insn	(x=0X407176);
	op_stkvar	(x,	1);
	create_insn	(x=0X407178);
	op_stkvar	(x,	1);
	create_insn	(x=0X40717A);
	op_stkvar	(x,	1);
	create_insn	(x=0X40717C);
	op_stkvar	(x,	1);
	create_insn	(x=0X40717E);
	op_stkvar	(x,	1);
	create_insn	(x=0X407184);
	op_stkvar	(x,	1);
	create_insn	(x=0X40718E);
	op_stkvar	(x,	1);
	create_insn	(x=0X407190);
	op_stkvar	(x,	1);
	create_insn	(x=0X407198);
	op_stkvar	(x,	1);
	create_insn	(x=0X40719C);
	op_stkvar	(x,	1);
	create_insn	(0X4071B2);
	create_insn	(0X4071B6);
	create_insn	(x=0X4071B8);
	op_stkvar	(x,	1);
	create_insn	(0X4071BE);
	create_insn	(0X4071C2);
	create_insn	(x=0X4071EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X4071F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X4071F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X4071F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X4071FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X4071FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X407202);
	op_stkvar	(x,	1);
	create_insn	(x=0X40720A);
	op_stkvar	(x,	1);
	create_insn	(x=0X40720E);
	op_stkvar	(x,	1);
	create_insn	(x=0X407214);
	op_stkvar	(x,	1);
	create_insn	(x=0X407218);
	op_stkvar	(x,	1);
	create_insn	(x=0X40721C);
	op_stkvar	(x,	1);
	create_insn	(x=0X407220);
	op_stkvar	(x,	1);
	create_insn	(x=0X407224);
	op_stkvar	(x,	1);
	create_insn	(x=0X40722C);
	op_stkvar	(x,	1);
	create_insn	(x=0X407230);
	op_stkvar	(x,	1);
	create_insn	(x=0X407236);
	op_stkvar	(x,	1);
	set_cmt	(0X40723E,	"num",	0);
	set_cmt	(0X407240,	"source",	0);
	set_cmt	(0X407242,	"destination",	0);
	create_insn	(0X40725E);
	create_insn	(0X407260);
	create_insn	(x=0X40726A);
	op_stkvar	(x,	1);
	create_insn	(x=0X40726E);
	op_stkvar	(x,	1);
	create_insn	(x=0X407272);
	op_stkvar	(x,	1);
	create_insn	(0X40727E);
	create_insn	(0X407286);
	create_insn	(0X4072A8);
	create_insn	(x=0X4072AE);
	op_stkvar	(x,	1);
	set_cmt	(0X4072BA,	"a11",	0);
	create_insn	(x=0X4072BA);
	op_stkvar	(x,	1);
	set_cmt	(0X4072C0,	"a3",	0);
	set_cmt	(0X4072C2,	"a10",	0);
	create_insn	(x=0X4072C2);
	op_stkvar	(x,	1);
	set_cmt	(0X4072C4,	"a4",	0);
	set_cmt	(0X4072C6,	"a2",	0);
	set_cmt	(0X4072C8,	"a7",	0);
	create_insn	(x=0X4072C8);
	op_stkvar	(x,	1);
	set_cmt	(0X4072CA,	"a8",	0);
	create_insn	(x=0X4072CA);
	op_stkvar	(x,	1);
	set_cmt	(0X4072CC,	"a9",	0);
	create_insn	(x=0X4072CC);
	op_stkvar	(x,	1);
	set_cmt	(0X4072CE,	"num",	0);
	create_insn	(x=0X4072CE);
	op_stkvar	(x,	1);
	set_cmt	(0X4072D0,	"a6",	0);
	create_insn	(x=0X4072D0);
	op_stkvar	(x,	1);
	set_cmt	(0X4072D2,	"a1",	0);
	create_insn	(x=0X4072DC);
	op_plain_offset	(x,	1,	0X20407C97);
	op_plain_offset	(x,	129,	0X20407C97);
	set_cmt	(0X4072E0,	"source",	0);
	set_cmt	(0X4072E2,	"num",	0);
	set_cmt	(0X4072E4,	"destination",	0);
	create_insn	(x=0X4072E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X4072EC);
	op_stkvar	(x,	1);
	create_insn	(0X4072F0);
	make_array	(0X407302,	0X2);
	create_dword	(x=0X407304);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X407308);
	create_insn	(x=0X407312);
	op_stkvar	(x,	1);
	create_insn	(x=0X407318);
	op_stkvar	(x,	1);
	create_insn	(x=0X40731E);
	op_stkvar	(x,	1);
	set_cmt	(0X407350,	"num",	0);
	set_cmt	(0X407352,	"source",	0);
	set_cmt	(0X407354,	"destination",	0);
	set_cmt	(0X40735E,	"num",	0);
	set_cmt	(0X407360,	"source",	0);
	set_cmt	(0X407362,	"destination",	0);
	set_cmt	(0X40736C,	"source",	0);
	create_insn	(x=0X40736C);
	op_stkvar	(x,	1);
	set_cmt	(0X40736E,	"num",	0);
	set_cmt	(0X407370,	"destination",	0);
	set_cmt	(0X40737E,	"source",	0);
	create_insn	(x=0X40737E);
	op_stkvar	(x,	1);
	set_cmt	(0X407380,	"num",	0);
	set_cmt	(0X407382,	"destination",	0);
	create_insn	(x=0X407388);
	op_stkvar	(x,	1);
	create_insn	(0X407398);
	set_name	(0X407398,	"aesInit");
	create_insn	(x=0X40739A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40739E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4073B4);
	op_plain_offset	(x,	1,	0X204024D0);
	op_plain_offset	(x,	129,	0X204024D0);
	create_insn	(x=0X4073BE);
	op_plain_offset	(x,	1,	0X204024D0);
	op_plain_offset	(x,	129,	0X204024D0);
	create_insn	(x=0X4073C4);
	op_plain_offset	(x,	1,	0X204024D0);
	op_plain_offset	(x,	129,	0X204024D0);
	create_insn	(x=0X4073C8);
	op_plain_offset	(x,	1,	0X204024D0);
	op_plain_offset	(x,	129,	0X204024D0);
	make_array	(0X4073D2,	0X2);
	create_dword	(x=0X4073D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4073D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4073DC);
	create_insn	(x=0X4073DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4073E2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4073F8);
	op_plain_offset	(x,	1,	0X204024D0);
	op_plain_offset	(x,	129,	0X204024D0);
	create_insn	(x=0X407400);
	op_plain_offset	(x,	1,	0X204024D0);
	op_plain_offset	(x,	129,	0X204024D0);
	create_insn	(x=0X407406);
	op_plain_offset	(x,	1,	0X204024D0);
	op_plain_offset	(x,	129,	0X204024D0);
	create_insn	(x=0X40740A);
	op_plain_offset	(x,	1,	0X204024D0);
	op_plain_offset	(x,	129,	0X204024D0);
	create_insn	(x=0X407420);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40742A);
	op_plain_offset	(x,	1,	0X204024D0);
	op_plain_offset	(x,	129,	0X204024D0);
	create_insn	(x=0X407434);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X407440);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X407444);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X407448);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40744C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X407450);
	create_insn	(x=0X407452);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X407468);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40746C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X407474);
	op_plain_offset	(x,	1,	0X204024D0);
	op_plain_offset	(x,	129,	0X204024D0);
	create_insn	(x=0X40747C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X407486);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40748A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X40749A,	0X2);
	create_dword	(x=0X40749C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4074A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4074A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4074A8);
	create_insn	(0X4074B6);
	create_insn	(0X4074C8);
	set_cmt	(0X4074CC,	"src1",	0);
	create_insn	(x=0X4074CE);
	op_plain_offset	(x,	1,	0X20407A24);
	op_plain_offset	(x,	129,	0X20407A24);
	set_cmt	(0X4074D6,	"out",	0);
	create_insn	(0X4074E0);
	create_insn	(x=0X4074F2);
	op_plain_offset	(x,	1,	0X20407A24);
	op_plain_offset	(x,	129,	0X20407A24);
	set_cmt	(0X407500,	"src2",	0);
	set_cmt	(0X407504,	"src1",	0);
	set_cmt	(0X407506,	"out",	0);
	create_insn	(0X407512);
	create_insn	(0X407518);
	create_insn	(0X407532);
	create_insn	(x=0X40753C);
	op_plain_offset	(x,	1,	0X20407A24);
	op_plain_offset	(x,	129,	0X20407A24);
	create_insn	(0X407546);
	create_insn	(0X40754A);
	create_insn	(0X40754E);
	set_cmt	(0X407550,	"source",	0);
	set_cmt	(0X407552,	"num",	0);
	set_cmt	(0X407554,	"destination",	0);
	create_insn	(x=0X40755C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X407562);
	op_hex		(x,	1);
	create_insn	(x=0X40756E);
	op_plain_offset	(x,	1,	0X20407A24);
	op_plain_offset	(x,	129,	0X20407A24);
	create_insn	(0X407574);
	create_insn	(0X4075AA);
	create_insn	(0X4075D2);
	create_insn	(x=0X4075E6);
	op_hex		(x,	1);
	make_array	(0X407622,	0X2);
	create_dword	(x=0X407624);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X407628,	"buflen",	0);
	create_insn	(0X407628);
	set_name	(0X407628,	"compute_decrypt_key_B");
	set_cmt	(0X40762A,	"buf",	0);
	set_cmt	(0X40762C,	"seed",	0);
	create_insn	(0X40763A);
	create_insn	(0X407654);
	create_insn	(0X407668);
	create_insn	(x=0X407672);
	op_stkvar	(x,	1);
	create_insn	(x=0X407676);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X407680);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X407684);
	create_insn	(x=0X40768E);
	op_stkvar	(x,	1);
	create_insn	(x=0X407692);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X40769C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4076A0);
	set_cmt	(0X4076B4,	"a14",	0);
	create_insn	(x=0X4076B4);
	op_stkvar	(x,	1);
	set_cmt	(0X4076BA,	"a11",	0);
	create_insn	(x=0X4076BA);
	op_stkvar	(x,	1);
	set_cmt	(0X4076BC,	"a2",	0);
	set_cmt	(0X4076BE,	"a12",	0);
	set_cmt	(0X4076C2,	"a10",	0);
	create_insn	(x=0X4076C2);
	op_stkvar	(x,	1);
	set_cmt	(0X4076C6,	"num",	0);
	set_cmt	(0X4076CA,	"a1",	0);
	set_cmt	(0X4076CC,	"a4",	0);
	set_cmt	(0X4076CE,	"a3",	0);
	set_cmt	(0X4076D0,	"a7",	0);
	create_insn	(x=0X4076D0);
	op_stkvar	(x,	1);
	set_cmt	(0X4076D2,	"a8",	0);
	create_insn	(x=0X4076D2);
	op_stkvar	(x,	1);
	set_cmt	(0X4076D4,	"a9",	0);
	create_insn	(x=0X4076D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X4076DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4076E0);
	op_plain_offset	(x,	1,	0X20402E14);
	op_plain_offset	(x,	129,	0X20402E14);
	create_insn	(x=0X4076E6);
	op_plain_offset	(x,	1,	0X20407C97);
	op_plain_offset	(x,	129,	0X20407C97);
	set_cmt	(0X4076EE,	"num",	0);
	set_cmt	(0X4076F0,	"source",	0);
	set_cmt	(0X4076F4,	"destination",	0);
	set_cmt	(0X4076FC,	"a1",	0);
	create_insn	(x=0X40770C);
	op_plain_offset	(x,	1,	0X20407BA8);
	op_plain_offset	(x,	129,	0X20407BA8);
	create_insn	(x=0X407718);
	op_plain_offset	(x,	1,	0X20402E14);
	op_plain_offset	(x,	129,	0X20402E14);
	set_cmt	(0X40771C,	"a2",	0);
	set_cmt	(0X40771E,	"a14",	0);
	create_insn	(x=0X40771E);
	op_stkvar	(x,	1);
	set_cmt	(0X407722,	"a1",	0);
	set_cmt	(0X407724,	"a11",	0);
	create_insn	(x=0X407724);
	op_stkvar	(x,	1);
	set_cmt	(0X407728,	"a12",	0);
	set_cmt	(0X40772C,	"a7",	0);
	create_insn	(x=0X40772C);
	op_stkvar	(x,	1);
	set_cmt	(0X40772E,	"a4",	0);
	set_cmt	(0X407730,	"a10",	0);
	create_insn	(x=0X407730);
	op_stkvar	(x,	1);
	set_cmt	(0X407732,	"a3",	0);
	create_insn	(x=0X407732);
	op_stkvar	(x,	1);
	set_cmt	(0X407734,	"a8",	0);
	create_insn	(x=0X407734);
	op_stkvar	(x,	1);
	set_cmt	(0X407736,	"a9",	0);
	create_insn	(x=0X407736);
	op_stkvar	(x,	1);
	set_cmt	(0X407738,	"num",	0);
	create_insn	(x=0X407738);
	op_stkvar	(x,	1);
	set_cmt	(0X40773A,	"a6",	0);
	create_insn	(x=0X40773A);
	op_stkvar	(x,	1);
	create_insn	(x=0X407742);
	op_plain_offset	(x,	1,	0X20402E14);
	op_plain_offset	(x,	129,	0X20402E14);
	create_insn	(x=0X407746);
	op_plain_offset	(x,	1,	0X20407C97);
	op_plain_offset	(x,	129,	0X20407C97);
	set_cmt	(0X40774E,	"num",	0);
	set_cmt	(0X407750,	"source",	0);
	set_cmt	(0X407754,	"destination",	0);
	set_cmt	(0X40775C,	"source",	0);
	set_cmt	(0X407760,	"num",	0);
	set_cmt	(0X407762,	"destination",	0);
	set_cmt	(0X40776A,	"a1",	0);
	create_insn	(x=0X407772);
	op_plain_offset	(x,	1,	0X20407BC8);
	op_plain_offset	(x,	129,	0X20407BC8);
	create_insn	(x=0X407778);
	op_stkvar	(x,	1);
	create_insn	(x=0X40777A);
	op_plain_offset	(x,	1,	0X20407BC8);
	op_plain_offset	(x,	129,	0X20407BC8);
	create_insn	(x=0X40777C);
	op_plain_offset	(x,	1,	0X20407BC8);
	op_plain_offset	(x,	129,	0X20407BC8);
	create_insn	(x=0X40777E);
	op_stkvar	(x,	1);
	create_insn	(x=0X407788);
	op_plain_offset	(x,	1,	0X20407BC8);
	op_plain_offset	(x,	129,	0X20407BC8);
	create_insn	(x=0X407796);
	op_plain_offset	(x,	1,	0X20402E14);
	op_plain_offset	(x,	129,	0X20402E14);
	create_insn	(0X40779C);
	create_dword	(x=0X4077B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4077B0,	"a14");
	create_dword	(x=0X4077B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4077B8);
	set_cmt	(0X4077C0,	"switch 13 cases ",	0);
	set_cmt	(0X4077C4,	"switch jump",	0);
	set_cmt	(0X4077C8,	"jump table for switch statement",	0);
	create_byte	(0X4077C8);
	set_name	(0X4077C8,	"jpt_4077C4");
	create_byte	(0X4077C9);
	create_byte	(0X4077CA);
	create_byte	(0X4077CB);
	create_byte	(0X4077CC);
	create_byte	(0X4077CD);
	create_byte	(0X4077CE);
	create_byte	(0X4077CF);
	create_byte	(0X4077D0);
	create_byte	(0X4077D1);
	create_byte	(0X4077D2);
	create_byte	(0X4077D3);
	create_byte	(0X4077D4);
	set_cmt	(0X4077D6,	"jumptable 004077C4 case 0",	1);
	create_insn	(0X4077D6);
	set_cmt	(0X4077E4,	"jumptable 004077C4 case 1",	1);
	create_insn	(0X4077E4);
	set_cmt	(0X4077EE,	"jumptable 004077C4 case 2",	1);
	create_insn	(0X4077EE);
	create_insn	(0X40780E);
	set_cmt	(0X407816,	"jumptable 004077C4 case 3",	1);
	create_insn	(0X407816);
	create_insn	(x=0X40781C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X407846);
	create_insn	(0X40784A);
	set_cmt	(0X407850,	"jumptable 004077C4 case 4",	1);
	create_insn	(0X407850);
	set_cmt	(0X40785A,	"jumptable 004077C4 case 5",	1);
	create_insn	(0X40785A);
	set_cmt	(0X407864,	"jumptable 004077C4 case 6",	1);
	create_insn	(0X407864);
	set_cmt	(0X40786E,	"jumptable 004077C4 case 7",	1);
	create_insn	(0X40786E);
	set_cmt	(0X407878,	"jumptable 004077C4 case 8",	1);
	create_insn	(0X407878);
	set_cmt	(0X407882,	"jumptable 004077C4 case 9",	1);
	create_insn	(0X407882);
	set_cmt	(0X40788C,	"jumptable 004077C4 case 10",	1);
	create_insn	(0X40788C);
	create_insn	(0X407896);
	set_cmt	(0X4078AC,	"jumptable 004077C4 cases 11,12",	1);
	create_insn	(0X4078AC);
	create_insn	(0X4078BC);
	set_cmt	(0X4078BE,	"jumptable 004077C4 default case",	1);
	create_insn	(0X4078BE);
	set_name	(0X4078BE,	"def_4077C4");
	make_array	(0X4078C6,	0X2);
	create_dword	(x=0X4078C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4078CC);
	create_insn	(x=0X4078DC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X4078E4);
	create_dword	(x=0X4078F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4078F8);
	create_insn	(0X407918);
	create_insn	(0X40791C);
	create_insn	(x=0X407942);
	op_stkvar	(x,	1);
	create_insn	(x=0X407946);
	op_stkvar	(x,	1);
	create_insn	(x=0X40794A);
	op_stkvar	(x,	1);
	create_insn	(x=0X407950);
	op_stkvar	(x,	1);
	create_insn	(x=0X407954);
	op_stkvar	(x,	1);
	create_insn	(x=0X40795C);
	op_stkvar	(x,	1);
	create_insn	(x=0X40796C);
	op_stkvar	(x,	1);
	create_insn	(x=0X407970);
	op_hex		(x,	1);
	create_insn	(x=0X407976);
	op_hex		(x,	1);
	create_insn	(x=0X40797A);
	op_stkvar	(x,	1);
	set_cmt	(0X407980,	"num",	0);
	create_insn	(x=0X407982);
	op_stkvar	(x,	1);
	set_cmt	(0X407986,	"source",	0);
	create_insn	(x=0X407988);
	op_stkvar	(x,	1);
	create_insn	(x=0X40798C);
	op_hex		(x,	1);
	create_insn	(x=0X407990);
	op_hex		(x,	1);
	create_insn	(x=0X407994);
	op_stkvar	(x,	1);
	set_cmt	(0X407998,	"destination",	0);
	create_insn	(x=0X407998);
	op_stkvar	(x,	1);
	create_insn	(x=0X4079A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X4079A6);
	op_hex		(x,	1);
	create_insn	(x=0X4079B8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4079C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X4079E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4079E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4079E8);
	set_name	(0X4079E8,	"compute_decrypt_key_C");
	set_cmt	(0X4079F2,	"buflen",	0);
	create_insn	(0X4079F2);
	set_cmt	(0X4079F4,	"buf",	0);
	set_cmt	(0X4079F6,	"seed",	0);
	create_insn	(0X407A02);
	create_insn	(0X407A1C);
	create_insn	(x=0X407A30);
	op_hex		(x,	1);
	create_insn	(x=0X407A44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X407A8A,	0X2);
	create_dword	(0X407A8C);
	create_dword	(0X407A90);
	create_dword	(0X407A94);
	create_dword	(x=0X407A98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X407A9C);
	create_dword	(0X407AA0);
	create_insn	(0X407AA4);
	create_insn	(x=0X407B14);
	op_stkvar	(x,	1);
	create_insn	(x=0X407B18);
	op_stkvar	(x,	1);
	create_insn	(x=0X407B1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X407B20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X407B22);
	op_stkvar	(x,	1);
	create_insn	(0X407B30);
	create_insn	(0X407B32);
	create_insn	(0X407B36);
	create_dword	(x=0X407B3C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X407B40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X407B44);
	create_insn	(0X407B48);
	create_insn	(0X407B6E);
	create_insn	(0X407BB4);
	create_insn	(0X407BD2);
	create_insn	(0X407BEE);
	create_insn	(0X407C08);
	create_insn	(0X407C0A);
	create_insn	(0X407C9C);
	create_insn	(0X407CA2);
	create_insn	(0X407CA8);
	create_insn	(x=0X407CAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X407CCC);
	create_insn	(0X407CDC);
	make_array	(0X407CE6,	0X2);
	create_dword	(x=0X407CE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X407CEC);
	create_insn	(0X407D04);
	create_insn	(0X407D2E);
	create_insn	(x=0X407D6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X407D76);
	create_insn	(0X407D80);
	create_dword	(x=0X407D88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X407D8C);
	create_insn	(x=0X407D8E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X407DA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X407DAC);
	create_insn	(x=0X407DAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X407DC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X407DCC);
	create_insn	(0X407DE8);
	create_insn	(0X407E06);
	create_insn	(x=0X407E0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X407E10);
	op_stkvar	(x,	1);
	create_insn	(0X407E16);
	set_cmt	(0X407E20,	"destination",	0);
	set_cmt	(0X407E22,	"source",	0);
	create_insn	(x=0X407E26);
	op_stkvar	(x,	1);
	create_insn	(x=0X407E38);
	op_stkvar	(x,	1);
	create_insn	(0X407E58);
	create_insn	(0X407E5C);
	create_insn	(x=0X407E6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X407E6E);
	make_array	(0X407E8E,	0X2);
	create_dword	(x=0X407E90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X407E94);
	create_insn	(0X407EB6);
	create_insn	(x=0X407EBE);
	op_hex		(x,	1);
	create_insn	(x=0X407EC6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X407EC8);
	op_plain_offset	(x,	1,	0X20402524);
	op_plain_offset	(x,	129,	0X20402524);
	create_insn	(0X407ED4);
	make_array	(0X407ED6,	0X2);
	create_dword	(x=0X407ED8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X407EDC);
	create_insn	(0X407EEA);
	make_array	(0X407EFE,	0X2);
	create_insn	(x=0X407F00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X407F08);
	op_stkvar	(x,	1);
	create_insn	(x=0X407F14);
	op_stkvar	(x,	1);
	create_insn	(x=0X407F1A);
	op_stkvar	(x,	1);
	make_array	(0X407F26,	0X2);
	create_dword	(0X407F28);
	create_insn	(0X407F2C);
	create_insn	(x=0X407F36);
	op_stkvar	(x,	1);
	create_insn	(x=0X407F3E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X407F58);
	op_stkvar	(x,	1);
	create_insn	(x=0X407F62);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X407F6A);
	op_stkvar	(x,	1);
	create_insn	(0X407F7A);
	make_array	(0X407F7E,	0X2);
	create_dword	(0X407F80);
	create_dword	(x=0X407F84);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X407F88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X407F8C,	0X407FB1);
	set_name	(0X407F8C,	"aD_03dSFlagXDon");
	create_byte	(0X407FB1);
	make_array	(0X407FB1,	0X3);
	create_insn	(0X407FB4);
	create_insn	(0X407FCA);
	create_insn	(0X407FCC);
	create_insn	(x=0X407FD0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X407FE2);
	set_cmt	(0X407FF0,	"buflen",	0);
	set_cmt	(0X407FF2,	"buf",	0);
	set_cmt	(0X407FF4,	"seed",	0);
	make_array	(0X40800E,	0X2);
	create_dword	(x=0X408010);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X408014);
	create_insn	(x=0X408032);
	op_hex		(x,	1);
	create_insn	(0X408058);
	make_array	(0X40805A,	0X2);
	create_insn	(0X40805C);
	create_insn	(x=0X40806E);
	op_stkvar	(x,	1);
	create_insn	(x=0X40807C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X408082);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X408086);
	op_plain_offset	(x,	1,	0X204069F0);
	op_plain_offset	(x,	129,	0X204069F0);
	create_insn	(x=0X4080A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4080B6);
	op_plain_offset	(x,	1,	0X204069F0);
	op_plain_offset	(x,	129,	0X204069F0);
	create_insn	(x=0X4080D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X4080D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4080F4);
	op_plain_offset	(x,	1,	0X204069F0);
	op_plain_offset	(x,	129,	0X204069F0);
	create_insn	(0X4080FA);
	create_insn	(x=0X4080FC);
	op_plain_offset	(x,	1,	0X204069F0);
	op_plain_offset	(x,	129,	0X204069F0);
	create_insn	(0X408100);
	create_insn	(0X408112);
	set_cmt	(0X408116,	"num",	0);
	set_cmt	(0X40811A,	"source",	0);
	set_cmt	(0X40811C,	"destination",	0);
	create_insn	(x=0X408128);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X40813C);
	create_insn	(x=0X40814C);
	op_hex		(x,	1);
	create_insn	(0X408172);
	create_insn	(0X408174);
	create_insn	(x=0X408176);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X408180);
	create_insn	(0X408192);
	create_insn	(x=0X408196);
	op_hex		(x,	1);
	create_insn	(x=0X40819C);
	op_stkvar	(x,	1);
	create_insn	(x=0X4081A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X4081AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X4081B2);
	op_stkvar	(x,	1);
	create_dword	(x=0X4081C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4081C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X4081C8,	0X4081E2);
	set_name	(0X4081C8,	"aD_03dDataState");
	make_array	(0X4081E2,	0X2);
	create_strlit	(0X4081E4,	0X408209);
	set_name	(0X4081E4,	"aD_03dPackage_i");
	create_byte	(0X408209);
	make_array	(0X408209,	0X3);
	create_dword	(x=0X40820C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X408210,	0X40822E);
	set_name	(0X408210,	"aD_03dWriteFlas");
	make_array	(0X40822E,	0X2);
	create_insn	(0X408230);
	create_insn	(x=0X408238);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40823A);
	op_stkvar	(x,	1);
	create_insn	(x=0X40823C);
	op_stkvar	(x,	1);
	create_insn	(x=0X408240);
	op_stkvar	(x,	1);
	create_insn	(x=0X408242);
	op_stkvar	(x,	1);
	create_insn	(x=0X408244);
	op_stkvar	(x,	1);
	create_insn	(x=0X408246);
	op_stkvar	(x,	1);
	create_insn	(x=0X408256);
	op_stkvar	(x,	1);
	create_insn	(x=0X40825E);
	op_stkvar	(x,	1);
	create_insn	(x=0X408266);
	op_stkvar	(x,	1);
	create_insn	(x=0X40826E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X408270);
	op_stkvar	(x,	1);
	create_insn	(x=0X408276);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40827E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40828E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X408296);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40829E);
	op_stkvar	(x,	1);
	make_array	(0X4082BA,	0X2);
	create_strlit	(0X4082BC,	0X4082CC);
	set_name	(0X4082BC,	"a20161122221934");
	create_strlit	(0X4082CC,	0X4082D2);
	set_name	(0X4082CC,	"aWm220");
	make_array	(0X4082D2,	0X2);
	create_strlit	(0X4082D4,	0X4082D9);
	set_name	(0X4082D4,	"aNavi");
	create_byte	(0X4082D9);
	make_array	(0X4082D9,	0X3);
	create_strlit	(0X4082DC,	0X4082DE);
	make_array	(0X4082DE,	0X2);
	create_strlit	(0X4082E0,	0X4082E8);
	set_name	(0X4082E0,	"aLoader");
	create_insn	(0X4082E8);
	create_insn	(x=0X4082EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4082F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X4082FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X408312);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40831A);
	op_stkvar	(x,	1);
	set_cmt	(0X408320,	"num",	0);
	create_insn	(x=0X408322);
	op_stkvar	(x,	1);
	set_cmt	(0X408326,	"source",	0);
	create_insn	(x=0X408326);
	op_stkvar	(x,	1);
	set_cmt	(0X408328,	"destination",	0);
	create_insn	(x=0X408328);
	op_stkvar	(x,	1);
	create_insn	(x=0X408334);
	op_stkvar	(x,	1);
	create_insn	(x=0X40833A);
	op_stkvar	(x,	1);
	create_insn	(x=0X40833E);
	op_stkvar	(x,	1);
	create_insn	(x=0X40834A);
	op_stkvar	(x,	1);
	create_dword	(x=0X40835C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X408360,	0X408378);
	set_name	(0X408360,	"aD_03dDeviceInf");
	create_dword	(x=0X408378);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40837C);
	create_insn	(x=0X408380);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4083A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4083AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4083B2);
	op_plain_offset	(x,	1,	0X204069F0);
	op_plain_offset	(x,	129,	0X204069F0);
	create_insn	(x=0X4083D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X4083E4);
	create_insn	(x=0X4083E6);
	op_plain_offset	(x,	1,	0X204069F0);
	op_plain_offset	(x,	129,	0X204069F0);
	create_insn	(x=0X4083EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4083F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4083F4);
	op_plain_offset	(x,	1,	0X204069F0);
	op_plain_offset	(x,	129,	0X204069F0);
	create_insn	(x=0X4083F8);
	op_plain_offset	(x,	1,	0X204069F0);
	op_plain_offset	(x,	129,	0X204069F0);
	create_insn	(x=0X408400);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X408402);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X408420);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40842C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40844E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X40845E);
	create_insn	(x=0X40847A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4084A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X4084AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4084BC);
	op_hex		(x,	1);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_1(void) {
        auto x;
#define id x

	create_insn	(x=0X4084C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X4084C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X4084DA);
	op_plain_offset	(x,	1,	0X204069F0);
	op_plain_offset	(x,	129,	0X204069F0);
	make_array	(0X4084E6,	0X2);
	create_dword	(x=0X4084E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X4084EC,	0X408509);
	set_name	(0X4084EC,	"aD_03dEndUpgrad");
	create_byte	(0X408509);
	make_array	(0X408509,	0X3);
	create_dword	(x=0X40850C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X408510,	0X408529);
	set_name	(0X408510,	"aD_03dEndStateE");
	create_byte	(0X408529);
	make_array	(0X408529,	0X3);
	create_dword	(x=0X40852C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X408530);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X408534,	0X40854F);
	set_name	(0X408534,	"aD_03dMd5Checks");
	create_byte	(0X40854F);
	create_strlit	(0X408550,	0X40856F);
	set_name	(0X408550,	"aD_03dMd5Chec_0");
	create_byte	(0X40856F);
	create_strlit	(0X408570,	0X408586);
	set_name	(0X408570,	"aD_03dMd5End");
	make_array	(0X408586,	0X2);
	create_strlit	(0X408588,	0X40859D);
	set_name	(0X408588,	"aD_03d_2x_2x");
	create_byte	(0X40859D);
	make_array	(0X40859D,	0X3);
	create_insn	(0X4085A0);
	create_insn	(x=0X4085A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4085C4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4085D0);
	op_hex		(x,	1);
	create_insn	(x=0X4085DC);
	op_stkvar	(x,	1);
	make_array	(0X4085FA,	0X2);
	create_dword	(x=0X4085FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X408600,	0X40861D);
	set_name	(0X408600,	"aD_03dEntryUpgr");
	create_byte	(0X40861D);
	make_array	(0X40861D,	0X3);
	create_insn	(x=0X408620);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X408630);
	op_plain_offset	(x,	1,	0X20402540);
	op_plain_offset	(x,	129,	0X20402540);
	create_insn	(x=0X40863C);
	op_plain_offset	(x,	1,	0X20402540);
	op_plain_offset	(x,	129,	0X20402540);
	create_insn	(x=0X408646);
	op_plain_offset	(x,	1,	0X20402540);
	op_plain_offset	(x,	129,	0X20402540);
	create_insn	(x=0X408650);
	op_plain_offset	(x,	1,	0X20402540);
	op_plain_offset	(x,	129,	0X20402540);
	create_insn	(x=0X408652);
	op_plain_offset	(x,	1,	0X20402540);
	op_plain_offset	(x,	129,	0X20402540);
	create_insn	(x=0X408658);
	op_hex		(x,	1);
	create_insn	(x=0X40865C);
	op_hex		(x,	1);
	create_insn	(x=0X408660);
	op_plain_offset	(x,	1,	0X20402540);
	op_plain_offset	(x,	129,	0X20402540);
	create_insn	(x=0X408662);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X408666);
	op_plain_offset	(x,	1,	0X20407224);
	op_plain_offset	(x,	129,	0X20407224);
	create_insn	(x=0X408668);
	op_plain_offset	(x,	1,	0X20402540);
	op_plain_offset	(x,	129,	0X20402540);
	create_insn	(x=0X408672);
	op_plain_offset	(x,	1,	0X20407224);
	op_plain_offset	(x,	129,	0X20407224);
	create_insn	(x=0X408674);
	op_plain_offset	(x,	1,	0X20407224);
	op_plain_offset	(x,	129,	0X20407224);
	create_insn	(x=0X408678);
	op_plain_offset	(x,	1,	0X20407224);
	op_plain_offset	(x,	129,	0X20407224);
	create_insn	(x=0X40867A);
	op_plain_offset	(x,	1,	0X20407224);
	op_plain_offset	(x,	129,	0X20407224);
	create_insn	(x=0X40867C);
	op_plain_offset	(x,	1,	0X20407224);
	op_plain_offset	(x,	129,	0X20407224);
	create_insn	(x=0X408680);
	op_plain_offset	(x,	1,	0X20407224);
	op_plain_offset	(x,	129,	0X20407224);
	create_insn	(x=0X408682);
	op_plain_offset	(x,	1,	0X20407224);
	op_plain_offset	(x,	129,	0X20407224);
	create_insn	(x=0X408684);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4086A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4086AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X4086B0);
	make_array	(0X4086B2,	0X2);
	create_dword	(x=0X4086B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4086B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4086BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X4086C0,	0X4086E5);
	set_name	(0X4086C0,	"aD_03dImu_addr_");
	create_byte	(0X4086E5);
	make_array	(0X4086E5,	0X3);
	create_insn	(0X4086E8);
	create_insn	(x=0X4086EC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X408706);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40870E);
	op_hex		(x,	1);
	create_insn	(x=0X40871A);
	op_stkvar	(x,	1);
	make_array	(0X40872A,	0X2);
	create_dword	(x=0X40872C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X408730,	0X408743);
	set_name	(0X408730,	"aD_03dReboot");
	create_byte	(0X408743);
	create_insn	(0X408744);
	create_insn	(x=0X408748);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40874E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X408762);
	op_plain_offset	(x,	1,	0X204024A4);
	op_plain_offset	(x,	129,	0X204024A4);
	create_insn	(x=0X40877C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X408782);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40878A);
	op_plain_offset	(x,	1,	0X204069F0);
	op_plain_offset	(x,	129,	0X204069F0);
	create_insn	(x=0X4087AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4087B4);
	op_hex		(x,	1);
	create_insn	(x=0X4087BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X4087C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X4087CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X4087E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X4087FC);
	create_insn	(x=0X408806);
	op_plain_offset	(x,	1,	0X204069F0);
	op_plain_offset	(x,	129,	0X204069F0);
	create_insn	(x=0X408810);
	op_plain_offset	(x,	1,	0X204069F0);
	op_plain_offset	(x,	129,	0X204069F0);
	create_insn	(x=0X408824);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40882C);
	op_plain_offset	(x,	1,	0X204069F0);
	op_plain_offset	(x,	129,	0X204069F0);
	create_insn	(x=0X408836);
	op_plain_offset	(x,	1,	0X204069F0);
	op_plain_offset	(x,	129,	0X204069F0);
	create_insn	(x=0X40883E);
	op_plain_offset	(x,	1,	0X204069F0);
	op_plain_offset	(x,	129,	0X204069F0);
	create_insn	(x=0X408842);
	op_plain_offset	(x,	1,	0X204069F0);
	op_plain_offset	(x,	129,	0X204069F0);
	create_insn	(x=0X408848);
	op_stkvar	(x,	1);
	create_insn	(x=0X40884E);
	op_stkvar	(x,	1);
	create_insn	(x=0X408854);
	op_stkvar	(x,	1);
	set_cmt	(0X40886A,	"klen",	0);
	set_cmt	(0X40886C,	"key",	0);
	create_insn	(x=0X40886C);
	op_stkvar	(x,	1);
	set_cmt	(0X408872,	"aesKey",	0);
	create_insn	(x=0X408872);
	op_stkvar	(x,	1);
	create_insn	(x=0X408896);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X40889C,	"blk",	0);
	create_insn	(x=0X40889C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4088C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X4088C8);
	create_insn	(x=0X4088CA);
	op_plain_offset	(x,	1,	0X204069F0);
	op_plain_offset	(x,	129,	0X204069F0);
	create_insn	(x=0X4088CE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4088D2);
	op_plain_offset	(x,	1,	0X2042BFD0);
	op_plain_offset	(x,	129,	0X2042BFD0);
	create_insn	(x=0X4088D4);
	op_plain_offset	(x,	1,	0X204069F0);
	op_plain_offset	(x,	129,	0X204069F0);
	create_insn	(x=0X4088D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4088DA);
	op_plain_offset	(x,	1,	0X2042C018);
	op_plain_offset	(x,	129,	0X2042C018);
	create_insn	(x=0X4088DC);
	op_plain_offset	(x,	1,	0X204069F0);
	op_plain_offset	(x,	129,	0X204069F0);
	create_insn	(x=0X4088E4);
	op_plain_offset	(x,	1,	0X2042BFD0);
	op_plain_offset	(x,	129,	0X2042BFD0);
	create_insn	(x=0X4088E6);
	op_plain_offset	(x,	1,	0X204069F0);
	op_plain_offset	(x,	129,	0X204069F0);
	create_insn	(x=0X4088FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X408906,	0X2);
	create_dword	(x=0X408908);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40890C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X408910,	0X40892D);
	set_name	(0X408910,	"aD_03dStartUpgr");
	create_byte	(0X40892D);
	make_array	(0X40892D,	0X3);
	create_dword	(x=0X408930);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X408930,	"blk");
	create_strlit	(0X408934,	0X408959);
	set_name	(0X408934,	"aD_03dUpgradeSt");
	create_byte	(0X408959);
	make_array	(0X408959,	0X3);
	create_strlit	(0X40895C,	0X408978);
	set_name	(0X40895C,	"aD_03dStartResu");
	create_strlit	(0X408978,	0X408993);
	set_name	(0X408978,	"aD_03dEraseStar");
	create_byte	(0X408993);
	create_strlit	(0X408994,	0X4089AF);
	set_name	(0X408994,	"aD_03dEraseEndD");
	create_byte	(0X4089AF);
	create_dword	(x=0X4089B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4089B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X4089B8,	0X4089CF);
	set_name	(0X4089B8,	"aD_03dDji_appX");
	create_byte	(0X4089CF);
	create_insn	(0X4089D0);
	create_insn	(x=0X4089D4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4089EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4089F6);
	op_hex		(x,	1);
	create_insn	(x=0X4089FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X408A02);
	op_stkvar	(x,	1);
	create_insn	(x=0X408A08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X408A0C);
	op_plain_offset	(x,	1,	0X204024A4);
	op_plain_offset	(x,	129,	0X204024A4);
	create_insn	(x=0X408A0E);
	op_stkvar	(x,	1);
	make_array	(0X408A1A,	0X2);
	create_dword	(x=0X408A1C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X408A20,	0X408A3A);
	set_name	(0X408A20,	"aD_03dStatus_re");
	make_array	(0X408A3A,	0X2);
	create_dword	(x=0X408A3C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X408A40);
	create_insn	(x=0X408A4E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X408A5E);
	create_dword	(x=0X408A68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X408A6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X408A72);
	op_plain_offset	(x,	1,	0X204076CC);
	op_plain_offset	(x,	129,	0X204076CC);
	create_insn	(0X408A80);
	create_insn	(0X408A84);
	create_dword	(x=0X408AA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X408AAC);
	create_insn	(x=0X408AB0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X408ABE,	0X2);
	create_dword	(x=0X408AC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X408AC4);
	create_insn	(x=0X408AC6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X408AE0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X408AE4);
	op_plain_offset	(x,	1,	0X20402524);
	op_plain_offset	(x,	129,	0X20402524);
	create_insn	(x=0X408AE8);
	op_plain_offset	(x,	1,	0X20402524);
	op_plain_offset	(x,	129,	0X20402524);
	create_insn	(x=0X408AEC);
	op_plain_offset	(x,	1,	0X20402524);
	op_plain_offset	(x,	129,	0X20402524);
	create_insn	(x=0X408AEE);
	op_plain_offset	(x,	1,	0X20402524);
	op_plain_offset	(x,	129,	0X20402524);
	create_insn	(x=0X408AF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X408B02);
	op_plain_offset	(x,	1,	0X20402524);
	op_plain_offset	(x,	129,	0X20402524);
	make_array	(0X408B06,	0X2);
	create_dword	(x=0X408B08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X408B0C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X408B10);
	create_insn	(0X408B26);
	create_insn	(x=0X408B38);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X408B3E,	0X2);
	create_dword	(x=0X408B40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X408B44);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X408B4A,	0X2);
	create_dword	(x=0X408B4C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X408B50);
	create_insn	(x=0X408B72);
	op_stkvar	(x,	1);
	create_insn	(x=0X408B80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X408B8A);
	create_insn	(x=0X408B8E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X408B92,	0X2);
	create_dword	(x=0X408B94);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X408B98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X408B9C);
	create_insn	(0X408BC6);
	create_insn	(0X408BC8);
	create_insn	(x=0X408BD0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X408BD8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X408BE0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X408BEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X408BF0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X408BF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X408BFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X408BFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X408C02);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X408C04);
	op_stkvar	(x,	1);
	create_insn	(x=0X408C0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X408C12);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X408C14);
	op_stkvar	(x,	1);
	create_insn	(x=0X408C1C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X408C66,	0X2);
	create_dword	(x=0X408C68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X408C6C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X408C70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X408C74);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X408C78,	0X408C7D);
	set_name	(0X408C78,	"aUart");
	create_byte	(0X408C7D);
	make_array	(0X408C7D,	0X3);
	create_strlit	(0X408C80,	0X408C84);
	set_name	(0X408C80,	"aUsb");
	create_dword	(x=0X408C84);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X408C88);
	create_insn	(0X408C8C);
	create_insn	(x=0X408C90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X408C98);
	op_plain_offset	(x,	1,	0X20402524);
	op_plain_offset	(x,	129,	0X20402524);
	create_dword	(x=0X408CA4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X408CA8);
	set_name	(0X408CA8,	"xor_128bit_3bufs");
	create_insn	(0X408D2C);
	set_name	(0X408D2C,	"TRACE_DEBUG_printf");
	create_insn	(x=0X408D2E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X408D32,	"va",	0);
	create_insn	(x=0X408D32);
	op_stkvar	(x,	1);
	set_cmt	(0X408D34,	"a1",	0);
	set_cmt	(0X408D36,	"fmt",	0);
	create_insn	(x=0X408D36);
	op_stkvar	(x,	1);
	create_insn	(x=0X408D3E);
	op_stkvar	(x,	1);
	make_array	(0X408D42,	0X2);
	create_dword	(x=0X408D44);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X408D48);
	create_insn	(0X408D58);
	create_insn	(0X408D5C);
	create_insn	(0X408D60);
	create_insn	(0X408D74);
	create_insn	(0X408D90);
	create_insn	(0X408DB8);
	create_insn	(0X408DBC);
	create_insn	(0X408DC8);
	create_insn	(0X408DCC);
	create_insn	(0X408DD4);
	create_insn	(0X408DEA);
	create_insn	(0X408DF6);
	create_insn	(0X408E00);
	create_insn	(0X408E0A);
	create_insn	(0X408E10);
	create_insn	(0X408E14);
	create_insn	(x=0X408E1A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X408E3C);
	make_array	(0X408E46,	0X2);
	create_dword	(x=0X408E48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X408E4C);
	create_insn	(0X408E5C);
	create_insn	(0X408E60);
	create_insn	(x=0X408E66);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X408E7E);
	create_insn	(0X408E84);
	create_insn	(0X408E90);
	create_dword	(x=0X408E9C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X408EA0);
	create_insn	(0X408EB0);
	create_insn	(x=0X408EB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X408EB6);
	op_plain_offset	(x,	1,	0X2042BFD0);
	op_plain_offset	(x,	129,	0X2042BFD0);
	create_insn	(0X408ED4);
	create_dword	(x=0X408ED8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X408EDC);
	create_insn	(x=0X408EEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X408EEE);
	op_plain_offset	(x,	1,	0X2042C018);
	op_plain_offset	(x,	129,	0X2042C018);
	create_insn	(x=0X408EF0);
	op_plain_offset	(x,	1,	0X2042C018);
	op_plain_offset	(x,	129,	0X2042C018);
	create_insn	(0X408F0E);
	make_array	(0X408F12,	0X2);
	create_dword	(x=0X408F14);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X408F18);
	create_dword	(0X408F1C);
	create_insn	(x=0X408F20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X408F26);
	op_hex		(x,	1);
	create_insn	(0X408F38);
	create_insn	(x=0X408F3C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X408F44);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X408F48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X408F4C);
	create_insn	(x=0X408F50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X408F62);
	create_dword	(x=0X408F64);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X408F68);
	set_name	(0X408F68,	"compute_key_data");
	create_insn	(x=0X408F7A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X408F88,	"buf",	0);
	set_cmt	(0X408F8E,	"buflen",	0);
	create_insn	(x=0X408F96);
	op_stkvar	(x,	1);
	create_insn	(0X408FA2);
	make_array	(0X408FA6,	0X2);
	create_dword	(x=0X408FA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X408FAC);
	make_array	(0X408FB2,	0X2);
	create_insn	(x=0X408FB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X408FD4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X408FD8,	"buflen",	0);
	create_insn	(0X408FD8);
	set_name	(0X408FD8,	"compute_decrypt_key_A");
	set_cmt	(0X408FDA,	"buf",	0);
	set_cmt	(0X408FDC,	"seed",	0);
	create_insn	(x=0X408FDC);
	op_dec		(x,	1);
	make_array	(0X408FEA,	0X2);
	create_insn	(x=0X408FEC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X409008);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40900C);
	make_array	(0X409022,	0X2);
	create_dword	(x=0X409024);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X409028);
	create_insn	(0X40902C);
	set_name	(0X40902C,	"flash_erase1");
	create_insn	(x=0X409044);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40904A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X409052);
	create_insn	(x=0X409070);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X409088);
	op_stkvar	(x,	1);
	create_insn	(x=0X409096);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X4090A6);
	create_insn	(x=0X4090C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X4090D2,	0X2);
	create_dword	(x=0X4090D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4090D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X4090DC,	0X4090FD);
	set_name	(0X4090DC,	"aD_03dSectorEra");
	create_byte	(0X4090FD);
	make_array	(0X4090FD,	0X3);
	create_strlit	(0X409100,	0X409123);
	set_name	(0X409100,	"aD_03dSectorE_0");
	create_byte	(0X409123);
	create_strlit	(0X409124,	0X409145);
	set_name	(0X409124,	"aD_03dSectorE_1");
	create_byte	(0X409145);
	make_array	(0X409145,	0X3);
	create_insn	(0X409148);
	set_name	(0X409148,	"flash_write1");
	create_insn	(x=0X40915E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X409160);
	op_hex		(x,	1);
	create_insn	(x=0X409182);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X409186,	"a3",	0);
	create_insn	(0X409186);
	set_cmt	(0X409188,	"a2",	0);
	set_cmt	(0X40918A,	"a1",	0);
	create_insn	(x=0X409190);
	op_hex		(x,	1);
	create_insn	(x=0X4091B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X4091BC);
	create_dword	(x=0X4091C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X4091C4,	0X4091DE);
	set_name	(0X4091C4,	"aD_03dUnlockErr");
	make_array	(0X4091DE,	0X2);
	create_strlit	(0X4091E0,	0X4091FF);
	set_name	(0X4091E0,	"aD_03dWriteFl_0");
	create_byte	(0X4091FF);
	create_insn	(0X409200);
	create_insn	(0X409222);
	create_insn	(x=0X40922C);
	op_hex		(x,	1);
	create_insn	(0X409242);
	create_insn	(0X409252);
	create_insn	(0X409274);
	set_cmt	(0X409278,	"len",	0);
	set_cmt	(0X40927E,	"va",	0);
	create_insn	(x=0X40927E);
	op_stkvar	(x,	1);
	set_cmt	(0X409280,	"fmt",	0);
	create_insn	(x=0X409280);
	op_stkvar	(x,	1);
	create_insn	(x=0X409282);
	op_stkvar	(x,	1);
	set_cmt	(0X409286,	"dst",	0);
	create_insn	(x=0X409286);
	op_stkvar	(x,	1);
	create_insn	(x=0X40929E);
	op_stkvar	(x,	1);
	make_array	(0X4092A2,	0X2);
	create_insn	(x=0X4092A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X4092B6,	0X2);
	create_dword	(x=0X4092B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4092BC);
	set_name	(0X4092BC,	"free_lock");
	create_insn	(0X4092DC);
	create_insn	(0X4092E0);
	create_insn	(0X4092F6);
	create_insn	(0X4092FA);
	create_insn	(x=0X4092FE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X409300);
	op_hex		(x,	1);
	create_insn	(0X409318);
	make_array	(0X409322,	0X2);
	create_dword	(x=0X409324);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X409328);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X409344);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X409348);
	create_insn	(0X40934E);
	make_array	(0X409366,	0X2);
	create_dword	(0X409368);
	create_insn	(0X40936C);
	create_insn	(0X409372);
	make_array	(0X409382,	0X2);
	create_dword	(x=0X409384);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X409388);
	set_name	(0X409388,	"get_lock");
	create_insn	(0X40938A);
	create_insn	(0X409394);
	create_insn	(0X4093B2);
	make_array	(0X4093C2,	0X2);
	create_insn	(0X4093C4);
	create_insn	(0X4093D8);
	create_insn	(0X4093DC);
	create_dword	(x=0X4093E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X4093E4);
	create_dword	(0X4093E8);
	create_dword	(0X4093EC);
	create_insn	(0X4093F0);
	create_insn	(0X409402);
	create_insn	(x=0X409404);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X409406);
	op_plain_offset	(x,	1,	0X204076CC);
	op_plain_offset	(x,	129,	0X204076CC);
	create_insn	(0X409412);
	create_dword	(x=0X409418);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X40941C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X40941C,	"time_ticks_get");
	make_array	(0X409422,	0X2);
	create_dword	(x=0X409424);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X409428);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X40943A);
	make_array	(0X409442,	0X2);
	create_dword	(x=0X409444);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X409448);
	create_insn	(x=0X40944E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X409456,	0X2);
	create_dword	(x=0X409458);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40945C);
	create_insn	(x=0X409462);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X409480);
	create_insn	(0X409484);
	make_array	(0X40948A,	0X2);
	create_dword	(x=0X40948C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X409490);
	create_insn	(x=0X4094A0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X4094B4);
	create_dword	(x=0X4094B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4094BC);
	make_array	(0X4094C2,	0X2);
	create_insn	(0X4094C4);
	create_insn	(x=0X4094C6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X4094F2);
	make_array	(0X4094F6,	0X2);
	create_dword	(x=0X4094F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4094FC);
	create_insn	(x=0X409508);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40952C);
	op_stkvar	(x,	1);
	create_insn	(x=0X40952E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X409536);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X409556);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X409564);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X4095C2);
	create_insn	(x=0X4095D8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X4095E2);
	create_dword	(x=0X4095F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X4095F4,	0X40961E);
	set_name	(0X4095F4,	"aD_03dGpioDIlle");
	make_array	(0X40961E,	0X2);
	create_dword	(x=0X409620);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X409624,	0X40963D);
	set_name	(0X409624,	"aD_03dGpioDBusy");
	create_byte	(0X40963D);
	make_array	(0X40963D,	0X3);
	create_strlit	(0X409640,	0X409660);
	set_name	(0X409640,	"aD_03dGpioDNotR");
	create_insn	(0X409660);
	make_array	(0X409666,	0X2);
	create_insn	(0X409668);
	set_name	(0X409668,	"gpiochip_add");
	create_insn	(x=0X40966C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X409688);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4096A4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4096C2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X4096D8);
	create_insn	(0X4096DE);
	create_insn	(x=0X409728);
	op_stkvar	(x,	1);
	create_insn	(x=0X40972A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X409734);
	make_array	(0X40973E,	0X2);
	create_dword	(x=0X409740);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X409744,	0X409769);
	set_name	(0X409744,	"aD_03dGpiochip_");
	create_byte	(0X409769);
	make_array	(0X409769,	0X3);
	create_dword	(x=0X40976C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X409770,	0X409798);
	set_name	(0X409770,	"aD_03dGpiochi_0");
	create_strlit	(0X409798,	0X4097CD);
	set_name	(0X409798,	"aD_03dGpiochi_1");
	create_byte	(0X4097CD);
	make_array	(0X4097CD,	0X3);
	create_insn	(x=0X4097D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X4097EA);
	create_insn	(0X4097F2);
	make_array	(0X4097FE,	0X2);
	create_dword	(x=0X409800);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X409804);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X409824);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X409828);
	create_insn	(0X40982E);
	create_insn	(0X409834);
	create_insn	(0X409844);
	create_insn	(0X409846);
	create_insn	(0X409872);
	create_insn	(x=0X40987C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X409886,	0X2);
	create_dword	(x=0X409888);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40988C);
	create_insn	(x=0X409898);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X4098A6);
	create_dword	(x=0X4098B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X4098B8);
	create_insn	(0X4098BC);
	create_insn	(x=0X4098CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4098D2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4098D4);
	op_plain_offset	(x,	1,	0X204082EC);
	op_plain_offset	(x,	129,	0X204082EC);
	make_array	(0X4098E6,	0X2);
	create_dword	(0X4098E8);
	create_strlit	(0X4098EC,	0X409901);
	set_name	(0X4098EC,	"aSTime_out0x08x");
	create_byte	(0X409901);
	make_array	(0X409901,	0X3);
	create_dword	(x=0X409904);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X409908);
	create_insn	(x=0X409910);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X409912);
	op_plain_offset	(x,	1,	0X2042BFD0);
	op_plain_offset	(x,	129,	0X2042BFD0);
	create_insn	(x=0X409916);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X409918);
	op_plain_offset	(x,	1,	0X204024A4);
	op_plain_offset	(x,	129,	0X204024A4);
	create_insn	(x=0X409920);
	op_plain_offset	(x,	1,	0X2042BFD0);
	op_plain_offset	(x,	129,	0X2042BFD0);
	create_dword	(x=0X40992C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X409930);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X409934);
	create_insn	(x=0X409950);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40996A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X4099A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X4099A4,	0X4099B9);
	set_name	(0X4099A4,	"aD_03dLoader");
	create_byte	(0X4099B9);
	make_array	(0X4099B9,	0X3);
	create_insn	(0X4099BC);
	set_cmt	(0X4099C4,	"seed",	0);
	set_cmt	(0X4099CA,	"buflen",	0);
	set_cmt	(0X4099CC,	"buf",	0);
	create_insn	(0X4099D4);
	set_cmt	(0X4099D8,	"buflen",	0);
	set_cmt	(0X4099DA,	"buf",	0);
	set_cmt	(0X4099E6,	"seed",	0);
	set_cmt	(0X4099EA,	"buf",	0);
	create_insn	(0X409A06);
	create_insn	(0X409A16);
	make_array	(0X409A26,	0X2);
	create_insn	(0X409A28);
	set_cmt	(0X409A2A,	"num",	0);
	set_cmt	(0X409A2E,	"source",	0);
	set_cmt	(0X409A30,	"destination",	0);
	create_insn	(x=0X409A36);
	op_stkvar	(x,	1);
	create_insn	(x=0X409A3A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X409A3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X409A44);
	op_stkvar	(x,	1);
	create_insn	(x=0X409A4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X409A60);
	op_stkvar	(x,	1);
	create_insn	(x=0X409A64);
	op_stkvar	(x,	1);
	create_insn	(x=0X409A68);
	op_stkvar	(x,	1);
	create_insn	(x=0X409A74);
	op_stkvar	(x,	1);
	create_insn	(x=0X409A80);
	op_stkvar	(x,	1);
	create_insn	(x=0X409A84);
	op_stkvar	(x,	1);
	create_insn	(x=0X409A88);
	op_stkvar	(x,	1);
	create_insn	(x=0X409A94);
	op_stkvar	(x,	1);
	create_insn	(x=0X409AA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X409AA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X409AA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X409AB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X409AC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X409AC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X409AC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X409AD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X409AE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X409AE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X409AE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X409AF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X409B00);
	op_stkvar	(x,	1);
	create_insn	(x=0X409B04);
	op_stkvar	(x,	1);
	create_insn	(x=0X409B08);
	op_stkvar	(x,	1);
	create_insn	(x=0X409B14);
	op_stkvar	(x,	1);
	create_insn	(x=0X409B20);
	op_stkvar	(x,	1);
	create_insn	(x=0X409B24);
	op_stkvar	(x,	1);
	create_insn	(x=0X409B28);
	op_stkvar	(x,	1);
	create_insn	(x=0X409B34);
	op_stkvar	(x,	1);
	create_insn	(x=0X409B40);
	op_stkvar	(x,	1);
	create_insn	(x=0X409B44);
	op_stkvar	(x,	1);
	create_insn	(x=0X409B48);
	op_stkvar	(x,	1);
	create_insn	(x=0X409B54);
	op_stkvar	(x,	1);
	create_insn	(x=0X409B60);
	op_stkvar	(x,	1);
	create_insn	(x=0X409B64);
	op_stkvar	(x,	1);
	create_insn	(x=0X409B68);
	op_stkvar	(x,	1);
	create_insn	(x=0X409B74);
	op_stkvar	(x,	1);
	create_insn	(x=0X409B80);
	op_stkvar	(x,	1);
	create_insn	(x=0X409B84);
	op_stkvar	(x,	1);
	create_insn	(x=0X409B88);
	op_stkvar	(x,	1);
	create_insn	(x=0X409B94);
	op_stkvar	(x,	1);
	create_insn	(x=0X409BA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X409BA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X409BA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X409BB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X409BC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X409BC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X409BCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X409BD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X409BE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X409BE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X409BE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X409BF4);
	op_stkvar	(x,	1);
	create_insn	(x=0X409C00);
	op_stkvar	(x,	1);
	create_insn	(x=0X409C04);
	op_stkvar	(x,	1);
	create_insn	(x=0X409C08);
	op_stkvar	(x,	1);
	create_insn	(x=0X409C14);
	op_stkvar	(x,	1);
	create_insn	(x=0X409C20);
	op_stkvar	(x,	1);
	create_insn	(x=0X409C26);
	op_stkvar	(x,	1);
	create_insn	(x=0X409C2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X409C34);
	op_stkvar	(x,	1);
	make_array	(0X409C42,	0X2);
	create_dword	(x=0X409C44);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X409C48);
	create_insn	(0X409C52);
	set_name	(0X409C52,	"TRACE_DEBUG_printf_va");
	set_cmt	(0X409C64,	"len",	0);
	set_cmt	(0X409C66,	"va",	0);
	set_cmt	(0X409C68,	"fmt",	0);
	set_cmt	(0X409C6A,	"dst",	0);
	create_insn	(0X409C8A);
	set_cmt	(0X409C92,	"buflen",	0);
	set_cmt	(0X409C96,	"buf",	0);
	create_insn	(0X409CA2);
	create_insn	(0X409CA4);
	create_insn	(0X409CB2);
	create_insn	(0X409CC0);
	create_insn	(0X409CDC);
	create_insn	(0X409CF6);
	set_cmt	(0X409D08,	"source",	0);
	set_cmt	(0X409D0A,	"num",	0);
	set_cmt	(0X409D0C,	"destination",	0);
	set_cmt	(0X409D1C,	"source",	0);
	create_insn	(0X409D1C);
	set_cmt	(0X409D1E,	"num",	0);
	set_cmt	(0X409D20,	"destination",	0);
	create_insn	(0X409D2E);
	create_insn	(0X409D4A);
	create_insn	(0X409D64);
	set_cmt	(0X409D76,	"source",	0);
	set_cmt	(0X409D78,	"destination",	0);
	set_cmt	(0X409D7A,	"num",	0);
	set_cmt	(0X409D8A,	"destination",	0);
	create_insn	(0X409D8A);
	set_cmt	(0X409D8C,	"num",	0);
	set_cmt	(0X409D8E,	"source",	0);
	create_insn	(0X409D9C);
	create_insn	(x=0X409DAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X409DB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X409DB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X409DBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X409DC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X409DCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X409DD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X409DD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X409DE0);
	op_stkvar	(x,	1);
	make_array	(0X409DFA,	0X2);
	create_dword	(0X409DFC);
	create_dword	(0X409E00);
	create_dword	(0X409E04);
	create_dword	(0X409E08);
	create_dword	(0X409E0C);
	create_insn	(0X409E10);
	create_insn	(x=0X409E1C);
	op_stkvar	(x,	1);
	create_insn	(0X409E32);
	create_insn	(0X409E38);
	create_insn	(0X409E46);
	create_insn	(x=0X409E54);
	op_hex		(x,	1);
	create_insn	(x=0X409E58);
	op_hex		(x,	1);
	create_insn	(0X409E82);
	create_insn	(x=0X409E8E);
	op_hex		(x,	1);
	create_insn	(0X409E94);
	create_insn	(0X409E9A);
	create_insn	(0X409EB0);
	create_insn	(x=0X409EC2);
	op_hex		(x,	1);
	create_insn	(x=0X409EE4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X409EF0);
	op_hex		(x,	1);
	create_insn	(x=0X409F08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X409F1C);
	op_hex		(x,	1);
	create_insn	(x=0X409F36);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X409F4E);
	op_hex		(x,	1);
	create_insn	(x=0X409F6C);
	op_hex		(x,	1);
	create_insn	(x=0X409F74);
	op_hex		(x,	1);
	make_array	(0X409F92,	0X2);
	create_dword	(x=0X409F94);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X409F98,	0X409FB8);
	set_name	(0X409F98,	"aD_03dCanDRxFif");
	create_strlit	(0X409FB8,	0X409FD8);
	set_name	(0X409FB8,	"aD_03dCanDRxF_0");
	create_insn	(0X409FD8);
	create_insn	(x=0X409FE8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40A00E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40A046);
	op_hex		(x,	1);
	create_insn	(x=0X40A05C);
	op_hex		(x,	1);
	create_insn	(x=0X40A07A);
	op_hex		(x,	1);
	create_insn	(0X40A088);
	create_insn	(x=0X40A094);
	op_hex		(x,	1);
	create_insn	(x=0X40A0E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X40A0F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X40A10A,	0X2);
	create_dword	(0X40A10C);
	create_dword	(0X40A110);
	create_dword	(x=0X40A114);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X40A118,	0X40A138);
	set_name	(0X40A118,	"aD_03dCanDRxAll");
	create_dword	(0X40A138);
	create_dword	(0X40A13C);
	create_dword	(0X40A140);
	create_dword	(0X40A144);
	create_strlit	(0X40A148,	0X40A16B);
	set_name	(0X40A148,	"aD_03dCanDRegis");
	create_byte	(0X40A16B);
	create_insn	(0X40A16C);
	create_insn	(x=0X40A176);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X40A19A);
	create_insn	(x=0X40A1B4);
	op_stkvar	(x,	1);
	set_cmt	(0X40A1BE,	"num",	0);
	set_cmt	(0X40A1C0,	"source",	0);
	make_array	(0X40A1D6,	0X2);
	create_dword	(x=0X40A1D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40A1DC);
	create_insn	(x=0X40A1DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40A204);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40A216);
	op_hex		(x,	1);
	make_array	(0X40A21E,	0X2);
	create_dword	(x=0X40A220);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40A224);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X40A228);
	create_insn	(0X40A22C);
	create_insn	(0X40A22E);
	set_name	(0X40A22E,	"TWID_XdmaConfigureRead");
	set_cmt	(0X40A236,	"bTransfer",	0);
	create_insn	(x=0X40A236);
	op_enum		(x,	1,	GetEnum("XDMAD_TRANSFER"),0);
	create_insn	(x=0X40A238);
	op_stkvar	(x,	1);
	create_insn	(x=0X40A242);
	op_stkvar	(x,	1);
	set_cmt	(0X40A244,	"bPeriphID",	0);
	set_cmt	(0X40A24E,	"dwXdmaDescCfg",	0);
	set_cmt	(0X40A254,	"dwChannel",	0);
	set_cmt	(0X40A260,	"pXdmaParam",	0);
	create_insn	(x=0X40A260);
	op_stkvar	(x,	1);
	set_cmt	(0X40A262,	"pXdmad",	0);
	create_insn	(x=0X40A264);
	op_stkvar	(x,	1);
	create_insn	(x=0X40A266);
	op_stkvar	(x,	1);
	set_cmt	(0X40A268,	"dwXdmaDescAddr",	0);
	create_insn	(x=0X40A268);
	op_stkvar	(x,	1);
	set_cmt	(0X40A26A,	"dwXdmaIntEn",	0);
	create_insn	(x=0X40A26A);
	op_stkvar	(x,	1);
	create_insn	(0X40A27C);
	set_name	(0X40A27C,	"TWID_XdmaConfigureWrite");
	set_cmt	(0X40A284,	"bTransfer",	0);
	create_insn	(x=0X40A284);
	op_enum		(x,	1,	GetEnum("XDMAD_TRANSFER"),0);
	create_insn	(x=0X40A286);
	op_stkvar	(x,	1);
	create_insn	(x=0X40A290);
	op_stkvar	(x,	1);
	set_cmt	(0X40A292,	"bPeriphID",	0);
	set_cmt	(0X40A29C,	"dwXdmaDescCfg",	0);
	set_cmt	(0X40A2A2,	"dwChannel",	0);
	set_cmt	(0X40A2AE,	"pXdmaParam",	0);
	create_insn	(x=0X40A2AE);
	op_stkvar	(x,	1);
	set_cmt	(0X40A2B0,	"pXdmad",	0);
	create_insn	(x=0X40A2B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X40A2B4);
	op_stkvar	(x,	1);
	set_cmt	(0X40A2B6,	"dwXdmaDescAddr",	0);
	create_insn	(x=0X40A2B6);
	op_stkvar	(x,	1);
	set_cmt	(0X40A2B8,	"dwXdmaIntEn",	0);
	create_insn	(x=0X40A2B8);
	op_stkvar	(x,	1);
	make_array	(0X40A2CA,	0X2);
	create_insn	(x=0X40A2CC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X40A2CC,	"XDMAD_GetGlobal");
	create_dword	(x=0X40A2D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40A2D4);
	create_insn	(x=0X40A2E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X40A2E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X40A2EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X40A2F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X40A2F6);
	op_stkvar	(x,	1);
	create_insn	(0X40A30A);
	create_insn	(x=0X40A316);
	op_stkvar	(x,	1);
	create_insn	(x=0X40A31C);
	op_stkvar	(x,	1);
	create_insn	(x=0X40A320);
	op_stkvar	(x,	1);
	create_insn	(x=0X40A328);
	op_stkvar	(x,	1);
	create_insn	(x=0X40A32E);
	op_stkvar	(x,	1);
	create_insn	(0X40A344);
	create_insn	(0X40A348);
	create_insn	(x=0X40A354);
	op_stkvar	(x,	1);
	create_insn	(x=0X40A35A);
	op_stkvar	(x,	1);
	create_insn	(0X40A362);
	create_insn	(x=0X40A364);
	op_stkvar	(x,	1);
	create_insn	(0X40A370);
	create_dword	(x=0X40A3C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40A3CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40A3D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40A3D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40A3D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40A3DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40A3E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40A3E4);
	create_insn	(x=0X40A3F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40A416);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X40A428);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X40A42C,	0X40A453);
	set_name	(0X40A42C,	"aD_03dWarningGp");
	create_byte	(0X40A453);
	create_insn	(0X40A454);
	create_insn	(0X40A460);
	create_insn	(0X40A488);
	make_array	(0X40A492,	0X2);
	create_dword	(0X40A494);
	create_insn	(0X40A498);
	create_insn	(x=0X40A4A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X40A4A4);
	op_stkvar	(x,	1);
	create_insn	(0X40A4B0);
	make_array	(0X40A4B6,	0X2);
	create_insn	(0X40A4B8);
	create_insn	(x=0X40A4D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40A4DE);
	op_hex		(x,	1);
	create_insn	(x=0X40A4E8);
	op_hex		(x,	1);
	set_cmt	(0X40A4FE,	"dwChannel",	0);
	set_cmt	(0X40A500,	"pXdmad",	0);
	set_cmt	(0X40A506,	"dwChannel",	0);
	set_cmt	(0X40A508,	"pXdmad",	0);
	create_insn	(x=0X40A510);
	op_hex		(x,	1);
	create_dword	(x=0X40A518);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X40A51C);
	create_insn	(0X40A520);
	create_insn	(x=0X40A524);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X40A55E,	0X2);
	create_dword	(x=0X40A560);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40A564);
	create_insn	(0X40A59A);
	create_insn	(0X40A5B6);
	create_insn	(0X40A5CA);
	set_cmt	(0X40A5E6,	"source",	0);
	set_cmt	(0X40A5E8,	"num",	0);
	set_cmt	(0X40A5EA,	"destination",	0);
	create_insn	(0X40A5F6);
	create_insn	(0X40A612);
	create_insn	(0X40A626);
	create_insn	(0X40A63C);
	create_insn	(x=0X40A64A);
	op_hex		(x,	1);
	make_array	(0X40A65E,	0X2);
	create_insn	(0X40A660);
	create_insn	(x=0X40A682);
	op_hex		(x,	1);
	create_insn	(x=0X40A6A0);
	op_hex		(x,	1);
	create_insn	(0X40A6AE);
	create_insn	(x=0X40A6BA);
	op_hex		(x,	1);
	set_cmt	(0X40A6CC,	"bDstID",	0);
	set_cmt	(0X40A6CE,	"bSrcID",	0);
	set_cmt	(0X40A6D0,	"pXdmad",	0);
	create_insn	(x=0X40A6D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40A6FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X40A702,	"dwChannel",	0);
	set_cmt	(0X40A704,	"pXdmad",	0);
	create_insn	(x=0X40A71C);
	op_stkvar	(x,	1);
	set_cmt	(0X40A71E,	"len",	0);
	set_cmt	(0X40A720,	"pTwiXdma",	0);
	set_cmt	(0X40A722,	"buf",	0);
	set_cmt	(0X40A728,	"bDstID",	0);
	set_cmt	(0X40A72A,	"bSrcID",	0);
	set_cmt	(0X40A72C,	"pXdmad",	0);
	create_insn	(x=0X40A750);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X40A756,	"dwChannel",	0);
	set_cmt	(0X40A758,	"pXdmad",	0);
	create_insn	(x=0X40A76C);
	op_stkvar	(x,	1);
	set_cmt	(0X40A770,	"pTwiXdma",	0);
	set_cmt	(0X40A772,	"len",	0);
	set_cmt	(0X40A774,	"buf",	0);
	create_insn	(x=0X40A7B6);
	op_hex		(x,	1);
	create_dword	(0X40A7C0);
	create_dword	(x=0X40A7C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X40A7C8,	0X40A7F7);
	set_name	(0X40A7C8,	"aD_03dTwiRxCanT");
	create_byte	(0X40A7F7);
	create_dword	(x=0X40A7F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X40A7FC,	0X40A82B);
	set_name	(0X40A7FC,	"aD_03dTwiTxCanT");
	create_byte	(0X40A82B);
	create_dword	(x=0X40A82C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40A830);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40A834);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40A838);
	create_insn	(x=0X40A83A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X40A860);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40A864);
	create_insn	(x=0X40A870);
	op_stkvar	(x,	1);
	set_cmt	(0X40A89E,	"dwChannel",	0);
	set_cmt	(0X40A8A0,	"pXdmad",	0);
	create_insn	(0X40A8A8);
	create_insn	(0X40A8B0);
	create_insn	(x=0X40A8CE);
	op_hex		(x,	1);
	create_insn	(0X40A8E2);
	set_cmt	(0X40A906,	"destination",	0);
	set_cmt	(0X40A908,	"num",	0);
	set_cmt	(0X40A90A,	"source",	0);
	set_cmt	(0X40A92E,	"dwChannel",	0);
	set_cmt	(0X40A930,	"pXdmad",	0);
	create_insn	(0X40A938);
	create_insn	(0X40A940);
	create_insn	(0X40A954);
	create_insn	(x=0X40A982);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40A98E);
	op_hex		(x,	1);
	create_insn	(0X40A9EC);
	create_insn	(0X40AA00);
	create_insn	(0X40AA0A);
	create_insn	(0X40AA1E);
	create_insn	(0X40AA28);
	create_insn	(x=0X40AA4C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X40AA58);
	create_dword	(x=0X40AA68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X40AA6C,	0X40AA94);
	set_name	(0X40AA6C,	"aD_03dI2cTimeou");
	create_insn	(0X40AA94);
	create_insn	(x=0X40AA9C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X40AAB4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X40AAB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X40AABE,	0X2);
	create_dword	(x=0X40AAC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40AAC4);
	create_insn	(x=0X40AAE0);
	op_hex		(x,	1);
	create_dword	(0X40AAF0);
	create_dword	(0X40AAF4);
	create_insn	(0X40AAF8);
	create_insn	(x=0X40AB02);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X40AB44);
	create_dword	(x=0X40AB74);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40AB78);
	create_insn	(0X40AB96);
	make_array	(0X40ABA2,	0X2);
	create_insn	(x=0X40ABA4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40ABAE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40ABB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40ABB8);
	op_plain_offset	(x,	1,	0X20404500);
	op_plain_offset	(x,	129,	0X20404500);
	create_insn	(x=0X40ABBC);
	op_plain_offset	(x,	1,	0X20404500);
	op_plain_offset	(x,	129,	0X20404500);
	create_insn	(x=0X40ABC0);
	op_plain_offset	(x,	1,	0X20404500);
	op_plain_offset	(x,	129,	0X20404500);
	create_insn	(x=0X40ABC4);
	op_plain_offset	(x,	1,	0X20404500);
	op_plain_offset	(x,	129,	0X20404500);
	make_array	(0X40ABCE,	0X2);
	create_dword	(0X40ABD0);
	create_dword	(x=0X40ABD4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40ABD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40ABDC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40ABE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40ABE4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40ABE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40ABEC);
	create_insn	(0X40AC14);
	create_insn	(0X40AC16);
	create_insn	(0X40AC34);
	set_cmt	(0X40AC62,	"dwChannel",	0);
	set_cmt	(0X40AC66,	"pXdmad",	0);
	set_cmt	(0X40AC72,	"dwChannel",	0);
	set_cmt	(0X40AC76,	"pXdmad",	0);
	create_insn	(x=0X40AC80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X40ACAC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40ACB0);
	create_insn	(0X40ACC4);
	set_cmt	(0X40ACCC,	"source",	0);
	set_cmt	(0X40ACCE,	"destination",	0);
	set_cmt	(0X40ACD2,	"num",	0);
	set_cmt	(0X40ACF6,	"dwChannel",	0);
	set_cmt	(0X40ACF8,	"pXdmad",	0);
	make_array	(0X40AD02,	0X2);
	create_insn	(0X40AD04);
	create_insn	(x=0X40AD06);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40AD3E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X40AD54);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40AD58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40AD5C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40AD60);
	create_insn	(0X40AD74);
	create_insn	(0X40AD82);
	make_array	(0X40ADB6,	0X2);
	create_dword	(0X40ADB8);
	create_insn	(0X40ADBC);
	create_insn	(0X40ADD0);
	set_cmt	(0X40ADE8,	"dwChannel",	0);
	create_insn	(0X40ADF4);
	set_name	(0X40ADF4,	"DJI_configureUartRxDma");
	create_insn	(x=0X40AE04);
	op_stkvar	(x,	1);
	set_cmt	(0X40AE0A,	"bPeriphID",	0);
	set_cmt	(0X40AE0C,	"bTransfer",	0);
	create_insn	(x=0X40AE0C);
	op_enum		(x,	1,	GetEnum("XDMAD_TRANSFER"),0);
	create_insn	(x=0X40AE20);
	op_stkvar	(x,	1);
	create_insn	(x=0X40AE24);
	op_stkvar	(x,	1);
	create_insn	(x=0X40AE30);
	op_hex		(x,	1);
	set_cmt	(0X40AE64,	"dwXdmaDescCfg",	0);
	set_cmt	(0X40AE70,	"pXdmaParam",	0);
	create_insn	(x=0X40AE70);
	op_stkvar	(x,	1);
	set_cmt	(0X40AE72,	"dwXdmaDescAddr",	0);
	set_cmt	(0X40AE76,	"dwChannel",	0);
	set_cmt	(0X40AE7A,	"pXdmad",	0);
	create_insn	(x=0X40AE84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40AEA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X40AEB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X40AEB4,	0X40AEDA);
	set_name	(0X40AEB4,	"aD_03dUartDRxDm");
	make_array	(0X40AEDA,	0X2);
	create_insn	(0X40AEDC);
	create_insn	(0X40AEFA);
	create_insn	(0X40AF08);
	create_insn	(0X40AF34);
	make_array	(0X40AF4E,	0X2);
	create_insn	(0X40AF50);
	set_name	(0X40AF50,	"DJI_configureUartTxDma");
	create_insn	(x=0X40AF5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X40AF66);
	op_stkvar	(x,	1);
	create_insn	(x=0X40AF6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X40AF76);
	op_stkvar	(x,	1);
	set_cmt	(0X40AF78,	"bTransfer",	0);
	set_cmt	(0X40AF7A,	"bPeriphID",	0);
	create_insn	(x=0X40AF7A);
	op_enum		(x,	1,	GetEnum("XDMAD_TRANSFER"),0);
	create_insn	(x=0X40AF8E);
	op_stkvar	(x,	1);
	set_cmt	(0X40AF96,	"dwXdmaDescCfg",	0);
	set_cmt	(0X40AF98,	"dwXdmaDescAddr",	0);
	set_cmt	(0X40AF9C,	"dwChannel",	0);
	set_cmt	(0X40AFA0,	"pXdmaParam",	0);
	create_insn	(x=0X40AFA0);
	op_stkvar	(x,	1);
	set_cmt	(0X40AFA2,	"pXdmad",	0);
	create_insn	(x=0X40AFAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40AFC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X40AFD6,	0X2);
	create_dword	(x=0X40AFD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X40AFDC,	0X40B002);
	set_name	(0X40AFDC,	"aD_03dUartDTxDm");
	make_array	(0X40B002,	0X2);
	create_insn	(0X40B004);
	create_insn	(0X40B020);
	create_insn	(0X40B032);
	create_insn	(0X40B048);
	create_insn	(x=0X40B04E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40B05E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X40B070);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40B074);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X40B078);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40B07C);
	op_plain_offset	(x,	1,	0X2040248C);
	op_plain_offset	(x,	129,	0X2040248C);
	create_insn	(x=0X40B080);
	op_plain_offset	(x,	1,	0X2040248C);
	op_plain_offset	(x,	129,	0X2040248C);
	create_insn	(x=0X40B084);
	op_plain_offset	(x,	1,	0X2040248C);
	op_plain_offset	(x,	129,	0X2040248C);
	create_insn	(x=0X40B088);
	op_plain_offset	(x,	1,	0X2040248C);
	op_plain_offset	(x,	129,	0X2040248C);
	create_dword	(x=0X40B08C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X40B090);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40B09A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40B0A2);
	op_plain_offset	(x,	1,	0X204069D0);
	op_plain_offset	(x,	129,	0X204069D0);
	create_insn	(x=0X40B0A6);
	op_plain_offset	(x,	1,	0X204069D0);
	op_plain_offset	(x,	129,	0X204069D0);
	create_insn	(x=0X40B0AA);
	op_plain_offset	(x,	1,	0X204069D0);
	op_plain_offset	(x,	129,	0X204069D0);
	create_insn	(x=0X40B0AE);
	op_plain_offset	(x,	1,	0X204069D0);
	op_plain_offset	(x,	129,	0X204069D0);
	create_insn	(x=0X40B0B2);
	op_plain_offset	(x,	1,	0X204069D0);
	op_plain_offset	(x,	129,	0X204069D0);
	create_dword	(x=0X40B0BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40B0C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40B0C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40B0C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40B0CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X40B0D0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X40B0D6,	0X2);
	create_dword	(x=0X40B0D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40B0DC);
	create_insn	(x=0X40B0DE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40B0EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X40B0EE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40B0F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X40B0F2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40B0F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X40B0F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40B0F8);
	op_stkvar	(x,	1);
	set_cmt	(0X40B10E,	"pDescriptors",	0);
	create_insn	(x=0X40B10E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X40B11E,	0X2);
	create_dword	(x=0X40B120);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40B124);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40B128);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40B12C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40B130);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X40B130,	"pDescriptors");
	create_insn	(0X40B134);
	set_name	(0X40B134,	"vcp_init");
	create_insn	(x=0X40B18A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40B194);
	op_stkvar	(x,	1);
	create_insn	(x=0X40B1A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X40B1B2,	0X2);
	create_dword	(0X40B1B4);
	create_dword	(x=0X40B1B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X40B1BC,	0X40B1D8);
	set_name	(0X40B1BC,	"aD_03dVcpInitDX");
	create_insn	(0X40B1D8);
	set_name	(0X40B1D8,	"vcp_40B1D8");
	create_insn	(x=0X40B200);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40B226);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X40B22E);
	set_cmt	(0X40B23E,	"source",	0);
	set_cmt	(0X40B244,	"num",	0);
	set_cmt	(0X40B246,	"destination",	0);
	create_insn	(0X40B264);
	create_insn	(0X40B266);
	create_dword	(x=0X40B274);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X40B278,	0X40B290);
	set_name	(0X40B278,	"aD_03dVcpTimeou");
	create_dword	(x=0X40B290);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40B294);
	create_insn	(x=0X40B298);
	op_stkvar	(x,	1);
	create_insn	(0X40B2A2);
	create_insn	(x=0X40B2BC);
	op_hex		(x,	1);
	create_insn	(x=0X40B2C6);
	op_hex		(x,	1);
	create_insn	(0X40B2CC);
	create_dword	(x=0X40B2E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X40B2E8);
	create_insn	(0X40B2EC);
	create_insn	(x=0X40B2F8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40B33E);
	op_plain_offset	(x,	1,	0X20402DB0);
	op_plain_offset	(x,	129,	0X20402DB0);
	create_insn	(x=0X40B348);
	op_plain_offset	(x,	1,	0X20402DB0);
	op_plain_offset	(x,	129,	0X20402DB0);
	make_array	(0X40B34E,	0X2);
	create_dword	(0X40B350);
	create_dword	(x=0X40B354);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X40B358);
	create_insn	(0X40B35C);
	create_insn	(x=0X40B35E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X40B3C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40B3C4);
	create_insn	(0X40B3D8);
	create_insn	(0X40B3EC);
	create_insn	(0X40B400);
	create_insn	(0X40B414);
	create_insn	(0X40B428);
	create_insn	(0X40B43C);
	create_insn	(0X40B450);
	create_insn	(0X40B464);
	create_insn	(0X40B478);
	create_insn	(0X40B48C);
	create_insn	(0X40B4A0);
	create_insn	(0X40B4B4);
	create_insn	(0X40B4C2);
	create_insn	(0X40B4D4);
	create_insn	(0X40B4D8);
	create_insn	(0X40B4EC);
	create_insn	(0X40B4F0);
	create_insn	(0X40B4FC);
	create_insn	(x=0X40B508);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40B50E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40B51A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X40B51E);
	create_insn	(x=0X40B53A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40B540);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40B55E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X40B564);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40B568);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X40B56C,	0X40B571);
	set_name	(0X40B56C,	"aWarm");
	create_byte	(0X40B571);
	make_array	(0X40B571,	0X3);
	create_strlit	(0X40B574,	0X40B5A0);
	set_name	(0X40B574,	"aD_03dSysCtrlOp");
	create_strlit	(0X40B5A0,	0X40B5A5);
	set_name	(0X40B5A0,	"aCold");
	create_byte	(0X40B5A5);
	make_array	(0X40B5A5,	0X3);
	create_strlit	(0X40B5A8,	0X40B5C2);
	set_name	(0X40B5A8,	"aD_03dBootTypeS");
	make_array	(0X40B5C2,	0X2);
	create_insn	(0X40B5C4);
	create_insn	(x=0X40B5CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X40B5D6,	0X2);
	create_dword	(x=0X40B5D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40B5DC);
	set_cmt	(0X40B5EA,	"switch 6 cases ",	0);
	set_cmt	(0X40B5EE,	"switch jump",	0);
	set_cmt	(0X40B5F2,	"jump table for switch statement",	0);
	create_byte	(0X40B5F2);
	set_name	(0X40B5F2,	"jpt_40B5EE");
	create_byte	(0X40B5F3);
	create_byte	(0X40B5F4);
	create_byte	(0X40B5F5);
	create_byte	(0X40B5F6);
	create_byte	(0X40B5F7);
	set_cmt	(0X40B5F8,	"jumptable 0040B5EE case 0",	1);
	create_insn	(0X40B5F8);
	set_cmt	(0X40B606,	"jumptable 0040B5EE case 1",	1);
	create_insn	(0X40B606);
	set_cmt	(0X40B60A,	"jumptable 0040B5EE case 2",	1);
	create_insn	(0X40B60A);
	create_insn	(0X40B614);
	set_cmt	(0X40B61A,	"jumptable 0040B5EE case 3",	1);
	create_insn	(0X40B61A);
	set_cmt	(0X40B626,	"jumptable 0040B5EE case 4",	1);
	create_insn	(0X40B626);
	set_cmt	(0X40B62E,	"jumptable 0040B5EE case 5",	1);
	create_insn	(0X40B62E);
	set_cmt	(0X40B63A,	"jumptable 0040B5EE default case",	1);
	create_insn	(0X40B63A);
	set_name	(0X40B63A,	"def_40B5EE");
	make_array	(0X40B63E,	0X2);
	create_dword	(0X40B640);
	create_insn	(x=0X40B644);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(0X40B658);
	create_dword	(x=0X40B65C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X40B660);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X40B666,	0X2);
	create_dword	(x=0X40B668);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40B66C);
	make_array	(0X40B692,	0X2);
	create_dword	(0X40B694);
	create_insn	(0X40B698);
	create_insn	(x=0X40B6B2);
	op_hex		(x,	1);
	create_insn	(0X40B6C0);
	create_insn	(x=0X40B6F4);
	op_hex		(x,	1);
	create_insn	(x=0X40B6FA);
	op_hex		(x,	1);
	create_insn	(0X40B70A);
	create_insn	(0X40B726);
	create_insn	(0X40B72E);
	create_insn	(0X40B732);
	create_insn	(0X40B754);
	create_insn	(0X40B75A);
	create_insn	(0X40B790);
	create_insn	(0X40B7A6);
	create_insn	(0X40B7B8);
	create_insn	(0X40B7CA);
	make_array	(0X40B7F2,	0X2);
	create_insn	(0X40B7F4);
	create_insn	(x=0X40B7F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X40B810);
	create_insn	(x=0X40B832);
	op_hex		(x,	1);
	create_insn	(x=0X40B838);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X40B84C);
	create_dword	(x=0X40B858);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40B85C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40B860);
	create_insn	(0X40B8BC);
	create_insn	(0X40B908);
	create_insn	(0X40B91E);
	create_insn	(0X40B926);
	create_insn	(0X40B92E);
	make_array	(0X40B932,	0X2);
	create_dword	(0X40B934);
	create_insn	(0X40B938);
	create_insn	(0X40B942);
	create_insn	(0X40B944);
	create_insn	(0X40B966);
	create_insn	(0X40B96C);
	create_insn	(0X40B97E);
	create_insn	(0X40B994);
	create_insn	(0X40B9C8);
	create_insn	(0X40B9DE);
	make_array	(0X40B9EE,	0X2);
	create_insn	(0X40B9F0);
	create_insn	(x=0X40B9F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40BA02);
	op_plain_offset	(x,	1,	0X20402E68);
	op_plain_offset	(x,	129,	0X20402E68);
	create_insn	(x=0X40BA1A);
	op_plain_offset	(x,	1,	0X20402E68);
	op_plain_offset	(x,	129,	0X20402E68);
	create_dword	(x=0X40BA30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40BA34);
	set_name	(0X40BA34,	"flash_erase_block");
	set_cmt	(0X40BA4A,	"a1",	0);
	set_cmt	(0X40BA4C,	"a2",	0);
	set_cmt	(0X40BA5A,	"a2",	0);
	set_cmt	(0X40BA5C,	"a1",	0);
	create_insn	(0X40BA62);
	create_insn	(x=0X40BA64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40BA6E);
	op_plain_offset	(x,	1,	0X204069F0);
	op_plain_offset	(x,	129,	0X204069F0);
	create_insn	(x=0X40BA72);
	op_plain_offset	(x,	1,	0X204069F0);
	op_plain_offset	(x,	129,	0X204069F0);
	create_insn	(x=0X40BA74);
	op_plain_offset	(x,	1,	0X204069F0);
	op_plain_offset	(x,	129,	0X204069F0);
	create_insn	(x=0X40BA7A);
	op_plain_offset	(x,	1,	0X204069F0);
	op_plain_offset	(x,	129,	0X204069F0);
	create_insn	(x=0X40BA7C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40BA7E);
	op_plain_offset	(x,	1,	0X2042BFD0);
	op_plain_offset	(x,	129,	0X2042BFD0);
	create_insn	(x=0X40BA80);
	op_plain_offset	(x,	1,	0X204069F0);
	op_plain_offset	(x,	129,	0X204069F0);
	create_insn	(x=0X40BA84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40BA86);
	op_plain_offset	(x,	1,	0X204024A4);
	op_plain_offset	(x,	129,	0X204024A4);
	make_array	(0X40BA8A,	0X2);
	create_dword	(x=0X40BA8C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40BA90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40BA94);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40BA98);
	create_insn	(x=0X40BA9A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40BAB4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X40BAFA);
	create_dword	(x=0X40BB10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X40BB14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X40BB32,	0X2);
	create_dword	(x=0X40BB34);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40BB38);
	create_insn	(0X40BB54);
	create_insn	(x=0X40BB56);
	op_hex		(x,	1);
	create_insn	(x=0X40BB5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_dword	(x=0X40BB68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40BB6C);
	set_name	(0X40BB6C,	"usb_ctl");
	create_insn	(x=0X40BB78);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40BB7E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40BB80);
	op_plain_offset	(x,	1,	0X20402DB8);
	op_plain_offset	(x,	129,	0X20402DB8);
	create_insn	(x=0X40BBA6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X40BBB0);
	create_insn	(x=0X40BBC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X40BBCC);
	make_array	(0X40BBCE,	0X2);
	create_dword	(x=0X40BBD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40BBD4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X40BBD8);
	create_strlit	(0X40BBDC,	0X40BC05);
	set_name	(0X40BBDC,	"aD_03dUsbCtrlEn");
	create_byte	(0X40BC05);
	make_array	(0X40BC05,	0X3);
	create_strlit	(0X40BC08,	0X40BC34);
	set_name	(0X40BC08,	"aD_03dUsbCtrlOp");
	create_insn	(0X40BC34);
	set_cmt	(0X40BC42,	"switch 5 cases ",	0);
	set_cmt	(0X40BC46,	"switch jump",	0);
	set_cmt	(0X40BC4A,	"jump table for switch statement",	0);
	create_byte	(0X40BC4A);
	set_name	(0X40BC4A,	"jpt_40BC46");
	create_byte	(0X40BC4B);
	create_byte	(0X40BC4C);
	create_byte	(0X40BC4D);
	create_byte	(0X40BC4E);
	set_cmt	(0X40BC50,	"jumptable 0040BC46 case 0",	1);
	create_insn	(0X40BC50);
	set_cmt	(0X40BC5A,	"jumptable 0040BC46 case 1",	1);
	create_insn	(0X40BC5A);
	create_insn	(0X40BC5E);
	set_cmt	(0X40BC64,	"jumptable 0040BC46 case 2",	1);
	create_insn	(0X40BC64);
	set_cmt	(0X40BC6C,	"jumptable 0040BC46 case 3",	1);
	create_insn	(0X40BC6C);
	set_cmt	(0X40BC74,	"jumptable 0040BC46 case 4",	1);
	create_insn	(0X40BC74);
	create_insn	(0X40BC80);
	set_cmt	(0X40BC84,	"jumptable 0040BC46 default case",	1);
	create_insn	(0X40BC84);
	set_name	(0X40BC84,	"def_40BC46");
	make_array	(0X40BC8A,	0X2);
	create_dword	(0X40BC8C);
	create_insn	(x=0X40BC90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X40BCB0);
	create_dword	(x=0X40BCBC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40BCC0);
	create_insn	(0X40BCDC);
	create_dword	(x=0X40BCF4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40BCF8);
	create_insn	(0X40BD0C);
	create_insn	(0X40BD26);
	make_array	(0X40BD2A,	0X2);
	create_insn	(x=0X40BD2C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40BD36);
	op_plain_offset	(x,	1,	0X20402ED4);
	op_plain_offset	(x,	129,	0X20402ED4);
	create_insn	(x=0X40BD38);
	op_plain_offset	(x,	1,	0X20402ED4);
	op_plain_offset	(x,	129,	0X20402ED4);
	create_insn	(x=0X40BD3E);
	op_plain_offset	(x,	1,	0X20402ED4);
	op_plain_offset	(x,	129,	0X20402ED4);
	create_insn	(x=0X40BD60);
	op_plain_offset	(x,	1,	0X20402ED4);
	op_plain_offset	(x,	129,	0X20402ED4);
	create_insn	(x=0X40BD62);
	op_plain_offset	(x,	1,	0X20402ED4);
	op_plain_offset	(x,	129,	0X20402ED4);
	create_insn	(x=0X40BD6A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X40BD70);
	make_array	(0X40BD76,	0X2);
	create_dword	(x=0X40BD78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40BD7C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X40BD80,	0X40BDAE);
	set_name	(0X40BD80,	"aSTime_outUSetG");
	make_array	(0X40BDAE,	0X2);
	create_insn	(0X40BDB0);
	create_insn	(x=0X40BDB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X40BDB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X40BDBE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40BDC2);
	op_stkvar	(x,	1);
	create_insn	(x=0X40BDC4);
	op_plain_offset	(x,	1,	0X2042C018);
	op_plain_offset	(x,	129,	0X2042C018);
	create_insn	(x=0X40BDD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X40BDD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X40BDDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X40BDE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X40BDEA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40BE06);
	op_stkvar	(x,	1);
	create_insn	(x=0X40BE08);
	op_plain_offset	(x,	1,	0X2042C018);
	op_plain_offset	(x,	129,	0X2042C018);
	create_insn	(x=0X40BE0E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X40BE16,	0X2);
	create_dword	(0X40BE18);
	create_dword	(x=0X40BE1C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X40BE20);
	create_dword	(0X40BE24);
	create_dword	(x=0X40BE28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X40BE2C,	0X40BE42);
	set_name	(0X40BE2C,	"aD_03dComXX");
	make_array	(0X40BE42,	0X2);
	create_insn	(0X40BE44);
	create_insn	(x=0X40BE54);
	op_stkvar	(x,	1);
	create_insn	(x=0X40BE5C);
	op_stkvar	(x,	1);
	create_insn	(0X40BE66);
	create_insn	(x=0X40BE6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X40BE72);
	op_stkvar	(x,	1);
	create_insn	(x=0X40BE74);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X40BE76);
	op_plain_offset	(x,	1,	0X2042C018);
	op_plain_offset	(x,	129,	0X2042C018);
	create_dword	(0X40BE7C);
	create_dword	(0X40BE80);
	create_dword	(0X40BE84);
	create_dword	(x=0X40BE88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40BE8C);
	make_array	(0X40BF0E,	0X2);
	create_insn	(0X40BF10);
	create_insn	(0X40BF2C);
	make_array	(0X40BF32,	0X2);
	create_dword	(x=0X40BF34);
	op_plain_offset	(x,	0,	0X40BF22);
	op_plain_offset	(x,	128,	0X40BF22);
	create_dword	(x=0X40BF38);
	op_plain_offset	(x,	0,	0X40BF32);
	op_plain_offset	(x,	128,	0X40BF32);
	create_insn	(0X40BF3C);
	create_insn	(0X40BF58);
	make_array	(0X40BF5E,	0X2);
	create_dword	(x=0X40BF60);
	op_plain_offset	(x,	0,	0X40BF4E);
	op_plain_offset	(x,	128,	0X40BF4E);
	create_dword	(x=0X40BF64);
	op_plain_offset	(x,	0,	0X40BF5E);
	op_plain_offset	(x,	128,	0X40BF5E);
	create_insn	(0X40BF68);
	create_insn	(0X40BF72);
	make_array	(0X40BF76,	0X2);
	create_dword	(x=0X40BF78);
	make_array	(x,	0X10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X40BFB8);
	make_array	(0X40BFB8,	0X37);
	create_dword	(0X40C094);
	make_array	(0X40C094,	0X3);
	create_dword	(0X40C0A0);
	make_array	(0X40C0A0,	0X3);
	create_dword	(0X40C0AC);
	make_array	(0X40C0AC,	0X3);
	create_dword	(0X40C0B8);
	make_array	(0X40C0B8,	0X3);
	create_dword	(0X40C0C4);
	make_array	(0X40C0C4,	0X3);
	create_dword	(0X40C0D0);
	make_array	(0X40C0D0,	0X3);
	create_dword	(0X40C0DC);
	make_array	(0X40C0DC,	0X3);
	create_dword	(0X40C0E8);
	make_array	(0X40C0E8,	0X3);
	create_dword	(0X40C0F4);
	make_array	(0X40C0F4,	0X3);
	create_dword	(0X40C100);
	make_array	(0X40C100,	0X3);
	create_dword	(0X40C10C);
	make_array	(0X40C10C,	0X3);
	create_dword	(0X40C118);
	make_array	(0X40C118,	0X3);
	create_dword	(0X40C124);
	make_array	(0X40C124,	0X3);
	create_dword	(0X40C130);
	make_array	(0X40C130,	0X3);
	create_dword	(0X40C13C);
	make_array	(0X40C13C,	0X3);
	create_dword	(0X40C148);
	make_array	(0X40C148,	0X3);
	create_dword	(0X40C154);
	make_array	(0X40C154,	0X3);
	create_dword	(0X40C160);
	make_array	(0X40C160,	0X3);
	create_dword	(0X40C16C);
	make_array	(0X40C16C,	0X3);
	create_dword	(0X40C178);
	make_array	(0X40C178,	0X3);
	create_dword	(0X40C184);
	make_array	(0X40C184,	0X3);
	create_dword	(0X40C190);
	make_array	(0X40C190,	0X3);
	create_dword	(0X40C19C);
	make_array	(0X40C19C,	0X3);
	create_dword	(0X40C1A8);
	make_array	(0X40C1A8,	0X3);
	create_dword	(0X40C1B4);
	make_array	(0X40C1B4,	0X3);
	create_dword	(0X40C1C0);
	make_array	(0X40C1C0,	0X3);
	create_dword	(0X40C1CC);
	make_array	(0X40C1CC,	0X3);
	create_dword	(0X40C1D8);
	make_array	(0X40C1D8,	0X3);
	create_dword	(0X40C1E4);
	make_array	(0X40C1E4,	0X3);
	create_dword	(0X40C1F0);
	make_array	(0X40C1F0,	0X3);
	create_dword	(0X40C1FC);
	make_array	(0X40C1FC,	0X3);
	create_dword	(0X40C208);
	make_array	(0X40C208,	0X3);
	create_dword	(0X40C214);
	make_array	(0X40C214,	0X3);
	create_dword	(0X40C220);
	make_array	(0X40C220,	0X3);
	create_dword	(0X40C22C);
	make_array	(0X40C22C,	0X3);
	create_dword	(0X40C238);
	make_array	(0X40C238,	0X3);
	create_dword	(0X40C244);
	make_array	(0X40C244,	0X3);
	create_dword	(0X40C250);
	make_array	(0X40C250,	0X3);
	create_dword	(0X40C25C);
	make_array	(0X40C25C,	0X3);
	create_dword	(0X40C268);
	make_array	(0X40C268,	0X3);
	create_dword	(0X40C274);
	make_array	(0X40C274,	0X3);
	create_dword	(0X40C280);
	make_array	(0X40C280,	0X3);
	create_dword	(0X40C28C);
	make_array	(0X40C28C,	0X3);
	create_dword	(0X40C298);
	make_array	(0X40C298,	0X3);
	create_dword	(0X40C2A4);
	make_array	(0X40C2A4,	0X2);
	create_strlit	(0X40C2AC,	0X40C2C7);
	set_name	(0X40C2AC,	"aXdmad_allocatexdmacchannel");
	create_strlit	(0X40C2C7,	0X40C2DB);
	set_name	(0X40C2C7,	"aXdmad_starttransfer");
	create_dword	(0X40C2DB);
	make_array	(0X40C2DB,	0X2);
	create_byte	(0X40C2E4);
	make_array	(0X40C2E4,	0X158);
	create_word	(0X40C43C);
	create_strlit	(0X40C43E,	0X40C458);
	set_name	(0X40C43E,	"aDjiVcpserial");
	create_dword	(x=0X40C458);
	make_array	(x,	0X4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X40C468);
	create_dword	(x=0X40C46C);
	make_array	(x,	0X4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X40C47C);
	make_array	(0X40C47C,	0X2);
	create_dword	(x=0X40C484);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X40C488);
	create_dword	(x=0X40C48C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X40C490);
	create_dword	(x=0X40C494);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X40C498);
	create_dword	(x=0X40C49C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X40C4A0);
	create_dword	(x=0X40C4A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X40C4A8);
	create_dword	(x=0X40C4AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X40C4B0);
	create_dword	(x=0X40C4B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X40C4B8);
	create_dword	(x=0X40C4BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X40C4C0);
	create_dword	(0X40C4C4);
	create_strlit	(0X40C4C8,	0X40C4EA);
	set_name	(0X40C4C8,	"aWrite_configur");
	create_strlit	(0X40C4EA,	0X40C501);
	set_name	(0X40C4EA,	"aCheck_config_d");
	create_strlit	(0X40C501,	0X40C516);
	set_name	(0X40C501,	"aCheck_configur");
	create_strlit	(0X40C516,	0X40C528);
	set_name	(0X40C516,	"aCheck_loader_f");
	create_strlit	(0X40C528,	0X40C52A);
	set_name	(0X40C528,	"aW");
	create_word	(0X40C52A);
	make_array	(0X40C52A,	0X209);
	create_dword	(0X40C93C);
	create_dword	(0X40CBC0);
	create_byte	(0X40CBC5);
	make_array	(0X40CBC5,	0X3);
	create_byte	(0X40CBC9);
	make_array	(0X40CBC9,	0X3);
	create_byte	(0X40CBCD);
	make_array	(0X40CBCD,	0X3);
	create_byte	(0X40CBD1);
	make_array	(0X40CBD1,	0X3);
	create_byte	(0X40CBD5);
	make_array	(0X40CBD5,	0X3);
	create_byte	(0X40CBD9);
	make_array	(0X40CBD9,	0X3);
	create_byte	(0X40CBDD);
	make_array	(0X40CBDD,	0X3);
	create_byte	(0X40CBE1);
	make_array	(0X40CBE1,	0X3);
	create_byte	(0X40CBE5);
	make_array	(0X40CBE5,	0X3);
	create_byte	(0X40CBE9);
	make_array	(0X40CBE9,	0X3);
	create_byte	(0X40CBED);
	make_array	(0X40CBED,	0X3);
	create_byte	(0X40CBF1);
	make_array	(0X40CBF1,	0X3);
	create_byte	(0X40CBF5);
	make_array	(0X40CBF5,	0X3);
	create_dword	(0X40CBF8);
	make_array	(0X40CBF8,	0X3C);
	create_dword	(0X40CCE8);
	create_dword	(0X40CE18);
	create_dword	(0X40CE1C);
	make_array	(0X40CE1C,	0X12);
	create_dword	(0X40CE64);
	create_byte	(0X40CE69);
	make_array	(0X40CE69,	0X3);
	create_byte	(0X40CE6D);
	make_array	(0X40CE6D,	0X3);
	create_byte	(0X40CE71);
	make_array	(0X40CE71,	0X3);
	create_byte	(0X40CE75);
	make_array	(0X40CE75,	0X3);
	create_byte	(0X40CE79);
	make_array	(0X40CE79,	0X3);
	create_byte	(0X40CE7D);
	make_array	(0X40CE7D,	0X3);
	create_byte	(0X40CE81);
	make_array	(0X40CE81,	0X3);
	create_byte	(0X40CE85);
	make_array	(0X40CE85,	0X3);
	create_word	(0X40CE96);
	create_byte	(0X40CE99);
	make_array	(0X40CE99,	0X3);
	create_byte	(0X40CE9D);
	make_array	(0X40CE9D,	0X3);
	create_byte	(0X40CEA1);
	make_array	(0X40CEA1,	0X3);
	create_byte	(0X40CEA5);
	make_array	(0X40CEA5,	0X3);
	create_byte	(0X40CEA9);
	make_array	(0X40CEA9,	0X3);
	create_byte	(0X40CEAD);
	make_array	(0X40CEAD,	0X3);
	create_dword	(0X40CEB0);
	make_array	(0X40CEB0,	0X4);
	create_dword	(0X40CEC0);
	create_word	(0X40CED6);
	create_byte	(0X40CF69);
	make_array	(0X40CF69,	0X3);
	create_byte	(0X40CF6D);
	make_array	(0X40CF6D,	0X3);
	create_byte	(0X40CF71);
	make_array	(0X40CF71,	0X3);
	create_byte	(0X40CF75);
	make_array	(0X40CF75,	0X3);
	create_byte	(0X40CF79);
	make_array	(0X40CF79,	0X3);
	create_byte	(0X40CF7D);
	make_array	(0X40CF7D,	0X3);
	create_byte	(0X40CF81);
	make_array	(0X40CF81,	0X3);
	create_byte	(0X40CF85);
	make_array	(0X40CF85,	0X3);
	create_byte	(0X40CF89);
	make_array	(0X40CF89,	0X3);
	create_byte	(0X40CF8D);
	make_array	(0X40CF8D,	0X3);
	create_strlit	(0X40CF90,	0X40CF9C);
	set_name	(0X40CF90,	"a__at24_read");
	create_strlit	(0X40CF9C,	0X40CFA9);
	set_name	(0X40CF9C,	"a__at24_write");
	create_strlit	(0X40CFA9,	0X40CFBF);
	set_name	(0X40CFA9,	"aWdg_set_swdg_t");
	create_byte	(0X40CFBF);
	create_strlit	(0X40CFC0,	0X40CFD2);
	set_name	(0X40CFC0,	"aWdt_timeout_ch");
	create_strlit	(0X40CFD2,	0X40CFE4);
	set_name	(0X40CFD2,	"aIwdg_set_time_");
	create_strlit	(0X40CFE4,	0X40CFF8);
	set_name	(0X40CFE4,	"a0123456789abcd");
	create_strlit	(0X40CFF8,	0X40D00C);
	set_name	(0X40CFF8,	"a0123456789ab_0");
	create_dword	(0X40D00C);
	make_array	(0X40D00C,	0X2);
	create_dword	(0X40D014);
	make_array	(0X40D014,	0X3);
	create_dword	(0X40D020);
	make_array	(0X40D020,	0X2);
	create_dword	(0X40D028);
	make_array	(0X40D028,	0X3);
	create_dword	(0X40D034);
	make_array	(0X40D034,	0X3);
	create_dword	(0X40D040);
	make_array	(0X40D040,	0X3);
	create_dword	(0X40D04C);
	make_array	(0X40D04C,	0X3);
	create_dword	(0X40D058);
	make_array	(0X40D058,	0X13);
	create_dword	(0X40D0A4);
	make_array	(0X40D0A4,	0X2);
	make_array	(0X40D0AC,	0X4);
	create_dword	(0X40D0B0);
	make_array	(0X40D0B0,	0X3);
	create_strlit	(0X40D0BC,	0X40D109);
	set_name	(0X40D0BC,	"aD_03dThisBitIn");
	create_byte	(0X40D109);
	make_array	(0X40D109,	0X3);
	create_strlit	(0X40D10C,	0X40D15A);
	set_name	(0X40D10C,	"aD_03dPreciseDa");
	make_array	(0X40D15A,	0X2);
	create_strlit	(0X40D15C,	0X40D1A5);
	set_name	(0X40D15C,	"aD_03dFaultWasD");
	create_byte	(0X40D1A5);
	make_array	(0X40D1A5,	0X3);
	create_strlit	(0X40D1A8,	0X40D1B1);
	set_name	(0X40D1A8,	"aSys_tick");
	create_byte	(0X40D1B1);
	make_array	(0X40D1B1,	0X3);
	create_dword	(x=0X40D1B4);
	make_array	(x,	0X2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X40D1BC);
	create_dword	(x=0X40D1C0);
	make_array	(x,	0X3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X40D1CC);
	create_dword	(x=0X40D1D0);
	make_array	(x,	0X3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X40D1DC);
	create_dword	(x=0X40D1E0);
	make_array	(x,	0X3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X40D1EC);
	create_dword	(x=0X40D1F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(0X40D1F4);
	create_dword	(0X40D1F8);
	make_array	(0X40D1F8,	0X2);
	create_dword	(0X40D200);
	make_array	(0X40D200,	0X5);
	create_dword	(0X40D214);
	make_array	(0X40D214,	0X2);
	create_dword	(0X40D21C);
	make_array	(0X40D21C,	0X26);
	create_dword	(0X40D2B4);
	create_dword	(0X40D2B8);
	make_array	(0X40D2B8,	0X1A);
	create_dword	(0X20400500);
	create_dword	(0X20400654);
	create_byte	(0X20400658);
	create_dword	(0X20400870);
	create_dword	(0X2040087C);
	create_dword	(0X204023EC);
	create_dword	(0X204023F0);
	make_array	(0X204023F4,	0X4);
	create_byte	(0X204023F8);
	create_byte	(0X20402464);
	create_byte	(0X20402465);
	set_name	(0X20402465,	"deviceState");
	create_byte	(0X20402466);
	set_name	(0X20402466,	"previousDeviceState");
	create_word	(0X20402468);
	set_name	(0X20402468,	"data_static_GetDeviceStatus");
	create_word	(0X2040246A);
	MakeStruct	(0X2040246C,	"CDCLineCoding");
	set_name	(0X2040246C,	"lineCoding");
	make_array	(0X20402473,	0XD);
	create_dword	(0X20402480);
	set_name	(0X20402480,	"pDmaLL");
	create_dword	(0X2040248C);
	create_dword	(0X20402490);
	create_dword	(0X20402494);
	create_dword	(0X20402498);
	create_dword	(0X2040249C);
	create_dword	(0X204024A0);
	create_byte	(0X204024A4);
	create_byte	(0X204024A5);
	make_array	(0X204024A6,	0X2);
	create_dword	(0X204024A8);
	create_dword	(0X204024AC);
	create_dword	(0X204024D8);
	create_dword	(0X204024DC);
	create_dword	(0X204024E0);
	create_dword	(0X20402528);
	create_dword	(0X2040252C);
	create_dword	(0X20402530);
	create_dword	(0X20402534);
	create_dword	(0X20402538);
	make_array	(0X2040253C,	0X4);
	create_dword	(0X20402540);
	create_dword	(0X20402544);
	create_dword	(0X20402DB0);
	create_dword	(0X20402DB4);
	create_dword	(0X20402DB8);
	create_dword	(0X20402DBC);
	create_dword	(0X20402DC0);
	create_byte	(0X20402E16);
	create_byte	(0X20402E17);
	create_word	(0X20402E1A);
	create_word	(0X20402E1C);
	create_byte	(0X20402E2C);
	create_dword	(0X20402E60);
	set_name	(0X20402E60,	"curr_time_ticks");
	create_dword	(0X20402E64);
	create_dword	(0X20402E68);
	create_dword	(0X20402E6C);
	create_dword	(0X20402ED8);
	create_dword	(0X20402EDC);
	create_dword	(0X20402EE0);
	make_array	(0X20402EE4,	0XC);
	create_dword	(0X20402F14);
	set_name	(0X20402F14,	"g_xdmad");
	create_byte	(0X204030F9);
	make_array	(0X204030FA,	0X6);
	create_dword	(0X20404504);
	create_dword	(0X2040450C);
	create_dword	(0X20404510);
	create_dword	(0X20404514);
	make_array	(0X20404518,	0X28);
	set_name	(0X2040574C,	"cdcdSerial");
	set_name	(0X20405770,	"endpoints");
	create_byte	(0X20405771);
	create_word	(0X20405772);
	create_dword	(0X204058F0);
	set_name	(0X204058F0,	"dmaLL");
	create_dword	(0X204059B8);
	make_array	(0X204059BC,	0X4);
	create_dword	(0X204059C0);
	create_byte	(0X204069D0);
	create_word	(0X204069D2);
	create_dword	(0X204069D4);
	create_dword	(0X204069D8);
	create_dword	(0X204069DC);
	create_dword	(0X204069E0);
	make_array	(0X204069E4,	0XC);
	MakeStruct	(0X204069F0,	"FlashBlock");
	set_name	(0X204069F0,	"current_block");
	create_dword	(0X20406A0C);
	create_dword	(0X20406A10);
	create_dword	(0X20406A14);
	create_dword	(0X20406A18);
	create_byte	(0X20406A2C);
	make_array	(0X20406A2C,	0X400);
	set_name	(0X20406E7C,	"aesExpandedKey");
	create_byte	(0X20407224);
	create_byte	(0X20407225);
	create_byte	(0X20407226);
	create_dword	(0X20407228);
	create_byte	(0X2040722C);
	create_byte	(0X2040722D);
	create_byte	(0X2040722E);
	create_dword	(0X20407230);
	create_byte	(0X20407234);
	create_dword	(0X2040778C);
	create_dword	(0X20407790);
	create_dword	(0X204078B4);
	create_dword	(0X204078B8);
	create_dword	(0X204079DC);
	create_byte	(0X20407B14);
	MakeStruct	(0X20407BA8,	"UnknStruct02");
	MakeStruct	(0X20407BC8,	"UnknStruct01");
	create_dword	(0X20407BF8);
	make_array	(0X20407BF8,	0XC);
	create_byte	(0X20407C28);
	make_array	(0X20407C28,	0X10);
	set_name	(0X20407C28,	"arr_20407C28");
	create_dword	(0X20407C38);
	make_array	(0X20407C38,	0X17);
	set_name	(0X20407C38,	"arr_20407C38");
	create_byte	(0X20407C98);
	create_dword	(0X204082F4);
	set_name	(0X20421D75,	"CDCDSerial_EventHandler");
	create_dword	(0X2042BFDC);
	create_dword	(0X2042C054);
	make_array	(0X2042C058,	0X8);
	create_byte	(0X2042C528);
	create_word	(0X2042C62A);
	create_word	(0X2042C62C);
}

static Functions_0(void) {

	add_func    (0X400144,0X400148);
	set_func_flags(0X400144,0x480);
	add_func    (0X400210,0X4002A0);
	set_func_flags(0X400210,0x400);
	add_func    (0X4002A0,0X4002C4);
	set_func_flags(0X4002A0,0x400);
	set_frame_size(0X4002A0, 0X18, 0, 0);
	add_func    (0X4002C4,0X4002C8);
	set_func_flags(0X4002C4,0x400);
	set_frame_size(0X4002C4, 0X8, 0, 0);
	add_func    (0X4002DC,0X4002E8);
	set_func_flags(0X4002DC,0x400);
	set_frame_size(0X4002DC, 0X8, 0, 0);
	add_func    (0X4002E8,0X4002EA);
	set_func_flags(0X4002E8,0x440);
	add_func    (0X4002EC,0X40031C);
	set_func_flags(0X4002EC,0x404);
	SetType(0X4002EC, "int __fastcall snprintf_va(char *dst, int len, const char *fmt, int va);");
	set_frame_size(0X4002EC, 0X18, 0, 0);
	add_func    (0X400320,0X400334);
	set_func_flags(0X400320,0x400);
	SetType(0X400320, "int TRACE_printf(char *fmt, ...);");
	set_frame_size(0X400320, 0X18, 0, 0);
	define_local_var(0X400320, 0X400334, "[bp-0X10]", "varg_r0");
	define_local_var(0X400320, 0X400334, "[bp-0XC]", "varg_r1");
	define_local_var(0X400320, 0X400334, "[bp-0X8]", "varg_r2");
	define_local_var(0X400320, 0X400334, "[bp-0X4]", "varg_r3");
	add_func    (0X400338,0X400364);
	set_func_flags(0X400338,0x400);
	set_frame_size(0X400338, 0X10, 0, 0);
	add_func    (0X400364,0X400386);
	set_func_flags(0X400364,0x400);
	set_frame_size(0X400364, 0X10, 0, 0);
	add_func    (0X400386,0X4003D8);
	set_func_flags(0X400386,0x400);
	set_frame_size(0X400386, 0X10, 0, 0);
	add_func    (0X4003D8,0X400440);
	set_func_flags(0X4003D8,0x400);
	set_frame_size(0X4003D8, 0X18, 0, 0);
	add_func    (0X400450,0X4004A6);
	set_func_flags(0X400450,0x400);
	set_frame_size(0X400450, 0X10, 0, 0);
	add_func    (0X4004A6,0X4004C2);
	set_func_flags(0X4004A6,0x400);
	set_frame_size(0X4004A6, 0X10, 0, 0);
	add_func    (0X4004E4,0X400668);
	set_func_flags(0X4004E4,0x400);
	set_frame_size(0X4004E4, 0X28, 0, 0);
	add_func    (0X40066C,0X400682);
	set_func_flags(0X40066C,0x401);
	SetType(0X40066C, "void abort(void);");
	set_frame_size(0X40066C, 0X8, 0, 0);
	add_func    (0X400682,0X4006DA);
	set_func_flags(0X400682,0x400);
	set_frame_size(0X400682, 0X8, 0, 0);
	add_func    (0X4006DA,0X400722);
	set_func_flags(0X4006DA,0x400);
	set_frame_size(0X4006DA, 0XC, 0, 0);
	add_func    (0X400722,0X400760);
	set_func_flags(0X400722,0x400);
	set_frame_size(0X400722, 0X8, 0, 0);
	add_func    (0X400760,0X400778);
	set_func_flags(0X400760,0x400);
	add_func    (0X400778,0X400866);
	set_func_flags(0X400778,0x404);
	SetType(0X400778, "void *__cdecl memcpy(void *destination, const void *source, size_t num);");
	set_frame_size(0X400778, 0, 0, 0);
	add_func    (0X400866,0X4008AA);
	set_func_flags(0X400866,0x400);
	add_func    (0X4008AA,0X4008F8);
	set_func_flags(0X4008AA,0x404);
	set_frame_size(0X4008AA, 0X4, 0, 0);
	add_func    (0X4008F8,0X400960);
	set_func_flags(0X4008F8,0x400);
	add_func    (0X400960,0X400972);
	set_func_flags(0X400960,0x400);
	add_func    (0X400972,0X400984);
	set_func_flags(0X400972,0x400);
	add_func    (0X400984,0X400A36);
	set_func_flags(0X400984,0x400);
	set_frame_size(0X400984, 0X20, 0, 0);
	add_func    (0X400A60,0X400A6A);
	set_func_flags(0X400A60,0x400);
	add_func    (0X400A6A,0X400A8A);
	set_func_flags(0X400A6A,0x400);
	SetType(0X400A6A, "int __fastcall print_sub_400A6A(const char *fmt, char *dst, int va, char (__cdecl *cb)(char a1, void *a2));");
	set_frame_size(0X400A6A, 0X40, 0, 0);
	add_func    (0X400A90,0X400A9A);
	set_func_flags(0X400A90,0x400);
	add_func    (0X400A9A,0X400AAA);
	set_func_flags(0X400A9A,0x400);
	add_func    (0X400AAA,0X400ABE);
	set_func_flags(0X400AAA,0x400);
	set_frame_size(0X400AAA, 0X8, 0, 0);
	add_func    (0X400AD8,0X400AF8);
	set_func_flags(0X400AD8,0x400);
	SetType(0X400AD8, "signed int __fastcall TRACE_printf_va(char *fmt, int a2, int args);");
	set_frame_size(0X400AD8, 0X10, 0, 0);
	add_func    (0X400AFC,0X400BB2);
	set_func_flags(0X400AFC,0x400);
	set_frame_size(0X400AFC, 0X38, 0, 0);
	add_func    (0X400BB8,0X400C24);
	set_func_flags(0X400BB8,0x400);
	set_frame_size(0X400BB8, 0X18, 0, 0);
	add_func    (0X400C34,0X400C78);
	set_func_flags(0X400C34,0x400);
	set_frame_size(0X400C34, 0X8, 0, 0);
	add_func    (0X400C78,0X400C90);
	set_func_flags(0X400C78,0x400);
	set_frame_size(0X400C78, 0X8, 0, 0);
	add_func    (0X400CA4,0X400CB2);
	set_func_flags(0X400CA4,0x400);
	set_frame_size(0X400CA4, 0X8, 0, 0);
	add_func    (0X400CB2,0X400D3C);
	set_func_flags(0X400CB2,0x400);
	set_frame_size(0X400CB2, 0XC, 0, 0);
	add_func    (0X400D3E,0X400EEA);
	set_func_flags(0X400D3E,0x400);
	set_frame_size(0X400D3E, 0X60, 0, 0);
	add_func    (0X400EEA,0X401156);
	set_func_flags(0X400EEA,0x400);
	set_frame_size(0X400EEA, 0X68, 0, 0);
	add_func    (0X401156,0X40116A);
	set_func_flags(0X401156,0x400);
	set_frame_size(0X401156, 0X8, 0, 0);
	add_func    (0X401182,0X4011C2);
	set_func_flags(0X401182,0x400);
	set_frame_size(0X401182, 0X10, 0, 0);
	add_func    (0X4011C2,0X4011CC);
	set_func_flags(0X4011C2,0x400);
	add_func    (0X4011CC,0X4011DA);
	set_func_flags(0X4011CC,0x400);
	set_frame_size(0X4011CC, 0X8, 0, 0);
	add_func    (0X4011FC,0X401206);
	set_func_flags(0X4011FC,0x400);
	set_frame_size(0X4011FC, 0X8, 0, 0);
	add_func    (0X40120C,0X401210);
	set_func_flags(0X40120C,0x400);
	add_func    (0X401214,0X401284);
	set_func_flags(0X401214,0x400);
	set_frame_size(0X401214, 0X18, 0, 0);
	add_func    (0X401284,0X401294);
	set_func_flags(0X401284,0x400);
	add_func    (0X401294,0X40136C);
	set_func_flags(0X401294,0x400);
	set_frame_size(0X401294, 0X48, 0, 0);
	add_func    (0X401370,0X401382);
	set_func_flags(0X401370,0x400);
	set_frame_size(0X401370, 0X8, 0, 0);
	add_func    (0X401382,0X4013B4);
	set_func_flags(0X401382,0x400);
	set_frame_size(0X401382, 0X10, 0, 0);
	add_func    (0X4013B4,0X401498);
	set_func_flags(0X4013B4,0x400);
	add_func    (0X401498,0X401750);
	set_func_flags(0X401498,0x400);
	set_frame_size(0X401498, 0X10, 0, 0);
	add_func    (0X4017D0,0X401896);
	set_func_flags(0X4017D0,0x400);
	add_func    (0X401896,0X4018BE);
	set_func_flags(0X401896,0x400);
	set_frame_size(0X401896, 0X18, 0, 0);
	add_func    (0X4018BE,0X4018E6);
	set_func_flags(0X4018BE,0x400);
	set_frame_size(0X4018BE, 0X18, 0, 0);
	add_func    (0X4018E6,0X401B2A);
	set_func_flags(0X4018E6,0x400);
	add_func    (0X401B2A,0X401B2E);
	set_func_flags(0X401B2A,0x400);
	add_func    (0X401B2E,0X401B44);
	set_func_flags(0X401B2E,0x400);
	set_frame_size(0X401B2E, 0X4, 0, 0);
	add_func    (0X401B44,0X401B7C);
	set_func_flags(0X401B44,0x404);
	SetType(0X401B44, "void BusFault_Handler(void);");
	set_func_cmt(0X401B44,	"Default BusFault interrupt handler.", 1);
	set_frame_size(0X401B44, 0X8, 0, 0);
	add_func    (0X401BA8,0X401BC6);
	set_func_flags(0X401BA8,0x400);
	set_frame_size(0X401BA8, 0X8, 0, 0);
	add_func    (0X401BC6,0X401BE8);
	set_func_flags(0X401BC6,0x400);
	SetType(0X401BC6, "void __cdecl CDCDSerialDriver_Initialize(const struct USBDDriverDescriptors *pDescriptors);");
	set_func_cmt(0X401BC6,	"Initializes the USB Device CDC serial driver & USBD Driver.", 1);
	set_frame_size(0X401BC6, 0X10, 0, 0);
	add_func    (0X401BE8,0X401C10);
	set_func_flags(0X401BE8,0x404);
	SetType(0X401BE8, "void __cdecl CDCDSerialDriver_RequestHandler(const struct USBGenericRequest *request);");
	set_func_cmt(0X401BE8,	" * Handles CDC-specific SETUP requests. Should be called from a re-implementation of USBDCallbacks_RequestReceived() method.\n", 1);
	set_frame_size(0X401BE8, 0X10, 0, 0);
	add_func    (0X401C10,0X401C3E);
	set_func_flags(0X401C10,0x404);
	SetType(0X401C10, "void __cdecl CDCDSerialPort_Initialize(struct CDCDSerialPort *pCdcd, struct USBDDriver *pUsbd, void *(*fEventHandler)(void), void *pArg, uint8_t firstInterface, uint8_t numInterface);");
	set_func_cmt(0X401C10,	"Initializes the USB Device CDC serial port function.", 1);
	set_frame_size(0X401C10, 0X10, 0, 0);
	define_local_var(0X401C10, 0X401C3E, "[bp-0X10]", "databits");
	define_local_var(0X401C10, 0X401C3E, "[bp+0]", "firstInterface");
	define_local_var(0X401C10, 0X401C3E, "[bp+0X4]", "numInterface");
	add_func    (0X401C40,0X401C5A);
	set_func_flags(0X401C40,0x400);
	set_frame_size(0X401C40, 0X18, 0, 0);
	add_func    (0X401C60,0X401C74);
	set_func_flags(0X401C60,0x400);
	set_frame_size(0X401C60, 0X10, 0, 0);
	define_local_var(0X401C60, 0X401C74, "[bp-0X10]", "pArgument");
	add_func    (0X401C74,0X401CF0);
	set_func_flags(0X401C74,0x404);
	SetType(0X401C74, "uint32_t __cdecl CDCDSerialPort_RequestHandler(struct CDCDSerialPort *pCdcd, const struct USBGenericRequest *request);");
	set_func_cmt(0X401C74,	"Handles CDC-specific SETUP requests. Should be called from a re-implementation of USBDCallbacks_RequestReceived() method.\n", 1);
	set_frame_size(0X401C74, 0X10, 0, 0);
	define_local_var(0X401C74, 0X401CF0, "[bp-0X10]", "pArgument");
	set_name(0X401CAC, "_SetLineCoding", SN_LOCAL);
	set_name(0X401CBC, "_GetLineCoding", SN_LOCAL);
	set_name(0X401CCE, "_SetControlLineState", SN_LOCAL);
	add_func    (0X401CF8,0X401D0C);
	set_func_flags(0X401CF8,0x400);
	set_frame_size(0X401CF8, 0X10, 0, 0);
	define_local_var(0X401CF8, 0X401D0C, "[bp-0X10]", "pArgument");
	add_func    (0X401D0C,0X401D18);
	set_func_flags(0X401D0C,0x400);
	add_func    (0X401D1C,0X401D44);
	set_func_flags(0X401D1C,0x400);
	add_func    (0X401D74,0X401D9C);
	set_func_flags(0X401D74,0x400);
	set_frame_size(0X401D74, 0X8, 0, 0);
	add_func    (0X401D9C,0X401DB4);
	set_func_flags(0X401D9C,0x404);
	SetType(0X401D9C, "void __cdecl CDCDSerial_Initialize(struct USBDDriver *pUsbd, uint8_t bInterfaceNb);");
	set_func_cmt(0X401D9C,	"Initializes the USB Device CDC serial driver & USBD Driver.", 1);
	set_frame_size(0X401D9C, 0X10, 0, 0);
	add_func    (0X401DBC,0X401E1E);
	set_func_flags(0X401DBC,0x400);
	set_frame_size(0X401DBC, 0X10, 0, 0);
	add_func    (0X401E64,0X401E78);
	set_func_flags(0X401E64,0x400);
	set_frame_size(0X401E64, 0X10, 0, 0);
	add_func    (0X401E7C,0X401E84);
	set_func_flags(0X401E7C,0x404);
	SetType(0X401E7C, "uint32_t __cdecl CDCDSerial_RequestHandler(const struct USBGenericRequest *request);");
	set_func_cmt(0X401E7C,	"Handles CDC-specific SETUP requests. Should be called from a re-implementation of USBDCallbacks_RequestReceived() method.\n", 1);
	set_frame_size(0X401E7C, 0, 0, 0);
	add_func    (0X401E88,0X401EB0);
	set_func_flags(0X401E88,0x400);
	add_func    (0X401ED8,0X401EEC);
	set_func_flags(0X401ED8,0x400);
	set_frame_size(0X401ED8, 0X10, 0, 0);
	add_func    (0X401EF0,0X401EFE);
	set_func_flags(0X401EF0,0x404);
	SetType(0X401EF0, "void __cdecl CDCLineCoding_Initialize(struct CDCLineCoding *lineCoding, uint32_t bitrate, uint8_t stopbits, uint8_t parity, uint8_t databits);");
	set_func_cmt(0X401EF0,	"Initializes the bitrate, number of stop bits, parity checking and number of data bits of a CDCLineCoding object.\n", 1);
	set_frame_size(0X401EF0, 0X8, 0, 0);
	define_local_var(0X401EF0, 0X401EFE, "[bp+0]", "databits");
	add_func    (0X401EFE,0X401F02);
	set_func_flags(0X401EFE,0x400);
	SetType(0X401EFE, "void do_disable_irq(void);");
	add_func    (0X401F02,0X401F06);
	set_func_flags(0X401F02,0x400);
	SetType(0X401F02, "void do_enable_irq(void);");
	add_func    (0X401F06,0X401F26);
	set_func_flags(0X401F06,0x400);
	add_func    (0X401F26,0X401F52);
	set_func_flags(0X401F26,0x400);
	set_frame_size(0X401F26, 0X8, 0, 0);
	add_func    (0X401F54,0X401F92);
	set_func_flags(0X401F54,0x400);
	set_frame_size(0X401F54, 0X10, 0, 0);
	add_func    (0X401F98,0X401FBA);
	set_func_flags(0X401F98,0x400);
	set_frame_size(0X401F98, 0X8, 0, 0);
	add_func    (0X401FBA,0X402022);
	set_func_flags(0X401FBA,0x400);
	set_frame_size(0X401FBA, 0X20, 0, 0);
	define_local_var(0X401FBA, 0X402022, "[bp-0X1C]", "a1");
	define_local_var(0X401FBA, 0X402022, "[bp-0X18]", "a3");
	add_func    (0X402022,0X402034);
	set_func_flags(0X402022,0x400);
	add_func    (0X402034,0X402046);
	set_func_flags(0X402034,0x400);
	add_func    (0X402046,0X402048);
	set_func_flags(0X402046,0x401);
	add_func    (0X402048,0X40206C);
	set_func_flags(0X402048,0x400);
	set_frame_size(0X402048, 0X8, 0, 0);
	add_func    (0X40206C,0X402076);
	set_func_flags(0X40206C,0x400);
	add_func    (0X402076,0X40207A);
	set_func_flags(0X402076,0x400);
	add_func    (0X40207C,0X4020BA);
	set_func_flags(0X40207C,0x400);
	set_frame_size(0X40207C, 0X8, 0, 0);
	add_func    (0X4020C4,0X4020D8);
	set_func_flags(0X4020C4,0x400);
	add_func    (0X4020D8,0X402106);
	set_func_flags(0X4020D8,0x400);
	SetType(0X4020D8, "void __fastcall flash_sub_4020D8(__int32 *a1, unsigned int a2, int16_t *a3, int16_t *a4);");
	set_frame_size(0X4020D8, 0X8, 0, 0);
	add_func    (0X40210C,0X40212C);
	set_func_flags(0X40210C,0x400);
	set_frame_size(0X40210C, 0X10, 0, 0);
	define_local_var(0X40210C, 0X40212C, "[bp-0XC]", "a3");
	define_local_var(0X40210C, 0X40212C, "[bp-0X8]", "a4");
	add_func    (0X402130,0X402140);
	set_func_flags(0X402130,0x400);
	set_frame_size(0X402130, 0X8, 0, 0);
	add_func    (0X402148,0X40217A);
	set_func_flags(0X402148,0x400);
	set_frame_size(0X402148, 0X10, 0, 0);
	add_func    (0X402184,0X4021AC);
	set_func_flags(0X402184,0x400);
	set_frame_size(0X402184, 0X8, 0, 0);
	add_func    (0X4021B4,0X402218);
	set_func_flags(0X4021B4,0x400);
	set_frame_size(0X4021B4, 0X28, 0, 0);
	define_local_var(0X4021B4, 0X402218, "[bp-0X24]", "a3");
	define_local_var(0X4021B4, 0X402218, "[bp-0X20]", "a2");
	define_local_var(0X4021B4, 0X402218, "[bp-0X18]", "a1");
	add_func    (0X40221C,0X4022E6);
	set_func_flags(0X40221C,0x400);
	SetType(0X40221C, "int __fastcall flash_write2(unsigned int a1, int a2, int a3, int a4);");
	set_frame_size(0X40221C, 0X28, 0, 0);
	define_local_var(0X40221C, 0X4022E6, "[bp-0X28]", "source");
	define_local_var(0X40221C, 0X4022E6, "[bp-0X24]", "a4");
	define_local_var(0X40221C, 0X4022E6, "[bp-0X20]", "a3");
	define_local_var(0X40221C, 0X4022E6, "[bp-0X1C]", "a1");
	add_func    (0X4022F0,0X402438);
	set_func_flags(0X4022F0,0x404);
	set_frame_size(0X4022F0, 0X40, 0, 0);
	define_local_var(0X4022F0, 0X402438, "[bp-0X40]", "pArgument");
	add_func    (0X40247C,0X4024C4);
	set_func_flags(0X40247C,0x404);
	set_frame_size(0X40247C, 0X18, 0, 0);
	define_local_var(0X40247C, 0X4024C4, "[bp-0X18]", "pArgument");
	add_func    (0X4024C8,0X402500);
	set_func_flags(0X4024C8,0x404);
	SetType(0X4024C8, "void HardFault_Handler(void);");
	set_func_cmt(0X4024C8,	"Default HardFault interrupt handler.", 1);
	set_frame_size(0X4024C8, 0X8, 0, 0);
	add_func    (0X40252C,0X402806);
	set_func_flags(0X40252C,0x404);
	SetType(0X40252C, "void static HardFault_reason(void);");
	set_func_cmt(0X40252C,	"If Other Faults are enabled then HardFault error will look for those errors to give more detail about fault", 1);
	set_frame_size(0X40252C, 0X18, 0, 0);
	add_func    (0X402A5C,0X402AB8);
	set_func_flags(0X402A5C,0x400);
	set_frame_size(0X402A5C, 0X18, 0, 0);
	add_func    (0X402AB8,0X402B5C);
	set_func_flags(0X402AB8,0x400);
	set_frame_size(0X402AB8, 0X24, 0, 0);
	add_func    (0X402B5C,0X402B8E);
	set_func_flags(0X402B5C,0x400);
	add_func    (0X402B90,0X402BAC);
	set_func_flags(0X402B90,0x400);
	set_frame_size(0X402B90, 0XC, 0, 0);
	add_func    (0X402BB0,0X402C3A);
	set_func_flags(0X402BB0,0x400);
	set_frame_size(0X402BB0, 0X14, 0, 0);
	add_func    (0X402C40,0X402CCC);
	set_func_flags(0X402C40,0x400);
	set_frame_size(0X402C40, 0X14, 0, 0);
	add_func    (0X402CD4,0X402CD8);
	set_func_flags(0X402CD4,0x480);
	add_func    (0X402CD8,0X402CDE);
	set_func_flags(0X402CD8,0x400);
	add_func    (0X402CDE,0X402CE4);
	set_func_flags(0X402CDE,0x400);
	add_func    (0X402CE4,0X402CEA);
	set_func_flags(0X402CE4,0x400);
	add_func    (0X402CEA,0X402CF0);
	set_func_flags(0X402CEA,0x400);
	add_func    (0X402CF0,0X402D36);
	set_func_flags(0X402CF0,0x400);
	set_frame_size(0X402CF0, 0X14, 0, 0);
	add_func    (0X402D36,0X402D42);
	set_func_flags(0X402D36,0x400);
	add_func    (0X402D44,0X402EF0);
	set_func_flags(0X402D44,0x400);
	set_frame_size(0X402D44, 0X18, 0, 0);
	add_func    (0X402F00,0X402F10);
	set_func_flags(0X402F00,0x400);
	add_func    (0X402F10,0X402F20);
	set_func_flags(0X402F10,0x400);
	add_func    (0X402F20,0X402F32);
	set_func_flags(0X402F20,0x400);
	add_func    (0X402F32,0X402F52);
	set_func_flags(0X402F32,0x400);
	set_frame_size(0X402F32, 0X10, 0, 0);
	add_func    (0X402F52,0X402F84);
	set_func_flags(0X402F52,0x400);
	set_frame_size(0X402F52, 0X10, 0, 0);
	add_func    (0X402F84,0X402FCA);
	set_func_flags(0X402F84,0x400);
	set_frame_size(0X402F84, 0X18, 0, 0);
	add_func    (0X402FD0,0X402FEC);
	set_func_flags(0X402FD0,0x400);
	add_func    (0X402FF4,0X403662);
	set_func_flags(0X402FF4,0x400);
	set_frame_size(0X402FF4, 0X118, 0, 0);
	add_func    (0X4036B0,0X403730);
	set_func_flags(0X4036B0,0x400);
	set_frame_size(0X4036B0, 0X20, 0, 0);
	add_func    (0X403734,0X403768);
	set_func_flags(0X403734,0x404);
	SetType(0X403734, "void MemManage_Handler(void);");
	set_func_cmt(0X403734,	"Default MemManage interrupt handler.", 1);
	set_frame_size(0X403734, 0X8, 0, 0);
	add_func    (0X4037A4,0X4037A6);
	set_func_flags(0X4037A4,0x401);
	add_func    (0X4037A6,0X4037BC);
	set_func_flags(0X4037A6,0x404);
	set_frame_size(0X4037A6, 0, 0, 0);
	add_func    (0X4037BC,0X4037D8);
	set_func_flags(0X4037BC,0x400);
	add_func    (0X4037DC,0X4037E2);
	set_func_flags(0X4037DC,0x400);
	add_func    (0X4037E2,0X4037E8);
	set_func_flags(0X4037E2,0x400);
	add_func    (0X4037E8,0X4037EE);
	set_func_flags(0X4037E8,0x400);
	add_func    (0X4037EE,0X4037F4);
	set_func_flags(0X4037EE,0x400);
	add_func    (0X4037F4,0X4037FA);
	set_func_flags(0X4037F4,0x400);
	add_func    (0X4037FA,0X403802);
	set_func_flags(0X4037FA,0x400);
	add_func    (0X403802,0X40392A);
	set_func_flags(0X403802,0x400);
	set_frame_size(0X403802, 0X10, 0, 0);
	add_func    (0X40392A,0X403946);
	set_func_flags(0X40392A,0x400);
	add_func    (0X403946,0X40394E);
	set_func_flags(0X403946,0x400);
	add_func    (0X403950,0X403986);
	set_func_flags(0X403950,0x400);
	set_frame_size(0X403950, 0X8, 0, 0);
	add_func    (0X403990,0X4039B2);
	set_func_flags(0X403990,0x400);
	add_func    (0X4039B8,0X4039F2);
	set_func_flags(0X4039B8,0x400);
	set_frame_size(0X4039B8, 0X8, 0, 0);
	add_func    (0X4039F8,0X403A32);
	set_func_flags(0X4039F8,0x404);
	set_frame_size(0X4039F8, 0X8, 0, 0);
	add_func    (0X403A38,0X403A5E);
	set_func_flags(0X403A38,0x404);
	set_frame_size(0X403A38, 0X8, 0, 0);
	add_func    (0X403A64,0X403A6A);
	set_func_flags(0X403A64,0x400);
	add_func    (0X403A6A,0X403A70);
	set_func_flags(0X403A6A,0x400);
	add_func    (0X403A70,0X403A76);
	set_func_flags(0X403A70,0x400);
	add_func    (0X403A78,0X403AC4);
	set_func_flags(0X403A78,0x400);
	add_func    (0X403AE0,0X403AE6);
	set_func_flags(0X403AE0,0x400);
	add_func    (0X403AE6,0X403AEC);
	set_func_flags(0X403AE6,0x400);
	add_func    (0X403AEC,0X403B4E);
	set_func_flags(0X403AEC,0x404);
	set_frame_size(0X403AEC, 0X58, 0, 0);
	define_local_var(0X403AEC, 0X403B4E, "[bp-0X58]", "pArgument");
	add_func    (0X403B50,0X403B68);
	set_func_flags(0X403B50,0x400);
	set_frame_size(0X403B50, 0X8, 0, 0);
	add_func    (0X403B6C,0X403B78);
	set_func_flags(0X403B6C,0x400);
	add_func    (0X403B7C,0X403BEC);
	set_func_flags(0X403B7C,0x400);
	add_func    (0X403C10,0X403C16);
	set_func_flags(0X403C10,0x400);
	add_func    (0X403C16,0X403C1C);
	set_func_flags(0X403C16,0x400);
	add_func    (0X403C1C,0X403C22);
	set_func_flags(0X403C1C,0x400);
	add_func    (0X403C22,0X403C28);
	set_func_flags(0X403C22,0x400);
	add_func    (0X403C28,0X403C2E);
	set_func_flags(0X403C28,0x400);
	add_func    (0X403C2E,0X403C34);
	set_func_flags(0X403C2E,0x400);
	add_func    (0X403C34,0X403C3A);
	set_func_flags(0X403C34,0x400);
	add_func    (0X403C3A,0X403C40);
	set_func_flags(0X403C3A,0x400);
	add_func    (0X403C40,0X403C46);
	set_func_flags(0X403C40,0x400);
	add_func    (0X403C46,0X403C4C);
	set_func_flags(0X403C46,0x400);
	add_func    (0X403C4C,0X403C52);
	set_func_flags(0X403C4C,0x400);
	add_func    (0X403C52,0X403C58);
	set_func_flags(0X403C52,0x400);
	add_func    (0X403C58,0X403C5E);
	set_func_flags(0X403C58,0x400);
	add_func    (0X403C5E,0X403C64);
	set_func_flags(0X403C5E,0x400);
	add_func    (0X403C64,0X403C6A);
	set_func_flags(0X403C64,0x400);
	add_func    (0X403C6A,0X403CC0);
	set_func_flags(0X403C6A,0x400);
	set_frame_size(0X403C6A, 0X18, 0, 0);
	add_func    (0X403CC0,0X403CD2);
	set_func_flags(0X403CC0,0x400);
	set_frame_size(0X403CC0, 0X8, 0, 0);
	add_func    (0X403CD8,0X403CEA);
	set_func_flags(0X403CD8,0x400);
	set_frame_size(0X403CD8, 0X8, 0, 0);
	add_func    (0X403CF0,0X403D00);
	set_func_flags(0X403CF0,0x400);
	set_frame_size(0X403CF0, 0X8, 0, 0);
	add_func    (0X403D00,0X403D0E);
	set_func_flags(0X403D00,0x400);
	set_frame_size(0X403D00, 0X8, 0, 0);
	add_func    (0X403D0E,0X403D1C);
	set_func_flags(0X403D0E,0x400);
	set_frame_size(0X403D0E, 0X8, 0, 0);
	add_func    (0X403D1C,0X403D3A);
	set_func_flags(0X403D1C,0x400);
	set_frame_size(0X403D1C, 0X10, 0, 0);
	define_local_var(0X403D1C, 0X403D3A, "[bp-0X10]", "pArgument");
	add_func    (0X403D3A,0X403D40);
	set_func_flags(0X403D3A,0x400);
	add_func    (0X403D40,0X403D46);
	set_func_flags(0X403D40,0x400);
	add_func    (0X403D46,0X403D4C);
	set_func_flags(0X403D46,0x400);
	add_func    (0X403D4C,0X403D52);
	set_func_flags(0X403D4C,0x400);
	add_func    (0X403D52,0X403D58);
	set_func_flags(0X403D52,0x400);
	add_func    (0X403D58,0X403D78);
	set_func_flags(0X403D58,0x400);
	set_frame_size(0X403D58, 0X8, 0, 0);
	add_func    (0X403D78,0X403D7C);
	set_func_flags(0X403D78,0x400);
	add_func    (0X403D7C,0X403D80);
	set_func_flags(0X403D7C,0x400);
	add_func    (0X403D80,0X403D84);
	set_func_flags(0X403D80,0x400);
	add_func    (0X403D84,0X403D88);
	set_func_flags(0X403D84,0x400);
	add_func    (0X403D88,0X403D90);
	set_func_flags(0X403D88,0x400);
	add_func    (0X403D90,0X403D9C);
	set_func_flags(0X403D90,0x400);
	add_func    (0X403D9C,0X403DA8);
	set_func_flags(0X403D9C,0x400);
	add_func    (0X403DA8,0X403E8E);
	set_func_flags(0X403DA8,0x400);
	set_frame_size(0X403DA8, 0X20, 0, 0);
	add_func    (0X403E98,0X403F44);
	set_func_flags(0X403E98,0x400);
	set_frame_size(0X403E98, 0X18, 0, 0);
	add_func    (0X403F6C,0X403FA6);
	set_func_flags(0X403F6C,0x404);
	set_frame_size(0X403F6C, 0X10, 0, 0);
	add_func    (0X403FAC,0X40401E);
	set_func_flags(0X403FAC,0x404);
	set_frame_size(0X403FAC, 0X10, 0, 0);
	add_func    (0X404024,0X4042DC);
	set_func_flags(0X404024,0x404);
	SetType(0X404024, "void __cdecl static UDPHS_EndpointHandler(uint8_t bEndpoint);");
	set_func_cmt(0X404024,	"Endpoint interrupt handler.", 1);
	set_frame_size(0X404024, 0X38, 0, 0);
	add_func    (0X40431C,0X40436E);
	set_func_flags(0X40431C,0x400);
	set_frame_size(0X40431C, 0X8, 0, 0);
	add_func    (0X404370,0X40440E);
	set_func_flags(0X404370,0x400);
	set_frame_size(0X404370, 0X18, 0, 0);
	add_func    (0X404418,0X40441E);
	set_func_flags(0X404418,0x400);
	add_func    (0X40441E,0X404424);
	set_func_flags(0X40441E,0x400);
	add_func    (0X404424,0X40442A);
	set_func_flags(0X404424,0x400);
	add_func    (0X40442A,0X40444A);
	set_func_flags(0X40442A,0x404);
	SetType(0X40442A, "void __cdecl USART_Configure(struct Usart *pUsart, uint32_t mode, uint32_t baudrate, uint32_t masterClock);");
	set_func_cmt(0X40442A,	"Configures an USART peripheral with the specified parameters.", 1);
	set_frame_size(0X40442A, 0X8, 0, 0);
	add_func    (0X40444A,0X40444E);
	set_func_flags(0X40444A,0x400);
	add_func    (0X40444E,0X404452);
	set_func_flags(0X40444E,0x400);
	add_func    (0X404452,0X404456);
	set_func_flags(0X404452,0x400);
	add_func    (0X404456,0X40445A);
	set_func_flags(0X404456,0x400);
	add_func    (0X40445C,0X404512);
	set_func_flags(0X40445C,0x404);
	SetType(0X40445C, "void __cdecl USART_SetBaudrate(struct Usart *pUsart, uint8_t OverSamp, uint32_t baudrate, uint32_t masterClock);");
	set_func_cmt(0X40445C,	"Configures an USART baudrate.", 1);
	set_frame_size(0X40445C, 0X20, 0, 0);
	add_func    (0X404534,0X404540);
	set_func_flags(0X404534,0x400);
	add_func    (0X404540,0X40454C);
	set_func_flags(0X404540,0x400);
	add_func    (0X40454C,0X404550);
	set_func_flags(0X40454C,0x404);
	set_frame_size(0X40454C, 0, 0, 0);
	add_func    (0X404550,0X40455E);
	set_func_flags(0X404550,0x404);
	set_frame_size(0X404550, 0, 0, 0);
	add_func    (0X40455E,0X4045A2);
	set_func_flags(0X40455E,0x404);
	set_frame_size(0X40455E, 0XC, 0, 0);
	add_func    (0X4045A2,0X4045A4);
	set_func_flags(0X4045A2,0x400);
	add_func    (0X4045E8,0X4045EA);
	set_func_flags(0X4045E8,0x440);
	add_func    (0X4045EC,0X404622);
	set_func_flags(0X4045EC,0x400);
	set_frame_size(0X4045EC, 0X8, 0, 0);
	add_func    (0X404644,0X40467A);
	set_func_flags(0X404644,0x400);
	set_frame_size(0X404644, 0X8, 0, 0);
	add_func    (0X4046A0,0X4046C8);
	set_func_flags(0X4046A0,0x400);
	set_frame_size(0X4046A0, 0, 0, 0);
	add_func    (0X4046E4,0X4046E6);
	set_func_flags(0X4046E4,0x400);
	set_frame_size(0X4046E4, 0, 0, 0);
	add_func    (0X4046E6,0X4046FA);
	set_func_flags(0X4046E6,0x404);
	SetType(0X4046E6, "struct USBConfigurationDescriptor *__cdecl USBDDriver_GetCfgDescriptors(struct USBDDriver *pDriver, uint8_t cfgNum);");
	set_func_cmt(0X4046E6,	"Returns configuration descriptor list.", 1);
	set_frame_size(0X4046E6, 0X8, 0, 0);
	add_func    (0X4046FA,0X404706);
	set_func_flags(0X4046FA,0x400);
	add_func    (0X404708,0X4048EE);
	set_func_flags(0X404708,0x404);
	set_frame_size(0X404708, 0X20, 0, 0);
	define_local_var(0X404708, 0X4048EE, "[bp-0X20]", "pArgument");
	define_local_var(0X404708, 0X4048EE, "[bp-0X1C]", "pData");
	add_func    (0X4049AC,0X4049B0);
	set_func_flags(0X4049AC,0x484);
	SetType(0X4049AC, "void __cdecl USBD_ConfigureEndpoint(const struct USBEndpointDescriptor *pDescriptor);");
	set_func_cmt(0X4049AC,	"Configures an endpoint according to its Endpoint Descriptor.", 1);
	set_frame_size(0X4049AC, 0, 0, 0);
	add_func    (0X4049B0,0X4049B4);
	set_func_flags(0X4049B0,0x484);
	SetType(0X4049B0, "void USBD_Connect(void);");
	set_func_cmt(0X4049B0,	"Connects the pull-up on the D+ line of the USB.", 1);
	set_frame_size(0X4049B0, 0, 0, 0);
	add_func    (0X4049B4,0X4049D0);
	set_func_flags(0X4049B4,0x404);
	SetType(0X4049B4, "void USBD_Disconnect(void);");
	set_func_cmt(0X4049B4,	"Disconnects the pull-up from the D+ line of the USB.", 1);
	set_frame_size(0X4049B4, 0X8, 0, 0);
	add_func    (0X4049D4,0X4049D8);
	set_func_flags(0X4049D4,0x404);
	set_frame_size(0X4049D4, 0, 0, 0);
	add_func    (0X4049DC,0X4049E2);
	set_func_flags(0X4049DC,0x404);
	set_frame_size(0X4049DC, 0, 0, 0);
	add_func    (0X4049E8,0X4049F8);
	set_func_flags(0X4049E8,0x404);
	set_frame_size(0X4049E8, 0, 0, 0);
	add_func    (0X4049FC,0X404C18);
	set_func_flags(0X4049FC,0x404);
	SetType(0X4049FC, "uint8_t __cdecl USBD_HAL_ConfigureEP(const struct USBEndpointDescriptor *pDescriptor);");
	set_func_cmt(0X4049FC,	"Configures an endpoint according to its endpoint Descriptor.", 1);
	set_frame_size(0X4049FC, 0X28, 0, 0);
	add_func    (0X404CC4,0X404CF4);
	set_func_flags(0X404CC4,0x404);
	SetType(0X404CC4, "void USBD_HAL_Connect(void);");
	set_func_cmt(0X404CC4,	"Enable Pull-up, connect.", 1);
	set_frame_size(0X404CC4, 0X8, 0, 0);
	add_func    (0X404CF8,0X404D0C);
	set_func_flags(0X404CF8,0x404);
	SetType(0X404CF8, "void USBD_HAL_Disconnect(void);");
	set_func_cmt(0X404CF8,	"Disable Pull-up, disconnect.", 1);
	set_frame_size(0X404CF8, 0, 0, 0);
	add_func    (0X404D10,0X404E04);
	set_func_flags(0X404D10,0x404);
	SetType(0X404D10, "uint8_t __cdecl USBD_HAL_Halt(uint8_t bEndpoint, uint8_t ctl);");
	set_func_cmt(0X404D10,	"Sets/Clear/Get the HALT state on the endpoint.", 1);
	set_frame_size(0X404D10, 0X20, 0, 0);
	add_func    (0X404E0C,0X404E78);
	set_func_flags(0X404E0C,0x404);
	SetType(0X404E0C, "void USBD_HAL_Init(void);");
	set_func_cmt(0X404E0C,	"Initializes the USB HW Access driver.", 1);
	set_frame_size(0X404E0C, 0X8, 0, 0);
	add_func    (0X404E8C,0X404E98);
	set_func_flags(0X404E8C,0x404);
	SetType(0X404E8C, "uint8_t USBD_HAL_IsHighSpeed(void);");
	set_func_cmt(0X404E8C,	"Indicates if the device is running in high or full-speed. Always returns 0 since UDP does not support high-speed mode.", 1);
	set_frame_size(0X404E8C, 0, 0, 0);
	add_func    (0X404E9C,0X404F0E);
	set_func_flags(0X404E9C,0x404);
	SetType(0X404E9C, "uint8_t __cdecl USBD_HAL_Read(uint8_t bEndpoint, void *pData, uint32_t dLength);");
	set_func_cmt(0X404E9C,	"Reads incoming data on an USB endpoint\nThis methods sets the transfer descriptor and activate the endpoint interrupt.\nThe actual transfer is then carried out by the endpoint interrupt handler.\nThe Read operation finishes either when the buffer is full, or a short packet (inferior to endpoint maximum  size) is received.\n", 1);
	set_frame_size(0X404E9C, 0X18, 0, 0);
	add_func    (0X404F18,0X404F76);
	set_func_flags(0X404F18,0x400);
	SetType(0X404F18, "void __cdecl USBD_HAL_ResetEPs(uint32_t bmEPs, uint8_t bStatus, uint8_t bKeepCfg);");
	set_func_cmt(0X404F18,	"Reset endpoints and disable them.", 1);
	set_frame_size(0X404F18, 0X28, 0, 0);
	add_func    (0X404F80,0X404FA0);
	set_func_flags(0X404F80,0x400);
	add_func    (0X404FA4,0X404FA6);
	set_func_flags(0X404FA4,0x400);
	add_func    (0X404FA8,0X404FC6);
	set_func_flags(0X404FA8,0x404);
	SetType(0X404FA8, "uint8_t __fastcall USBD_HAL_SetTransferCallback(uint8_t bEP, void *fCallback, void *pCbData);");
	set_frame_size(0X404FA8, 0, 0, 0);
	add_func    (0X404FCC,0X404FFA);
	set_func_flags(0X404FCC,0x404);
	SetType(0X404FCC, "uint8_t __cdecl USBD_HAL_Stall(uint8_t bEP);");
	set_func_cmt(0X404FCC,	"Causes the given endpoint to acknowledge the next packet it receives with a STALL handshake except setup request.", 1);
	set_frame_size(0X404FCC, 0X8, 0, 0);
	add_func    (0X405024,0X405034);
	set_func_flags(0X405024,0x404);
	set_frame_size(0X405024, 0, 0, 0);
	add_func    (0X405038,0X4050E8);
	set_func_flags(0X405038,0x404);
	set_frame_size(0X405038, 0X8, 0, 0);
	add_func    (0X4050F4,0X405170);
	set_func_flags(0X4050F4,0x400);
	SetType(0X4050F4, "uint8_t __cdecl USBD_HAL_Write(uint8_t bEndpoint, const void *pData, uint32_t dLength);");
	set_func_cmt(0X4050F4,	"Sends data through a USB endpoint. Sets up the transfer descriptor,\nwrites one or two data payloads (depending on the number of FIFO bank\nfor the endpoint) and then starts the actual transfer. The operation is\ncomplete when all the data has been sent.\n", 1);
	set_frame_size(0X4050F4, 0X18, 0, 0);
	add_func    (0X405178,0X40517E);
	set_func_flags(0X405178,0x404);
	SetType(0X405178, "void __cdecl USBD_Halt(uint8_t bEndpoint);");
	set_func_cmt(0X405178,	"Sets the HALT feature on the given endpoint (if not already in this state).", 1);
	set_frame_size(0X405178, 0, 0, 0);
	add_func    (0X405180,0X405198);
	set_func_flags(0X405180,0x404);
	SetType(0X405180, "void USBD_Init(void);");
	set_func_cmt(0X405180,	"Initializes the USB driver.", 1);
	set_frame_size(0X405180, 0X8, 0, 0);
	add_func    (0X40519C,0X4051A0);
	set_func_flags(0X40519C,0x484);
	SetType(0X40519C, "uint8_t USBD_IsHighSpeed(void);");
	set_func_cmt(0X40519C,	"Indicates if the device is running in high or full-speed. Always returns 0 since UDP does not support high-speed mode.", 1);
	set_frame_size(0X40519C, 0, 0, 0);
	add_func    (0X4051A0,0X4051BE);
	set_func_flags(0X4051A0,0x404);
	SetType(0X4051A0, "uint8_t __fastcall USBD_Read(uint8_t bEndpoint, void *pData, uint32_t dLength, void *fCallback, void *pArgument);");
	set_frame_size(0X4051A0, 0X10, 0, 0);
	define_local_var(0X4051A0, 0X4051BE, "[bp+0]", "pCbData");
	add_func    (0X4051C0,0X4051D0);
	set_func_flags(0X4051C0,0x404);
	set_frame_size(0X4051C0, 0, 0, 0);
	add_func    (0X405200,0X405224);
	set_func_flags(0X405200,0x404);
	SetType(0X405200, "void __cdecl USBD_ResetHandler();");
	set_func_cmt(0X405200,	"Handle the USB reset event, should be invoked whenever\nHW found USB reset signal on bus, which usually is called\n\"end of bus reset\" status.\n", 1);
	set_frame_size(0X405200, 0X8, 0, 0);
	add_func    (0X405228,0X405248);
	set_func_flags(0X405228,0x404);
	SetType(0X405228, "void USBD_ResumeHandler(void);");
	set_func_cmt(0X405228,	"Handle the USB resume event, should be invoked whenever HW reports a resume signal.", 1);
	set_frame_size(0X405228, 0X8, 0, 0);
	add_func    (0X40524C,0X405262);
	set_func_flags(0X40524C,0x400);
	set_frame_size(0X40524C, 0X8, 0, 0);
	add_func    (0X405268,0X40528C);
	set_func_flags(0X405268,0x404);
	SetType(0X405268, "void __cdecl USBD_SetConfiguration(uint8_t cfgnum);");
	set_func_cmt(0X405268,	"Sets the current device configuration.", 1);
	set_frame_size(0X405268, 0X8, 0, 0);
	add_func    (0X405290,0X405294);
	set_func_flags(0X405290,0x484);
	SetType(0X405290, "uint8_t __cdecl USBD_Stall(uint8_t bEndpoint);");
	set_func_cmt(0X405290,	"Causes the given endpoint to acknowledge the next packet it receives with a STALL handshake.\n", 1);
	set_frame_size(0X405290, 0, 0, 0);
	add_func    (0X405294,0X4052B2);
	set_func_flags(0X405294,0x404);
	SetType(0X405294, "void USBD_SuspendHandler(void);");
	set_func_cmt(0X405294,	"Handle the USB suspend event, should be invoked whenever HW reports a suspend signal.", 1);
	set_frame_size(0X405294, 0X8, 0, 0);
	add_func    (0X4052B8,0X4052BC);
	set_func_flags(0X4052B8,0x484);
	set_frame_size(0X4052B8, 0, 0, 0);
	add_func    (0X4052BC,0X4052C2);
	set_func_flags(0X4052BC,0x404);
	SetType(0X4052BC, "void __cdecl USBD_Unhalt(uint8_t bEndpoint);");
	set_frame_size(0X4052BC, 0, 0, 0);
	add_func    (0X4052C2,0X4052E0);
	set_func_flags(0X4052C2,0x404);
	SetType(0X4052C2, "uint8_t __fastcall USBD_Write(uint8_t bEndpoint, const void *pData, uint32_t dLength, void *fCallback, void *pArgument);");
	set_frame_size(0X4052C2, 0X10, 0, 0);
	define_local_var(0X4052C2, 0X4052E0, "[bp+0]", "pArgument");
	add_func    (0X4052E0,0X4052EE);
	set_func_flags(0X4052E0,0x404);
	set_frame_size(0X4052E0, 0, 0, 0);
	add_func    (0X4052EE,0X4052F2);
	set_func_flags(0X4052EE,0x404);
	set_frame_size(0X4052EE, 0, 0, 0);
	add_func    (0X4052F2,0X4052FA);
	set_func_flags(0X4052F2,0x404);
	set_frame_size(0X4052F2, 0, 0, 0);
	add_func    (0X4052FA,0X405302);
	set_func_flags(0X4052FA,0x404);
	set_frame_size(0X4052FA, 0, 0, 0);
	add_func    (0X405302,0X405306);
	set_func_flags(0X405302,0x404);
	set_frame_size(0X405302, 0, 0, 0);
	add_func    (0X405306,0X40530C);
	set_func_flags(0X405306,0x404);
	set_frame_size(0X405306, 0, 0, 0);
	add_func    (0X40530C,0X405310);
	set_func_flags(0X40530C,0x404);
	set_frame_size(0X40530C, 0, 0, 0);
	add_func    (0X405310,0X40533E);
	set_func_flags(0X405310,0x400);
	set_frame_size(0X405310, 0X18, 0, 0);
	add_func    (0X40533E,0X405346);
	set_func_flags(0X40533E,0x404);
	set_frame_size(0X40533E, 0, 0, 0);
	add_func    (0X405346,0X40534A);
	set_func_flags(0X405346,0x404);
	set_frame_size(0X405346, 0, 0, 0);
	add_func    (0X40534A,0X40534E);
	set_func_flags(0X40534A,0x404);
	set_frame_size(0X40534A, 0, 0, 0);
	add_func    (0X40534E,0X405356);
	set_func_flags(0X40534E,0x404);
	set_frame_size(0X40534E, 0, 0, 0);
	add_func    (0X405356,0X40535A);
	set_func_flags(0X405356,0x404);
	set_frame_size(0X405356, 0, 0, 0);
	add_func    (0X40535A,0X405362);
	set_func_flags(0X40535A,0x400);
	add_func    (0X405362,0X405366);
	set_func_flags(0X405362,0x404);
	set_frame_size(0X405362, 0, 0, 0);
	add_func    (0X405366,0X40536C);
	set_func_flags(0X405366,0x404);
	set_frame_size(0X405366, 0, 0, 0);
	add_func    (0X40536C,0X40537C);
	set_func_flags(0X40536C,0x404);
	set_frame_size(0X40536C, 0, 0, 0);
	add_func    (0X40537C,0X405396);
	set_func_flags(0X40537C,0x404);
	set_frame_size(0X40537C, 0, 0, 0);
	add_func    (0X405396,0X4053AA);
	set_func_flags(0X405396,0x404);
	SetType(0X405396, "void __cdecl USBHS_DetachUsb(struct Usbhs *pUsbhs, uint8_t Enable);");
	set_func_cmt(0X405396,	"Attach or detach USB.", 1);
	set_frame_size(0X405396, 0, 0, 0);
	add_func    (0X4053AA,0X4053BA);
	set_func_flags(0X4053AA,0x404);
	set_frame_size(0X4053AA, 0, 0, 0);
	add_func    (0X4053BA,0X4053D2);
	set_func_flags(0X4053BA,0x404);
	set_frame_size(0X4053BA, 0X8, 0, 0);
	add_func    (0X4053D2,0X4053E4);
	set_func_flags(0X4053D2,0x404);
	set_frame_size(0X4053D2, 0, 0, 0);
	add_func    (0X4053E4,0X4053F4);
	set_func_flags(0X4053E4,0x404);
	set_frame_size(0X4053E4, 0, 0, 0);
	add_func    (0X4053F4,0X40540A);
	set_func_flags(0X4053F4,0x400);
	add_func    (0X40540A,0X405418);
	set_func_flags(0X40540A,0x404);
	set_frame_size(0X40540A, 0, 0, 0);
	add_func    (0X405418,0X405542);
	set_func_flags(0X405418,0x400);
	SetType(0X405418, "void USBHS_Handler(void);");
	set_func_cmt(0X405418,	"USBD (UDP) interrupt handler\nManages device resume, suspend, end of bus reset.\nForwards endpoint events to the appropriate handler.\n", 1);
	set_frame_size(0X405418, 0X18, 0, 0);
	add_func    (0X405550,0X405566);
	set_func_flags(0X405550,0x400);
	add_func    (0X405566,0X40557E);
	set_func_flags(0X405566,0x404);
	set_frame_size(0X405566, 0, 0, 0);
	add_func    (0X40557E,0X405582);
	set_func_flags(0X40557E,0x404);
	set_frame_size(0X40557E, 0, 0, 0);
	add_func    (0X405582,0X405586);
	set_func_flags(0X405582,0x404);
	set_frame_size(0X405582, 0, 0, 0);
	add_func    (0X405586,0X40558E);
	set_func_flags(0X405586,0x404);
	set_frame_size(0X405586, 0, 0, 0);
	add_func    (0X40558E,0X405592);
	set_func_flags(0X40558E,0x404);
	set_frame_size(0X40558E, 0, 0, 0);
	add_func    (0X405594,0X4055C8);
	set_func_flags(0X405594,0x404);
	SetType(0X405594, "void UsageFault_Handler(void);");
	set_func_cmt(0X405594,	"Default UsageFault interrupt handler.", 1);
	set_frame_size(0X405594, 0X8, 0, 0);
	add_func    (0X4055F4,0X4055F8);
	set_func_flags(0X4055F4,0x400);
	add_func    (0X4055F8,0X40560C);
	set_func_flags(0X4055F8,0x404);
	SetType(0X4055F8, "void __cdecl XDMAC_DisableChannel(struct Xdmac *pXdmac, uint8_t channel);");
	set_func_cmt(0X4055F8,	"Disables the relevant channel of given XDMAC.", 1);
	set_frame_size(0X4055F8, 0X8, 0, 0);
	add_func    (0X40560C,0X405620);
	set_func_flags(0X40560C,0x404);
	set_frame_size(0X40560C, 0X8, 0, 0);
	add_func    (0X405620,0X405644);
	set_func_flags(0X405620,0x404);
	set_frame_size(0X405620, 0X8, 0, 0);
	add_func    (0X405644,0X405658);
	set_func_flags(0X405644,0x400);
	set_frame_size(0X405644, 0X8, 0, 0);
	add_func    (0X405658,0X405668);
	set_func_flags(0X405658,0x404);
	set_frame_size(0X405658, 0X8, 0, 0);
	add_func    (0X405668,0X40567C);
	set_func_flags(0X405668,0x400);
	set_frame_size(0X405668, 0X8, 0, 0);
	add_func    (0X40567C,0X405690);
	set_func_flags(0X40567C,0x404);
	set_frame_size(0X40567C, 0X8, 0, 0);
	add_func    (0X405690,0X4056A4);
	set_func_flags(0X405690,0x404);
	set_frame_size(0X405690, 0X8, 0, 0);
	add_func    (0X4056A4,0X4056B0);
	set_func_flags(0X4056A4,0x404);
	set_frame_size(0X4056A4, 0X8, 0, 0);
	add_func    (0X4056B0,0X4056BC);
	set_func_flags(0X4056B0,0x404);
	set_frame_size(0X4056B0, 0X8, 0, 0);
	add_func    (0X4056BC,0X4056D4);
	set_func_flags(0X4056BC,0x404);
	set_frame_size(0X4056BC, 0X8, 0, 0);
	add_func    (0X4056D4,0X4056E6);
	set_func_flags(0X4056D4,0x404);
	set_frame_size(0X4056D4, 0X8, 0, 0);
	add_func    (0X4056EC,0X405704);
	set_func_flags(0X4056EC,0x404);
	set_frame_size(0X4056EC, 0X8, 0, 0);
	add_func    (0X405704,0X405718);
	set_func_flags(0X405704,0x404);
	set_frame_size(0X405704, 0X8, 0, 0);
	add_func    (0X405718,0X40572C);
	set_func_flags(0X405718,0x404);
	set_frame_size(0X405718, 0X8, 0, 0);
	add_func    (0X40572C,0X40574A);
	set_func_flags(0X40572C,0x404);
	set_frame_size(0X40572C, 0X8, 0, 0);
	add_func    (0X40574A,0X40575E);
	set_func_flags(0X40574A,0x404);
	set_frame_size(0X40574A, 0X8, 0, 0);
	add_func    (0X40575E,0X405772);
	set_func_flags(0X40575E,0x404);
	set_frame_size(0X40575E, 0X8, 0, 0);
	add_func    (0X405772,0X40578C);
	set_func_flags(0X405772,0x404);
	set_frame_size(0X405772, 0X8, 0, 0);
	add_func    (0X40578C,0X4057A4);
	set_func_flags(0X40578C,0x404);
	set_frame_size(0X40578C, 0X8, 0, 0);
	add_func    (0X4057A4,0X4057B8);
	set_func_flags(0X4057A4,0x404);
	set_frame_size(0X4057A4, 0X8, 0, 0);
	add_func    (0X4057B8,0X4057D2);
	set_func_flags(0X4057B8,0x404);
	set_frame_size(0X4057B8, 0X8, 0, 0);
	add_func    (0X4057D2,0X4057E6);
	set_func_flags(0X4057D2,0x400);
	set_frame_size(0X4057D2, 0X8, 0, 0);
	add_func    (0X4057E6,0X405818);
	set_func_flags(0X4057E6,0x400);
	SetType(0X4057E6, "uint32_t __cdecl XDMAD_AllocateChannel(struct sXdmad *pXdmad, uint8_t bSrcID, uint8_t bDstID);");
	set_func_cmt(0X4057E6,	"Allocate a XDMA channel for upper layer.\n(not completely as in library)", 1);
	set_frame_size(0X4057E6, 0X18, 0, 0);
	add_func    (0X405818,0X4058B6);
	set_func_flags(0X405818,0x404);
	SetType(0X405818, "uint32_t __cdecl static XDMAD_AllocateXdmacChannel(struct sXdmad *pXdmad, uint8_t bSrcID, uint8_t bDstID);");
	set_func_cmt(0X405818,	"Try to allocate a DMA channel for on given controller.", 1);
	set_frame_size(0X405818, 0X18, 0, 0);
	add_func    (0X405910,0X405A2C);
	set_func_flags(0X405910,0x404);
	SetType(0X405910, "enum eXdmadRC __cdecl XDMAD_ConfigureTransfer(struct sXdmad *pXdmad, uint32_t dwChannel, struct sXdmadCfg *pXdmaParam, uint32_t dwXdmaDescCfg, uint32_t dwXdmaDescAddr, uint32_t dwXdmaIntEn);");
	set_func_cmt(0X405910,	"Configure DMA for a single transfer.", 1);
	set_frame_size(0X405910, 0X20, 0, 0);
	define_local_var(0X405910, 0X405A2C, "[bp+0]", "dwXdmaDescAddr");
	define_local_var(0X405910, 0X405A2C, "[bp+0X4]", "dwXdmaIntEn");
	add_func    (0X405A2C,0X405AE2);
	set_func_flags(0X405A2C,0x404);
	SetType(0X405A2C, "void __cdecl XDMAD_Handler(struct sXdmad *pDmad);");
	set_func_cmt(0X405A2C,	"xDMA interrupt handler", 1);
	set_frame_size(0X405A2C, 0X28, 0, 0);
	add_func    (0X405AE4,0X405B5E);
	set_func_flags(0X405AE4,0x400);
	set_frame_size(0X405AE4, 0X18, 0, 0);
	add_func    (0X405B68,0X405C10);
	set_func_flags(0X405B68,0x404);
	SetType(0X405B68, "enum eXdmadRC __cdecl XDMAD_PrepareChannel(struct sXdmad *pXdmad, uint32_t dwChannel);");
	set_frame_size(0X405B68, 0X10, 0, 0);
	add_func    (0X405C10,0X405C44);
	set_func_flags(0X405C10,0x400);
	set_frame_size(0X405C10, 0X8, 0, 0);
	add_func    (0X405C44,0X405CA6);
	set_func_flags(0X405C44,0x404);
	SetType(0X405C44, "enum eXdmadRC __cdecl XDMAD_StartTransfer(struct sXdmad *pXdmad, uint32_t dwChannel);");
	set_func_cmt(0X405C44,	"Start xDMA transfer.", 1);
	set_frame_size(0X405C44, 0X10, 0, 0);
	add_func    (0X405CEC,0X405D34);
	set_func_flags(0X405CEC,0x404);
	SetType(0X405CEC, "enum eXdmadRC __cdecl XDMAD_StopTransfer(struct sXdmad *pXdmad, uint32_t dwChannel);");
	set_func_cmt(0X405CEC,	"Stop DMA transfer.", 1);
	set_frame_size(0X405CEC, 0X10, 0, 0);
	add_func    (0X405D34,0X405D76);
	set_func_flags(0X405D34,0x404);
	SetType(0X405D34, "uint8_t __cdecl XDMAIF_Get_ChannelNumber(uint8_t bPeriphID, uint8_t bTransfer);");
	set_func_cmt(0X405D34,	"Get peripheral identifier coded for hardware handshaking interface", 1);
	set_frame_size(0X405D34, 0X10, 0, 0);
	add_func    (0X405D80,0X405DB6);
	set_func_flags(0X405D80,0x404);
	set_frame_size(0X405D80, 0X8, 0, 0);
	add_func    (0X405DC0,0X405DD8);
	set_func_flags(0X405DC0,0x400);
	set_frame_size(0X405DC0, 0X8, 0, 0);
	add_func    (0X405DD8,0X405E1E);
	set_func_flags(0X405DD8,0x400);
	set_frame_size(0X405DD8, 0X8, 0, 0);
	add_func    (0X405E2C,0X405EC0);
	set_func_flags(0X405E2C,0x400);
	set_frame_size(0X405E2C, 0XC, 0, 0);
	add_func    (0X405EC0,0X405EE2);
	set_func_flags(0X405EC0,0x400);
	add_func    (0X405EE8,0X405EFE);
	set_func_flags(0X405EE8,0x400);
	add_func    (0X405F04,0X405F42);
	set_func_flags(0X405F04,0x404);
	SetType(0X405F04, "void __cdecl static SetLineCodingCallback(struct CDCDSerialPort *pCdcd);");
	set_func_cmt(0X405F04,	"Callback function which should be invoked after the data of a SetLineCoding request has been retrieved.\nSends a zero-length packet to the host for acknowledging the request.\n", 1);
	set_frame_size(0X405F04, 0X10, 0, 0);
	define_local_var(0X405F04, 0X405F42, "[bp-0X10]", "pArgument");
	add_func    (0X405F48,0X405F78);
	set_func_flags(0X405F48,0x400);
	set_frame_size(0X405F48, 0X8, 0, 0);
	add_func    (0X405F78,0X405FB8);
	set_func_flags(0X405F78,0x400);
	set_frame_size(0X405F78, 0X8, 0, 0);
	add_func    (0X405FEC,0X40608C);
	set_func_flags(0X405FEC,0x400);
	set_frame_size(0X405FEC, 0X38, 0, 0);
	add_func    (0X4060B4,0X406164);
	set_func_flags(0X4060B4,0x400);
	set_frame_size(0X4060B4, 0X28, 0, 0);
	add_func    (0X406190,0X4061D2);
	set_func_flags(0X406190,0x400);
	set_frame_size(0X406190, 0X18, 0, 0);
	add_func    (0X4061D2,0X40622C);
	set_func_flags(0X4061D2,0x400);
	set_frame_size(0X4061D2, 0X20, 0, 0);
	add_func    (0X40622C,0X4062AA);
	set_func_flags(0X40622C,0x400);
	set_frame_size(0X40622C, 0X14, 0, 0);
	add_func    (0X4062B4,0X4062FE);
	set_func_flags(0X4062B4,0x400);
	set_frame_size(0X4062B4, 0X8, 0, 0);
	add_func    (0X406308,0X40635C);
	set_func_flags(0X406308,0x400);
	set_frame_size(0X406308, 0XA0, 0, 0);
	add_func    (0X40635C,0X40638A);
	set_func_flags(0X40635C,0x400);
	set_frame_size(0X40635C, 0X8, 0, 0);
	add_func    (0X406390,0X4063C4);
	set_func_flags(0X406390,0x400);
	set_frame_size(0X406390, 0X8, 0, 0);
	add_func    (0X4063C8,0X4064D4);
	set_func_flags(0X4063C8,0x400);
	set_frame_size(0X4063C8, 0X20, 0, 0);
	add_func    (0X406538,0X406706);
	set_func_flags(0X406538,0x400);
	set_frame_size(0X406538, 0X20, 0, 0);
	add_func    (0X4067B8,0X4067CA);
	set_func_flags(0X4067B8,0x400);
	add_func    (0X4067CC,0X40684C);
	set_func_flags(0X4067CC,0x400);
	set_frame_size(0X4067CC, 0X20, 0, 0);
	add_func    (0X40686C,0X40688E);
	set_func_flags(0X40686C,0x400);
	set_frame_size(0X40686C, 0X8, 0, 0);
	add_func    (0X40688E,0X406898);
	set_func_flags(0X40688E,0x400);
	add_func    (0X406898,0X40689E);
	set_func_flags(0X406898,0x400);
	add_func    (0X40689E,0X4068A4);
	set_func_flags(0X40689E,0x400);
	add_func    (0X4068A4,0X40691C);
	set_func_flags(0X4068A4,0x400);
	set_frame_size(0X4068A4, 0X18, 0, 0);
	add_func    (0X40691C,0X406924);
	set_func_flags(0X40691C,0x400);
	add_func    (0X406924,0X406942);
	set_func_flags(0X406924,0x400);
	set_frame_size(0X406924, 0X10, 0, 0);
	add_func    (0X406944,0X406956);
	set_func_flags(0X406944,0x400);
	set_frame_size(0X406944, 0X8, 0, 0);
	add_func    (0X40695C,0X4069FA);
	set_func_flags(0X40695C,0x400);
	set_frame_size(0X40695C, 0X20, 0, 0);
	define_local_var(0X40695C, 0X4069FA, "[bp-0X14]", "masterClock");
	add_func    (0X406A1C,0X406A3E);
	set_func_flags(0X406A1C,0x400);
	set_frame_size(0X406A1C, 0X8, 0, 0);
	add_func    (0X406A3E,0X406A48);
	set_func_flags(0X406A3E,0x400);
	add_func    (0X406A48,0X406A4E);
	set_func_flags(0X406A48,0x400);
	add_func    (0X406A4E,0X406A54);
	set_func_flags(0X406A4E,0x400);
	add_func    (0X406A54,0X406ACC);
	set_func_flags(0X406A54,0x400);
	set_frame_size(0X406A54, 0X18, 0, 0);
	add_func    (0X406ACC,0X406AD4);
	set_func_flags(0X406ACC,0x400);
	add_func    (0X406AD4,0X406AEE);
	set_func_flags(0X406AD4,0x400);
	set_frame_size(0X406AD4, 0X8, 0, 0);
	add_func    (0X406AF0,0X406AF6);
	set_func_flags(0X406AF0,0x400);
	add_func    (0X406AFC,0X406B00);
	set_func_flags(0X406AFC,0x400);
	add_func    (0X406B00,0X406B06);
	set_func_flags(0X406B00,0x400);
	add_func    (0X406B0C,0X406B1A);
	set_func_flags(0X406B0C,0x400);
	add_func    (0X406B1C,0X406B1E);
	set_func_flags(0X406B1C,0x440);
	add_func    (0X406B1E,0X406B4E);
	set_func_flags(0X406B1E,0x400);
	SetType(0X406B1E, "bool __fastcall sub_406B1E(int seed, uint8_t *buf, int buflen);");
	set_frame_size(0X406B1E, 0X8, 0, 0);
	add_func    (0X406B50,0X406BBA);
	set_func_flags(0X406B50,0x400);
	set_frame_size(0X406B50, 0X18, 0, 0);
	define_local_var(0X406B50, 0X406BBA, "[bp-0X18]", "a5");
	add_func    (0X406BC4,0X406C2A);
	set_func_flags(0X406BC4,0x400);
	set_frame_size(0X406BC4, 0X20, 0, 0);
	add_func    (0X406C2A,0X406C86);
	set_func_flags(0X406C2A,0x400);
	set_frame_size(0X406C2A, 0X24, 0, 0);
	add_func    (0X406C86,0X406D0E);
	set_func_flags(0X406C86,0x400);
	set_frame_size(0X406C86, 0X20, 0, 0);
	add_func    (0X406D0E,0X406D20);
	set_func_flags(0X406D0E,0x400);
	set_frame_size(0X406D0E, 0X8, 0, 0);
	add_func    (0X406D20,0X406D3E);
	set_func_flags(0X406D20,0x400);
	set_frame_size(0X406D20, 0X10, 0, 0);
	add_func    (0X406D3E,0X406DAE);
	set_func_flags(0X406D3E,0x400);
	set_frame_size(0X406D3E, 0X28, 0, 0);
	add_func    (0X406DAE,0X406DBA);
	set_func_flags(0X406DAE,0x400);
	add_func    (0X406DBA,0X406E04);
	set_func_flags(0X406DBA,0x400);
	set_frame_size(0X406DBA, 0X18, 0, 0);
	add_func    (0X406E04,0X406E0A);
	set_func_flags(0X406E04,0x400);
	add_func    (0X406E0C,0X406E22);
	set_func_flags(0X406E0C,0x400);
	add_func    (0X406E28,0X406F3E);
	set_func_flags(0X406E28,0x400);
	set_frame_size(0X406E28, 0X30, 0, 0);
	add_func    (0X406F3E,0X407002);
	set_func_flags(0X406F3E,0x400);
	set_frame_size(0X406F3E, 0X38, 0, 0);
	define_local_var(0X406F3E, 0X407002, "[bp-0X37]", "destination");
	add_func    (0X407002,0X4071C2);
	set_func_flags(0X407002,0x400);
	SetType(0X407002, "int __cdecl sub_407002(void *a1);");
	set_frame_size(0X407002, 0X90, 0, 0);
	add_func    (0X4071C2,0X4072A8);
	set_func_flags(0X4071C2,0x400);
	SetType(0X4071C2, "int __cdecl sub_4071C2(void *a1);");
	set_frame_size(0X4071C2, 0X50, 0, 0);
	add_func    (0X4072A8,0X407302);
	set_func_flags(0X4072A8,0x400);
	set_frame_size(0X4072A8, 0X60, 0, 0);
	define_local_var(0X4072A8, 0X407302, "[bp-0X60]", "num");
	define_local_var(0X4072A8, 0X407302, "[bp-0X5C]", "a6");
	define_local_var(0X4072A8, 0X407302, "[bp-0X58]", "a7");
	define_local_var(0X4072A8, 0X407302, "[bp-0X54]", "a8");
	define_local_var(0X4072A8, 0X407302, "[bp-0X50]", "a9");
	define_local_var(0X4072A8, 0X407302, "[bp-0X4C]", "a10");
	define_local_var(0X4072A8, 0X407302, "[bp-0X48]", "a11");
	define_local_var(0X4072A8, 0X407302, "[bp-0X38]", "destination");
	add_func    (0X407308,0X407398);
	set_func_flags(0X407308,0x400);
	SetType(0X407308, "int __cdecl sub_407308(char a1, uint8_t a2, uint16_t a3, uint16_t a4, size_t num, void *a6, size_t a7, void *a8, size_t a9, void *a10, size_t a11, void *a12, void *a13, void *a14);");
	set_frame_size(0X407308, 0X28, 0, 0);
	define_local_var(0X407308, 0X407398, "[bp+0]", "num");
	define_local_var(0X407308, 0X407398, "[bp+0X4]", "a6");
	define_local_var(0X407308, 0X407398, "[bp+0X8]", "a7");
	define_local_var(0X407308, 0X407398, "[bp+0XC]", "a8");
	define_local_var(0X407308, 0X407398, "[bp+0X10]", "a9");
	define_local_var(0X407308, 0X407398, "[bp+0X14]", "source");
	define_local_var(0X407308, 0X407398, "[bp+0X18]", "a11");
	define_local_var(0X407308, 0X407398, "[bp+0X1C]", "a12");
	define_local_var(0X407308, 0X407398, "[bp+0X20]", "a13");
	define_local_var(0X407308, 0X407398, "[bp+0X24]", "a14");
	add_func    (0X407398,0X4073D2);
	set_func_flags(0X407398,0x400);
	SetType(0X407398, "int __fastcall aesInit(uint8_t *aesKey);");
	set_frame_size(0X407398, 0X14, 0, 0);
	add_func    (0X4073DC,0X407440);
	set_func_flags(0X4073DC,0x400);
	set_frame_size(0X4073DC, 0X14, 0, 0);
	add_func    (0X407450,0X40749A);
	set_func_flags(0X407450,0x400);
	set_frame_size(0X407450, 0X10, 0, 0);
	add_func    (0X4074A8,0X4074C8);
	set_func_flags(0X4074A8,0x400);
	set_frame_size(0X4074A8, 0X14, 0, 0);
	add_func    (0X4074C8,0X407518);
	set_func_flags(0X4074C8,0x400);
	set_frame_size(0X4074C8, 0X20, 0, 0);
	add_func    (0X407518,0X407622);
	set_func_flags(0X407518,0x400);
	set_frame_size(0X407518, 0X28, 0, 0);
	add_func    (0X407628,0X40763A);
	set_func_flags(0X407628,0x400);
	set_frame_size(0X407628, 0X8, 0, 0);
	add_func    (0X40763A,0X407654);
	set_func_flags(0X40763A,0x400);
	set_frame_size(0X40763A, 0XC, 0, 0);
	add_func    (0X407654,0X407668);
	set_func_flags(0X407654,0x400);
	set_frame_size(0X407654, 0XC, 0, 0);
	add_func    (0X407668,0X407680);
	set_func_flags(0X407668,0x400);
	set_frame_size(0X407668, 0X10, 0, 0);
	add_func    (0X407684,0X40769C);
	set_func_flags(0X407684,0x400);
	set_frame_size(0X407684, 0X10, 0, 0);
	add_func    (0X4076A0,0X4077B0);
	set_func_flags(0X4076A0,0x400);
	SetType(0X4076A0, "int __cdecl sub_4076A0(int a1, uint16_t a2, uint8_t *buf, uint8_t *a4, uint8_t *a5);");
	set_frame_size(0X4076A0, 0X60, 0, 0);
	define_local_var(0X4076A0, 0X4077B0, "[bp-0X60]", "num");
	define_local_var(0X4076A0, 0X4077B0, "[bp-0X5C]", "a6");
	define_local_var(0X4076A0, 0X4077B0, "[bp-0X58]", "a7");
	define_local_var(0X4076A0, 0X4077B0, "[bp-0X54]", "a8");
	define_local_var(0X4076A0, 0X4077B0, "[bp-0X50]", "a9");
	define_local_var(0X4076A0, 0X4077B0, "[bp-0X4C]", "a10");
	define_local_var(0X4076A0, 0X4077B0, "[bp-0X48]", "a11");
	define_local_var(0X4076A0, 0X4077B0, "[bp-0X3C]", "a14");
	define_local_var(0X4076A0, 0X4077B0, "[bp-0X30]", "a3");
	define_local_var(0X4076A0, 0X4077B0, "[bp+0]", "a5");
	add_func    (0X4077B8,0X4078C6);
	set_func_flags(0X4077B8,0x400);
	set_frame_size(0X4077B8, 0X10, 0, 0);
	add_func    (0X4078DC,0X4078F4);
	set_func_flags(0X4078DC,0x400);
	set_frame_size(0X4078DC, 0X8, 0, 0);
	add_func    (0X4078F8,0X40791C);
	set_func_flags(0X4078F8,0x400);
	set_frame_size(0X4078F8, 0X8, 0, 0);
	add_func    (0X40791C,0X4079E0);
	set_func_flags(0X40791C,0x400);
	set_frame_size(0X40791C, 0X160, 0, 0);
	define_local_var(0X40791C, 0X4079E0, "[bp-0X155]", "destination");
	add_func    (0X4079E8,0X407A02);
	set_func_flags(0X4079E8,0x400);
	set_frame_size(0X4079E8, 0X8, 0, 0);
	add_func    (0X407A02,0X407A1C);
	set_func_flags(0X407A02,0x400);
	set_frame_size(0X407A02, 0X8, 0, 0);
	add_func    (0X407A1C,0X407A8A);
	set_func_flags(0X407A1C,0x400);
	set_frame_size(0X407A1C, 0X10, 0, 0);
	add_func    (0X407AA4,0X407B3C);
	set_func_flags(0X407AA4,0x400);
	set_frame_size(0X407AA4, 0X28, 0, 0);
	add_func    (0X407B48,0X407BB4);
	set_func_flags(0X407B48,0x400);
	set_frame_size(0X407B48, 0X18, 0, 0);
	add_func    (0X407BB4,0X407BEE);
	set_func_flags(0X407BB4,0x400);
	set_frame_size(0X407BB4, 0X10, 0, 0);
	add_func    (0X407BEE,0X407C0A);
	set_func_flags(0X407BEE,0x400);
	set_frame_size(0X407BEE, 0X8, 0, 0);
	add_func    (0X407C0A,0X407CA8);
	set_func_flags(0X407C0A,0x400);
	set_frame_size(0X407C0A, 0X18, 0, 0);
	add_func    (0X407CA8,0X407CE6);
	set_func_flags(0X407CA8,0x400);
	set_frame_size(0X407CA8, 0X18, 0, 0);
	add_func    (0X407CEC,0X407D88);
	set_func_flags(0X407CEC,0x400);
	set_frame_size(0X407CEC, 0X10, 0, 0);
	add_func    (0X407D8C,0X407DA8);
	set_func_flags(0X407D8C,0x400);
	set_frame_size(0X407D8C, 0X10, 0, 0);
	add_func    (0X407DAC,0X407DC8);
	set_func_flags(0X407DAC,0x400);
	set_frame_size(0X407DAC, 0X10, 0, 0);
	add_func    (0X407DCC,0X407E58);
	set_func_flags(0X407DCC,0x400);
	set_frame_size(0X407DCC, 0X28, 0, 0);
	add_func    (0X407E58,0X407E5C);
	set_func_flags(0X407E58,0x480);
	add_func    (0X407E5C,0X407E8E);
	set_func_flags(0X407E5C,0x400);
	set_frame_size(0X407E5C, 0X18, 0, 0);
	add_func    (0X407E94,0X407ED6);
	set_func_flags(0X407E94,0x400);
	set_frame_size(0X407E94, 0X10, 0, 0);
	add_func    (0X407EDC,0X407EFE);
	set_func_flags(0X407EDC,0x400);
	set_frame_size(0X407EDC, 0X18, 0, 0);
	add_func    (0X407F00,0X407F26);
	set_func_flags(0X407F00,0x400);
	set_frame_size(0X407F00, 0X8, 0, 0);
	add_func    (0X407F2C,0X407F7E);
	set_func_flags(0X407F2C,0x400);
	set_frame_size(0X407F2C, 0X18, 0, 0);
	add_func    (0X407FB4,0X407FCC);
	set_func_flags(0X407FB4,0x400);
	set_frame_size(0X407FB4, 0X8, 0, 0);
	add_func    (0X407FCC,0X40800E);
	set_func_flags(0X407FCC,0x400);
	SetType(0X407FCC, "bool __fastcall sub_407FCC(int seed, uint8_t *buf, int buflen);");
	set_frame_size(0X407FCC, 0X18, 0, 0);
	add_func    (0X408014,0X40805A);
	set_func_flags(0X408014,0x400);
	set_frame_size(0X408014, 0X10, 0, 0);
	add_func    (0X40805C,0X4081C0);
	set_func_flags(0X40805C,0x400);
	set_frame_size(0X40805C, 0X130, 0, 0);
	add_func    (0X408230,0X4082BA);
	set_func_flags(0X408230,0x400);
	set_frame_size(0X408230, 0X90, 0, 0);
	add_func    (0X4082E8,0X40835C);
	set_func_flags(0X4082E8,0x400);
	set_frame_size(0X4082E8, 0X40, 0, 0);
	define_local_var(0X4082E8, 0X40835C, "[bp-0X3E]", "destination");
	define_local_var(0X4082E8, 0X40835C, "[bp-0X20]", "source");
	add_func    (0X40837C,0X4084E6);
	set_func_flags(0X40837C,0x400);
	set_frame_size(0X40837C, 0X30, 0, 0);
	add_func    (0X4085A0,0X4085FA);
	set_func_flags(0X4085A0,0x400);
	set_frame_size(0X4085A0, 0X10, 0, 0);
	add_func    (0X408620,0X4086B2);
	set_func_flags(0X408620,0x400);
	set_frame_size(0X408620, 0X10, 0, 0);
	add_func    (0X4086E8,0X40872A);
	set_func_flags(0X4086E8,0x400);
	set_frame_size(0X4086E8, 0X10, 0, 0);
	add_func    (0X408744,0X408906);
	set_func_flags(0X408744,0x400);
	SetType(0X408744, "void __fastcall sub_408744(void *a1);");
	set_frame_size(0X408744, 0X50, 0, 0);
	define_local_var(0X408744, 0X408906, "[bp-0X48]", "aesKey");
	add_func    (0X4089D0,0X408A1A);
	set_func_flags(0X4089D0,0x400);
	set_frame_size(0X4089D0, 0X10, 0, 0);
	add_func    (0X408A40,0X408A68);
	set_func_flags(0X408A40,0x400);
	set_frame_size(0X408A40, 0X8, 0, 0);
	add_func    (0X408A6C,0X408AA8);
	set_func_flags(0X408A6C,0x400);
	set_frame_size(0X408A6C, 0XC, 0, 0);
	add_func    (0X408AAC,0X408ABE);
	set_func_flags(0X408AAC,0x400);
	add_func    (0X408AC4,0X408B06);
	set_func_flags(0X408AC4,0x400);
	set_frame_size(0X408AC4, 0X18, 0, 0);
	add_func    (0X408B10,0X408B26);
	set_func_flags(0X408B10,0x400);
	set_frame_size(0X408B10, 0X8, 0, 0);
	add_func    (0X408B26,0X408B38);
	set_func_flags(0X408B26,0x400);
	set_frame_size(0X408B26, 0X8, 0, 0);
	add_func    (0X408B38,0X408B3E);
	set_func_flags(0X408B38,0x400);
	add_func    (0X408B44,0X408B4A);
	set_func_flags(0X408B44,0x400);
	add_func    (0X408B50,0X408B92);
	set_func_flags(0X408B50,0x400);
	set_frame_size(0X408B50, 0X20, 0, 0);
	add_func    (0X408B9C,0X408BC6);
	set_func_flags(0X408B9C,0x400);
	set_frame_size(0X408B9C, 0X10, 0, 0);
	add_func    (0X408BC8,0X408C66);
	set_func_flags(0X408BC8,0x400);
	set_frame_size(0X408BC8, 0X30, 0, 0);
	add_func    (0X408C8C,0X408CA4);
	set_func_flags(0X408C8C,0x400);
	set_frame_size(0X408C8C, 0X8, 0, 0);
	add_func    (0X408CA8,0X408D2C);
	set_func_flags(0X408CA8,0x400);
	SetType(0X408CA8, "void __fastcall xor_128bit_3bufs(unsigned __int8 *out, const unsigned __int8 *src1, const unsigned __int8 *src2);");
	set_frame_size(0X408CA8, 0X8, 0, 0);
	add_func    (0X408D2C,0X408D42);
	set_func_flags(0X408D2C,0x400);
	SetType(0X408D2C, "int TRACE_DEBUG_printf(const char *fmt, ...);");
	set_frame_size(0X408D2C, 0X18, 0, 0);
	define_local_var(0X408D2C, 0X408D42, "[bp-0X10]", "varg_r0");
	define_local_var(0X408D2C, 0X408D42, "[bp-0XC]", "varg_r1");
	define_local_var(0X408D2C, 0X408D42, "[bp-0X8]", "varg_r2");
	define_local_var(0X408D2C, 0X408D42, "[bp-0X4]", "varg_r3");
	add_func    (0X408D48,0X408D60);
	set_func_flags(0X408D48,0x400);
	add_func    (0X408D60,0X408D74);
	set_func_flags(0X408D60,0x400);
	set_frame_size(0X408D60, 0X8, 0, 0);
	add_func    (0X408D74,0X408DD4);
	set_func_flags(0X408D74,0x400);
	add_func    (0X408DD4,0X408E00);
	set_func_flags(0X408DD4,0x400);
	add_func    (0X408E00,0X408E14);
	set_func_flags(0X408E00,0x400);
	add_func    (0X408E14,0X408E46);
	set_func_flags(0X408E14,0x400);
	set_frame_size(0X408E14, 0X10, 0, 0);
	add_func    (0X408E4C,0X408E60);
	set_func_flags(0X408E4C,0x400);
	add_func    (0X408E60,0X408E9C);
	set_func_flags(0X408E60,0x400);
	set_frame_size(0X408E60, 0X8, 0, 0);
	add_func    (0X408EA0,0X408EB4);
	set_func_flags(0X408EA0,0x400);
	add_func    (0X408EB4,0X408ED8);
	set_func_flags(0X408EB4,0x400);
	add_func    (0X408EDC,0X408F12);
	set_func_flags(0X408EDC,0x400);
	set_frame_size(0X408EDC, 0X8, 0, 0);
	add_func    (0X408F20,0X408F44);
	set_func_flags(0X408F20,0x400);
	add_func    (0X408F4C,0X408F64);
	set_func_flags(0X408F4C,0x400);
	add_func    (0X408F68,0X408FA6);
	set_func_flags(0X408F68,0x400);
	SetType(0X408F68, "bool __fastcall compute_key_data(__int16 seed, uint8_t *buf, int buflen);");
	set_frame_size(0X408F68, 0X18, 0, 0);
	add_func    (0X408FAC,0X408FB2);
	set_func_flags(0X408FAC,0x400);
	add_func    (0X408FB4,0X408FD4);
	set_func_flags(0X408FB4,0x400);
	set_frame_size(0X408FB4, 0X8, 0, 0);
	add_func    (0X408FD8,0X408FEA);
	set_func_flags(0X408FD8,0x400);
	SetType(0X408FD8, "bool __fastcall compute_decrypt_key_A(uint8_t *key, int klen);");
	set_frame_size(0X408FD8, 0X8, 0, 0);
	add_func    (0X408FEC,0X409008);
	set_func_flags(0X408FEC,0x400);
	add_func    (0X40900C,0X409022);
	set_func_flags(0X40900C,0x400);
	set_frame_size(0X40900C, 0X8, 0, 0);
	add_func    (0X40902C,0X4090D2);
	set_func_flags(0X40902C,0x400);
	SetType(0X40902C, "signed int __fastcall flash_erase1(unsigned int a1, unsigned int a2);");
	set_frame_size(0X40902C, 0X20, 0, 0);
	add_func    (0X409148,0X4091C0);
	set_func_flags(0X409148,0x400);
	set_frame_size(0X409148, 0X20, 0, 0);
	add_func    (0X409200,0X409274);
	set_func_flags(0X409200,0x400);
	set_frame_size(0X409200, 0X820, 0, 0);
	add_func    (0X409274,0X4092A2);
	set_func_flags(0X409274,0x400);
	set_frame_size(0X409274, 0X78, 0, 0);
	define_local_var(0X409274, 0X4092A2, "[bp-0X6F]", "dst");
	define_local_var(0X409274, 0X4092A2, "[bp-0X10]", "varg_r0");
	define_local_var(0X409274, 0X4092A2, "[bp-0XC]", "varg_r1");
	define_local_var(0X409274, 0X4092A2, "[bp-0X8]", "varg_r2");
	define_local_var(0X409274, 0X4092A2, "[bp-0X4]", "varg_r3");
	add_func    (0X4092A4,0X4092B6);
	set_func_flags(0X4092A4,0x400);
	add_func    (0X4092BC,0X4092E0);
	set_func_flags(0X4092BC,0x400);
	SetType(0X4092BC, "void __cdecl free_lock(volatile uint8_t *Lock_Variable);");
	set_func_cmt(0X4092BC,	"Semaphore free", 1);
	add_func    (0X4092E0,0X409322);
	set_func_flags(0X4092E0,0x400);
	set_frame_size(0X4092E0, 0X8, 0, 0);
	add_func    (0X409328,0X409344);
	set_func_flags(0X409328,0x400);
	set_frame_size(0X409328, 0X8, 0, 0);
	add_func    (0X409348,0X409366);
	set_func_flags(0X409348,0x400);
	set_frame_size(0X409348, 0XC, 0, 0);
	add_func    (0X40936C,0X409382);
	set_func_flags(0X40936C,0x400);
	set_frame_size(0X40936C, 0X8, 0, 0);
	add_func    (0X409388,0X4093C2);
	set_func_flags(0X409388,0x400);
	SetType(0X409388, "void __cdecl get_lock(volatile uint8_t *Lock_Variable);");
	set_func_cmt(0X409388,	"Semaphore lock", 1);
	add_func    (0X4093C4,0X4093E0);
	set_func_flags(0X4093C4,0x400);
	add_func    (0X4093F0,0X409404);
	set_func_flags(0X4093F0,0x400);
	set_frame_size(0X4093F0, 0X8, 0, 0);
	add_func    (0X409404,0X409418);
	set_func_flags(0X409404,0x400);
	add_func    (0X40941C,0X409422);
	set_func_flags(0X40941C,0x400);
	add_func    (0X409428,0X409442);
	set_func_flags(0X409428,0x400);
	set_frame_size(0X409428, 0X8, 0, 0);
	add_func    (0X409448,0X409456);
	set_func_flags(0X409448,0x400);
	set_frame_size(0X409448, 0X8, 0, 0);
	add_func    (0X40945C,0X40948A);
	set_func_flags(0X40945C,0x400);
	set_frame_size(0X40945C, 0X8, 0, 0);
	add_func    (0X409490,0X4094B8);
	set_func_flags(0X409490,0x400);
	set_frame_size(0X409490, 0X8, 0, 0);
	add_func    (0X4094BC,0X4094F6);
	set_func_flags(0X4094BC,0x400);
	add_func    (0X4094FC,0X4095F0);
	set_func_flags(0X4094FC,0x400);
	set_frame_size(0X4094FC, 0X20, 0, 0);
	add_func    (0X409660,0X409666);
	set_func_flags(0X409660,0x400);
	add_func    (0X409668,0X40973E);
	set_func_flags(0X409668,0x400);
	set_frame_size(0X409668, 0X28, 0, 0);
	add_func    (0X4097D0,0X4097FE);
	set_func_flags(0X4097D0,0x400);
	set_frame_size(0X4097D0, 0X8, 0, 0);
	add_func    (0X409804,0X409824);
	set_func_flags(0X409804,0x400);
	set_frame_size(0X409804, 0X8, 0, 0);
	add_func    (0X409828,0X409834);
	set_func_flags(0X409828,0x400);
	add_func    (0X409834,0X409846);
	set_func_flags(0X409834,0x400);
	add_func    (0X409846,0X40987C);
	set_func_flags(0X409846,0x400);
	set_frame_size(0X409846, 0XC, 0, 0);
	add_func    (0X40987C,0X409886);
	set_func_flags(0X40987C,0x400);
	add_func    (0X40988C,0X4098B4);
	set_func_flags(0X40988C,0x400);
	set_frame_size(0X40988C, 0X8, 0, 0);
	add_func    (0X4098B8,0X4098BC);
	set_func_flags(0X4098B8,0x400);
	add_func    (0X4098BC,0X4098E6);
	set_func_flags(0X4098BC,0x400);
	set_frame_size(0X4098BC, 0X8, 0, 0);
	add_func    (0X4099BC,0X409A06);
	set_func_flags(0X4099BC,0x400);
	set_frame_size(0X4099BC, 0X10, 0, 0);
	add_func    (0X409A06,0X409A26);
	set_func_flags(0X409A06,0x400);
	set_frame_size(0X409A06, 0X8, 0, 0);
	add_func    (0X409A28,0X409C42);
	set_func_flags(0X409A28,0x400);
	set_frame_size(0X409A28, 0X20, 0, 0);
	add_func    (0X409C48,0X409C52);
	set_func_flags(0X409C48,0x400);
	add_func    (0X409C52,0X409C8A);
	set_func_flags(0X409C52,0x400);
	SetType(0X409C52, "int __fastcall TRACE_DEBUG_printf_va(int a1, const char *fmt, va_list va);");
	set_frame_size(0X409C52, 0X50, 0, 0);
	add_func    (0X409C8A,0X409CA2);
	set_func_flags(0X409C8A,0x400);
	set_frame_size(0X409C8A, 0X8, 0, 0);
	add_func    (0X409CA2,0X409CB2);
	set_func_flags(0X409CA2,0x400);
	add_func    (0X409CB2,0X409CC0);
	set_func_flags(0X409CB2,0x400);
	add_func    (0X409CC0,0X409CDC);
	set_func_flags(0X409CC0,0x400);
	set_frame_size(0X409CC0, 0X8, 0, 0);
	add_func    (0X409CDC,0X409D2E);
	set_func_flags(0X409CDC,0x400);
	set_frame_size(0X409CDC, 0X20, 0, 0);
	add_func    (0X409D2E,0X409D4A);
	set_func_flags(0X409D2E,0x400);
	set_frame_size(0X409D2E, 0X8, 0, 0);
	add_func    (0X409D4A,0X409D9C);
	set_func_flags(0X409D4A,0x400);
	set_frame_size(0X409D4A, 0X20, 0, 0);
	add_func    (0X409D9C,0X409DFA);
	set_func_flags(0X409D9C,0x400);
	set_frame_size(0X409D9C, 0X28, 0, 0);
	add_func    (0X409E10,0X409E38);
	set_func_flags(0X409E10,0x400);
	set_frame_size(0X409E10, 0XC, 0, 0);
	add_func    (0X409E38,0X409EB0);
	set_func_flags(0X409E38,0x400);
	set_frame_size(0X409E38, 0X10, 0, 0);
	add_func    (0X409EB0,0X409F92);
	set_func_flags(0X409EB0,0x400);
	set_frame_size(0X409EB0, 0X28, 0, 0);
	add_func    (0X409FD8,0X40A10A);
	set_func_flags(0X409FD8,0x400);
	set_frame_size(0X409FD8, 0X20, 0, 0);
	add_func    (0X40A16C,0X40A1D6);
	set_func_flags(0X40A16C,0x400);
	set_frame_size(0X40A16C, 0X18, 0, 0);
	add_func    (0X40A1DC,0X40A21E);
	set_func_flags(0X40A1DC,0x400);
	set_frame_size(0X40A1DC, 0X18, 0, 0);
	add_func    (0X40A22E,0X40A27C);
	set_func_flags(0X40A22E,0x400);
	SetType(0X40A22E, "uint8_t __cdecl static TWID_XdmaConfigureRead(struct TwihsDma *pTwiXdma, uint8_t *buf, uint32_t len);");
	set_frame_size(0X40A22E, 0X38, 0, 0);
	define_local_var(0X40A22E, 0X40A27C, "[bp-0X38]", "dwXdmaDescAddr");
	define_local_var(0X40A22E, 0X40A27C, "[bp-0X34]", "dwXdmaIntEn");
	add_func    (0X40A27C,0X40A2CA);
	set_func_flags(0X40A27C,0x400);
	SetType(0X40A27C, "uint8_t __cdecl static TWID_XdmaConfigureWrite(struct TwihsDma *pTwiXdma, uint8_t *buf, uint32_t len);");
	set_frame_size(0X40A27C, 0X38, 0, 0);
	define_local_var(0X40A27C, 0X40A2CA, "[bp-0X38]", "dwXdmaDescAddr");
	define_local_var(0X40A27C, 0X40A2CA, "[bp-0X34]", "dwXdmaIntEn");
	add_func    (0X40A2CC,0X40A2D0);
	set_func_flags(0X40A2CC,0x400);
	SetType(0X40A2CC, "struct sXdmad *XDMAD_GetGlobal(void);");
	add_func    (0X40A2D4,0X40A30A);
	set_func_flags(0X40A2D4,0x400);
	set_frame_size(0X40A2D4, 0X18, 0, 0);
	add_func    (0X40A30A,0X40A348);
	set_func_flags(0X40A30A,0x400);
	set_frame_size(0X40A30A, 0X18, 0, 0);
	add_func    (0X40A348,0X40A370);
	set_func_flags(0X40A348,0x400);
	set_frame_size(0X40A348, 0X10, 0, 0);
	add_func    (0X40A370,0X40A3C8);
	set_func_flags(0X40A370,0x400);
	set_frame_size(0X40A370, 0X28, 0, 0);
	add_func    (0X40A3E4,0X40A428);
	set_func_flags(0X40A3E4,0x400);
	set_frame_size(0X40A3E4, 0X10, 0, 0);
	add_func    (0X40A454,0X40A492);
	set_func_flags(0X40A454,0x400);
	set_frame_size(0X40A454, 0X8, 0, 0);
	add_func    (0X40A498,0X40A4B6);
	set_func_flags(0X40A498,0x400);
	set_frame_size(0X40A498, 0X10, 0, 0);
	add_func    (0X40A4B8,0X40A518);
	set_func_flags(0X40A4B8,0x400);
	set_frame_size(0X40A4B8, 0X10, 0, 0);
	add_func    (0X40A520,0X40A55E);
	set_func_flags(0X40A520,0x400);
	set_frame_size(0X40A520, 0X20, 0, 0);
	add_func    (0X40A564,0X40A65E);
	set_func_flags(0X40A564,0x400);
	set_frame_size(0X40A564, 0X18, 0, 0);
	add_func    (0X40A660,0X40A7C0);
	set_func_flags(0X40A660,0x400);
	set_frame_size(0X40A660, 0X20, 0, 0);
	add_func    (0X40A838,0X40A860);
	set_func_flags(0X40A838,0x400);
	set_frame_size(0X40A838, 0X18, 0, 0);
	add_func    (0X40A864,0X40A8E2);
	set_func_flags(0X40A864,0x400);
	set_frame_size(0X40A864, 0X20, 0, 0);
	add_func    (0X40A8E2,0X40A954);
	set_func_flags(0X40A8E2,0x400);
	set_frame_size(0X40A8E2, 0X20, 0, 0);
	add_func    (0X40A954,0X40AA68);
	set_func_flags(0X40A954,0x400);
	set_frame_size(0X40A954, 0X30, 0, 0);
	add_func    (0X40AA94,0X40AAB4);
	set_func_flags(0X40AA94,0x400);
	set_frame_size(0X40AA94, 0X10, 0, 0);
	add_func    (0X40AAB8,0X40AABE);
	set_func_flags(0X40AAB8,0x400);
	add_func    (0X40AAF8,0X40AB74);
	set_func_flags(0X40AAF8,0x400);
	set_frame_size(0X40AAF8, 0X18, 0, 0);
	add_func    (0X40AB78,0X40AB96);
	set_func_flags(0X40AB78,0x400);
	set_frame_size(0X40AB78, 0X8, 0, 0);
	add_func    (0X40ABA4,0X40ABCE);
	set_func_flags(0X40ABA4,0x400);
	set_frame_size(0X40ABA4, 0X8, 0, 0);
	add_func    (0X40ABEC,0X40AC16);
	set_func_flags(0X40ABEC,0x400);
	set_frame_size(0X40ABEC, 0X8, 0, 0);
	add_func    (0X40AC16,0X40AC34);
	set_func_flags(0X40AC16,0x400);
	set_frame_size(0X40AC16, 0X8, 0, 0);
	add_func    (0X40AC34,0X40AC80);
	set_func_flags(0X40AC34,0x400);
	set_frame_size(0X40AC34, 0X10, 0, 0);
	add_func    (0X40AC80,0X40ACAC);
	set_func_flags(0X40AC80,0x400);
	set_frame_size(0X40AC80, 0X8, 0, 0);
	add_func    (0X40ACB0,0X40AD02);
	set_func_flags(0X40ACB0,0x400);
	set_frame_size(0X40ACB0, 0X10, 0, 0);
	add_func    (0X40AD04,0X40AD54);
	set_func_flags(0X40AD04,0x400);
	set_frame_size(0X40AD04, 0X18, 0, 0);
	add_func    (0X40AD60,0X40ADB6);
	set_func_flags(0X40AD60,0x400);
	set_frame_size(0X40AD60, 0X8, 0, 0);
	add_func    (0X40ADBC,0X40ADF4);
	set_func_flags(0X40ADBC,0x400);
	set_frame_size(0X40ADBC, 0X8, 0, 0);
	add_func    (0X40ADF4,0X40AEB0);
	set_func_flags(0X40ADF4,0x400);
	set_frame_size(0X40ADF4, 0X40, 0, 0);
	add_func    (0X40AEDC,0X40AF08);
	set_func_flags(0X40AEDC,0x400);
	set_frame_size(0X40AEDC, 0X10, 0, 0);
	add_func    (0X40AF08,0X40AF4E);
	set_func_flags(0X40AF08,0x400);
	set_frame_size(0X40AF08, 0X14, 0, 0);
	add_func    (0X40AF50,0X40AFD6);
	set_func_flags(0X40AF50,0x400);
	set_frame_size(0X40AF50, 0X38, 0, 0);
	add_func    (0X40B004,0X40B048);
	set_func_flags(0X40B004,0x400);
	set_frame_size(0X40B004, 0X18, 0, 0);
	add_func    (0X40B048,0X40B070);
	set_func_flags(0X40B048,0x400);
	set_frame_size(0X40B048, 0X8, 0, 0);
	add_func    (0X40B078,0X40B08C);
	set_func_flags(0X40B078,0x400);
	add_func    (0X40B090,0X40B0BC);
	set_func_flags(0X40B090,0x400);
	set_frame_size(0X40B090, 0X8, 0, 0);
	add_func    (0X40B0D0,0X40B0D6);
	set_func_flags(0X40B0D0,0x400);
	add_func    (0X40B0DC,0X40B11E);
	set_func_flags(0X40B0DC,0x400);
	set_frame_size(0X40B0DC, 0X18, 0, 0);
	add_func    (0X40B134,0X40B1B2);
	set_func_flags(0X40B134,0x400);
	set_frame_size(0X40B134, 0X18, 0, 0);
	add_func    (0X40B1D8,0X40B274);
	set_func_flags(0X40B1D8,0x400);
	set_frame_size(0X40B1D8, 0X20, 0, 0);
	add_func    (0X40B294,0X40B2CC);
	set_func_flags(0X40B294,0x400);
	set_frame_size(0X40B294, 0X8, 0, 0);
	add_func    (0X40B2CC,0X40B2E4);
	set_func_flags(0X40B2CC,0x400);
	set_frame_size(0X40B2CC, 0X8, 0, 0);
	add_func    (0X40B2EC,0X40B34E);
	set_func_flags(0X40B2EC,0x400);
	set_frame_size(0X40B2EC, 0X18, 0, 0);
	add_func    (0X40B35C,0X40B3C0);
	set_func_flags(0X40B35C,0x400);
	add_func    (0X40B3C4,0X40B3EC);
	set_func_flags(0X40B3C4,0x400);
	set_frame_size(0X40B3C4, 0X8, 0, 0);
	add_func    (0X40B3EC,0X40B414);
	set_func_flags(0X40B3EC,0x400);
	set_frame_size(0X40B3EC, 0X8, 0, 0);
	add_func    (0X40B414,0X40B43C);
	set_func_flags(0X40B414,0x400);
	set_frame_size(0X40B414, 0X8, 0, 0);
	add_func    (0X40B43C,0X40B464);
	set_func_flags(0X40B43C,0x400);
	set_frame_size(0X40B43C, 0X8, 0, 0);
	add_func    (0X40B464,0X40B478);
	set_func_flags(0X40B464,0x400);
	set_frame_size(0X40B464, 0X8, 0, 0);
	add_func    (0X40B478,0X40B48C);
	set_func_flags(0X40B478,0x400);
	set_frame_size(0X40B478, 0X8, 0, 0);
	add_func    (0X40B48C,0X40B4A0);
	set_func_flags(0X40B48C,0x400);
	set_frame_size(0X40B48C, 0X8, 0, 0);
	add_func    (0X40B4A0,0X40B4B4);
	set_func_flags(0X40B4A0,0x400);
	set_frame_size(0X40B4A0, 0X8, 0, 0);
	add_func    (0X40B4B4,0X40B4C2);
	set_func_flags(0X40B4B4,0x400);
	set_frame_size(0X40B4B4, 0X4, 0, 0);
	add_func    (0X40B4C2,0X40B4D8);
	set_func_flags(0X40B4C2,0x400);
	add_func    (0X40B4D8,0X40B4F0);
	set_func_flags(0X40B4D8,0x400);
	add_func    (0X40B4F0,0X40B4FC);
	set_func_flags(0X40B4F0,0x400);
	add_func    (0X40B4FC,0X40B564);
	set_func_flags(0X40B4FC,0x400);
	set_frame_size(0X40B4FC, 0X10, 0, 0);
	add_func    (0X40B5C4,0X40B5D6);
	set_func_flags(0X40B5C4,0x400);
	add_func    (0X40B5DC,0X40B63E);
	set_func_flags(0X40B5DC,0x400);
	set_frame_size(0X40B5DC, 0X10, 0, 0);
	add_func    (0X40B644,0X40B658);
	set_func_flags(0X40B644,0x400);
	set_frame_size(0X40B644, 0X8, 0, 0);
	add_func    (0X40B66C,0X40B692);
	set_func_flags(0X40B66C,0x400);
	add_func    (0X40B698,0X40B70A);
	set_func_flags(0X40B698,0x400);
	set_frame_size(0X40B698, 0X18, 0, 0);
	add_func    (0X40B70A,0X40B726);
	set_func_flags(0X40B70A,0x400);
	set_frame_size(0X40B70A, 0X10, 0, 0);
	add_func    (0X40B7A6,0X40B7F2);
	set_func_flags(0X40B7A6,0x400);
	set_frame_size(0X40B7A6, 0X18, 0, 0);
	add_func    (0X40B7F4,0X40B858);
	set_func_flags(0X40B7F4,0x400);
	set_frame_size(0X40B7F4, 0X10, 0, 0);
	add_func    (0X40B860,0X40B908);
	set_func_flags(0X40B860,0x400);
	set_frame_size(0X40B860, 0X10, 0, 0);
	add_func    (0X40B908,0X40B932);
	set_func_flags(0X40B908,0x400);
	set_frame_size(0X40B908, 0X8, 0, 0);
	add_func    (0X40B938,0X40B944);
	set_func_flags(0X40B938,0x400);
	add_func    (0X40B944,0X40B9C8);
	set_func_flags(0X40B944,0x400);
	set_frame_size(0X40B944, 0X20, 0, 0);
	add_func    (0X40B9C8,0X40B9EE);
	set_func_flags(0X40B9C8,0x400);
	set_frame_size(0X40B9C8, 0X8, 0, 0);
	add_func    (0X40B9F0,0X40BA30);
	set_func_flags(0X40B9F0,0x400);
	set_frame_size(0X40B9F0, 0X10, 0, 0);
	add_func    (0X40BA34,0X40BA64);
	set_func_flags(0X40BA34,0x400);
	SetType(0X40BA34, "signed int __fastcall flash_erase_block(struct FlashBlock *blk);");
	set_frame_size(0X40BA34, 0X10, 0, 0);
	add_func    (0X40BA64,0X40BA8A);
	set_func_flags(0X40BA64,0x400);
	add_func    (0X40BA98,0X40BB10);
	set_func_flags(0X40BA98,0x400);
	set_frame_size(0X40BA98, 0X10, 0, 0);
	add_func    (0X40BB14,0X40BB32);
	set_func_flags(0X40BB14,0x400);
	add_func    (0X40BB38,0X40BB54);
	set_func_flags(0X40BB38,0x400);
	set_frame_size(0X40BB38, 0X10, 0, 0);
	add_func    (0X40BB54,0X40BB68);
	set_func_flags(0X40BB54,0x400);
	add_func    (0X40BB6C,0X40BBCE);
	set_func_flags(0X40BB6C,0x400);
	set_frame_size(0X40BB6C, 0X10, 0, 0);
	add_func    (0X40BC34,0X40BC8A);
	set_func_flags(0X40BC34,0x400);
	set_frame_size(0X40BC34, 0X8, 0, 0);
	add_func    (0X40BC90,0X40BCBC);
	set_func_flags(0X40BC90,0x400);
	set_frame_size(0X40BC90, 0X8, 0, 0);
	add_func    (0X40BCC0,0X40BCDC);
	set_func_flags(0X40BCC0,0x400);
	set_frame_size(0X40BCC0, 0X8, 0, 0);
	add_func    (0X40BCDC,0X40BCF4);
	set_func_flags(0X40BCDC,0x400);
	set_frame_size(0X40BCDC, 0X8, 0, 0);
	add_func    (0X40BCF8,0X40BD0C);
	set_func_flags(0X40BCF8,0x400);
	set_frame_size(0X40BCF8, 0X8, 0, 0);
	add_func    (0X40BD0C,0X40BD2A);
	set_func_flags(0X40BD0C,0x400);
	set_frame_size(0X40BD0C, 0XC, 0, 0);
	add_func    (0X40BD2C,0X40BD76);
	set_func_flags(0X40BD2C,0x400);
	set_frame_size(0X40BD2C, 0X8, 0, 0);
	add_func    (0X40BDB0,0X40BE16);
	set_func_flags(0X40BDB0,0x400);
	set_frame_size(0X40BDB0, 0X18, 0, 0);
	add_func    (0X40BE44,0X40BE7C);
	set_func_flags(0X40BE44,0x400);
	set_frame_size(0X40BE44, 0X10, 0, 0);
	add_func    (0X40BE8C,0X40BF0E);
	set_func_flags(0X40BE8C,0x400);
	add_func    (0X40BF10,0X40BF32);
	set_func_flags(0X40BF10,0x400);
	set_frame_size(0X40BF10, 0X8, 0, 0);
	add_func    (0X40BF3C,0X40BF5E);
	set_func_flags(0X40BF3C,0x400);
	set_frame_size(0X40BF3C, 0X8, 0, 0);
	add_func    (0X40BF68,0X40BF72);
	set_func_flags(0X40BF68,0x400);
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	split_sreg_range(0X400000,"T",0,3);
	split_sreg_range(0X400140,"T",0X1,3);
	split_sreg_range(0X400148,"T",0X1,3);
	split_sreg_range(0X40015E,"T",0X1,3);
	split_sreg_range(0X4001F8,"T",0X1,3);
	split_sreg_range(0X400210,"T",0X1,3);
	split_sreg_range(0X4002A0,"T",0X1,3);
	split_sreg_range(0X4002C4,"T",0X1,3);
	split_sreg_range(0X4002C8,"T",0X1,3);
	split_sreg_range(0X4002DC,"T",0X1,3);
	split_sreg_range(0X4002E8,"T",0X1,3);
	split_sreg_range(0X4002EC,"T",0X1,3);
	split_sreg_range(0X4002FC,"T",0X1,3);
	split_sreg_range(0X400318,"T",0X1,3);
	split_sreg_range(0X400320,"T",0X1,3);
	split_sreg_range(0X400338,"T",0X1,3);
	split_sreg_range(0X400348,"T",0X1,3);
	split_sreg_range(0X40034A,"T",0X1,3);
	split_sreg_range(0X400350,"T",0X1,3);
	split_sreg_range(0X40035E,"T",0X1,3);
	split_sreg_range(0X400364,"T",0X1,3);
	split_sreg_range(0X400372,"T",0X1,3);
	split_sreg_range(0X400380,"T",0X1,3);
	split_sreg_range(0X400386,"T",0X1,3);
	split_sreg_range(0X400398,"T",0X1,3);
	split_sreg_range(0X40039C,"T",0X1,3);
	split_sreg_range(0X4003A0,"T",0X1,3);
	split_sreg_range(0X4003A2,"T",0X1,3);
	split_sreg_range(0X4003AC,"T",0X1,3);
	split_sreg_range(0X4003C2,"T",0X1,3);
	split_sreg_range(0X4003CC,"T",0X1,3);
	split_sreg_range(0X4003D8,"T",0X1,3);
	split_sreg_range(0X4003F8,"T",0X1,3);
	split_sreg_range(0X400402,"T",0X1,3);
	split_sreg_range(0X400408,"T",0X1,3);
	split_sreg_range(0X40040C,"T",0X1,3);
	split_sreg_range(0X400410,"T",0X1,3);
	split_sreg_range(0X40041A,"T",0X1,3);
	split_sreg_range(0X40042E,"T",0X1,3);
	split_sreg_range(0X400450,"T",0X1,3);
	split_sreg_range(0X400460,"T",0X1,3);
	split_sreg_range(0X400466,"T",0X1,3);
	split_sreg_range(0X40046E,"T",0X1,3);
	split_sreg_range(0X400480,"T",0X1,3);
	split_sreg_range(0X400498,"T",0X1,3);
	split_sreg_range(0X4004A0,"T",0X1,3);
	split_sreg_range(0X4004A6,"T",0X1,3);
	split_sreg_range(0X4004C2,"T",0X1,3);
	split_sreg_range(0X4004CE,"T",0X1,3);
	split_sreg_range(0X4004E4,"T",0X1,3);
	split_sreg_range(0X4004FA,"T",0X1,3);
	split_sreg_range(0X400508,"T",0X1,3);
	split_sreg_range(0X400516,"T",0X1,3);
	split_sreg_range(0X40051A,"T",0X1,3);
	split_sreg_range(0X400536,"T",0X1,3);
	split_sreg_range(0X40053E,"T",0X1,3);
	split_sreg_range(0X400548,"T",0X1,3);
	split_sreg_range(0X400560,"T",0X1,3);
	split_sreg_range(0X400582,"T",0X1,3);
	split_sreg_range(0X400594,"T",0X1,3);
	split_sreg_range(0X4005A4,"T",0X1,3);
	split_sreg_range(0X4005A8,"T",0X1,3);
	split_sreg_range(0X4005BE,"T",0X1,3);
	split_sreg_range(0X4005CC,"T",0X1,3);
	split_sreg_range(0X4005D4,"T",0X1,3);
	split_sreg_range(0X4005EE,"T",0X1,3);
	split_sreg_range(0X4005F0,"T",0X1,3);
	split_sreg_range(0X400606,"T",0X1,3);
	split_sreg_range(0X400612,"T",0X1,3);
	split_sreg_range(0X40061A,"T",0X1,3);
	split_sreg_range(0X40061C,"T",0X1,3);
	split_sreg_range(0X40062C,"T",0X1,3);
	split_sreg_range(0X40064C,"T",0X1,3);
	split_sreg_range(0X400650,"T",0X1,3);
	split_sreg_range(0X400654,"T",0X1,3);
	split_sreg_range(0X400658,"T",0X1,3);
	split_sreg_range(0X40065E,"T",0X1,3);
	split_sreg_range(0X400662,"T",0X1,3);
	split_sreg_range(0X40066C,"T",0X1,3);
	split_sreg_range(0X400682,"T",0X1,3);
	split_sreg_range(0X40068C,"T",0X1,3);
	split_sreg_range(0X4006A6,"T",0X1,3);
	split_sreg_range(0X4006AC,"T",0X1,3);
	split_sreg_range(0X4006B6,"T",0X1,3);
	split_sreg_range(0X4006BA,"T",0X1,3);
	split_sreg_range(0X4006C6,"T",0X1,3);
	split_sreg_range(0X4006D6,"T",0X1,3);
	split_sreg_range(0X4006DA,"T",0X1,3);
	split_sreg_range(0X4006EC,"T",0X1,3);
	split_sreg_range(0X4006EE,"T",0X1,3);
	split_sreg_range(0X4006FA,"T",0X1,3);
	split_sreg_range(0X400708,"T",0X1,3);
	split_sreg_range(0X400720,"T",0X1,3);
	split_sreg_range(0X400722,"T",0X1,3);
	split_sreg_range(0X400728,"T",0X1,3);
	split_sreg_range(0X40072E,"T",0X1,3);
	split_sreg_range(0X400736,"T",0X1,3);
	split_sreg_range(0X40074C,"T",0X1,3);
	split_sreg_range(0X400750,"T",0X1,3);
	split_sreg_range(0X400756,"T",0X1,3);
	split_sreg_range(0X400758,"T",0X1,3);
	split_sreg_range(0X400760,"T",0X1,3);
	split_sreg_range(0X400762,"T",0X1,3);
	split_sreg_range(0X40076A,"T",0X1,3);
	split_sreg_range(0X400778,"T",0X1,3);
	split_sreg_range(0X4007B0,"T",0X1,3);
	split_sreg_range(0X4007BA,"T",0X1,3);
	split_sreg_range(0X4007CE,"T",0X1,3);
	split_sreg_range(0X4007DE,"T",0X1,3);
	split_sreg_range(0X400802,"T",0X1,3);
	split_sreg_range(0X40080A,"T",0X1,3);
	split_sreg_range(0X400820,"T",0X1,3);
	split_sreg_range(0X400866,"T",0X1,3);
	split_sreg_range(0X400894,"T",0X1,3);
	split_sreg_range(0X4008AA,"T",0X1,3);
	split_sreg_range(0X4008AE,"T",0X1,3);
	split_sreg_range(0X4008B8,"T",0X1,3);
	split_sreg_range(0X4008F8,"T",0X1,3);
	split_sreg_range(0X4008FC,"T",0X1,3);
	split_sreg_range(0X40092C,"T",0X1,3);
	split_sreg_range(0X400934,"T",0X1,3);
	split_sreg_range(0X400960,"T",0X1,3);
	split_sreg_range(0X400968,"T",0X1,3);
	split_sreg_range(0X40096A,"T",0X1,3);
	split_sreg_range(0X400972,"T",0X1,3);
	split_sreg_range(0X40097A,"T",0X1,3);
	split_sreg_range(0X40097C,"T",0X1,3);
	split_sreg_range(0X400984,"T",0X1,3);
	split_sreg_range(0X4009A4,"T",0X1,3);
	split_sreg_range(0X4009A6,"T",0X1,3);
	split_sreg_range(0X4009AE,"T",0X1,3);
	split_sreg_range(0X4009B0,"T",0X1,3);
	split_sreg_range(0X4009C8,"T",0X1,3);
	split_sreg_range(0X4009CC,"T",0X1,3);
	split_sreg_range(0X4009DE,"T",0X1,3);
	split_sreg_range(0X4009F0,"T",0X1,3);
	split_sreg_range(0X4009FE,"T",0X1,3);
	split_sreg_range(0X400A08,"T",0X1,3);
	split_sreg_range(0X400A18,"T",0X1,3);
	split_sreg_range(0X400A2E,"T",0X1,3);
	split_sreg_range(0X400A32,"T",0X1,3);
	split_sreg_range(0X400A36,"T",0X1,3);
	split_sreg_range(0X400A44,"T",0X1,3);
	split_sreg_range(0X400A4C,"T",0X1,3);
	split_sreg_range(0X400A58,"T",0X1,3);
	split_sreg_range(0X400A5A,"T",0X1,3);
	split_sreg_range(0X400A6A,"T",0X1,3);
	split_sreg_range(0X400A90,"T",0X1,3);
	split_sreg_range(0X400AA8,"T",0X1,3);
	split_sreg_range(0X400AAA,"T",0X1,3);
	split_sreg_range(0X400AB6,"T",0X1,3);
	split_sreg_range(0X400ABA,"T",0X1,3);
	split_sreg_range(0X400ABE,"T",0X1,3);
	split_sreg_range(0X400ACE,"T",0X1,3);
	split_sreg_range(0X400AD8,"T",0X1,3);
	split_sreg_range(0X400AF4,"T",0X1,3);
	split_sreg_range(0X400AFC,"T",0X1,3);
	split_sreg_range(0X400B1A,"T",0X1,3);
	split_sreg_range(0X400B38,"T",0X1,3);
	split_sreg_range(0X400B3A,"T",0X1,3);
	split_sreg_range(0X400B3C,"T",0X1,3);
	split_sreg_range(0X400B48,"T",0X1,3);
	split_sreg_range(0X400B54,"T",0X1,3);
	split_sreg_range(0X400B6C,"T",0X1,3);
	split_sreg_range(0X400B88,"T",0X1,3);
	split_sreg_range(0X400B94,"T",0X1,3);
	split_sreg_range(0X400B98,"T",0X1,3);
	split_sreg_range(0X400B9C,"T",0X1,3);
	split_sreg_range(0X400BB8,"T",0X1,3);
	split_sreg_range(0X400BE6,"T",0X1,3);
	split_sreg_range(0X400BF2,"T",0X1,3);
	split_sreg_range(0X400BF8,"T",0X1,3);
	split_sreg_range(0X400BFA,"T",0X1,3);
	split_sreg_range(0X400C04,"T",0X1,3);
	split_sreg_range(0X400C0E,"T",0X1,3);
	split_sreg_range(0X400C34,"T",0X1,3);
	split_sreg_range(0X400C3E,"T",0X1,3);
	split_sreg_range(0X400C50,"T",0X1,3);
	split_sreg_range(0X400C72,"T",0X1,3);
	split_sreg_range(0X400C78,"T",0X1,3);
	split_sreg_range(0X400C90,"T",0X1,3);
	split_sreg_range(0X400CA4,"T",0X1,3);
	split_sreg_range(0X400CB2,"T",0X1,3);
	split_sreg_range(0X400D34,"T",0X1,3);
	split_sreg_range(0X400D3C,"T",0X1,3);
	split_sreg_range(0X400D3E,"T",0X1,3);
	split_sreg_range(0X400D60,"T",0X1,3);
	split_sreg_range(0X400D7E,"T",0X1,3);
	split_sreg_range(0X400D8A,"T",0X1,3);
	split_sreg_range(0X400D9E,"T",0X1,3);
	split_sreg_range(0X400DA6,"T",0X1,3);
	split_sreg_range(0X400DB0,"T",0X1,3);
	split_sreg_range(0X400DBE,"T",0X1,3);
	split_sreg_range(0X400DC2,"T",0X1,3);
	split_sreg_range(0X400DC6,"T",0X1,3);
	split_sreg_range(0X400DCE,"T",0X1,3);
	split_sreg_range(0X400DDC,"T",0X1,3);
	split_sreg_range(0X400DDE,"T",0X1,3);
	split_sreg_range(0X400DE2,"T",0X1,3);
	split_sreg_range(0X400DE8,"T",0X1,3);
	split_sreg_range(0X400DEA,"T",0X1,3);
	split_sreg_range(0X400DEE,"T",0X1,3);
	split_sreg_range(0X400E2E,"T",0X1,3);
	split_sreg_range(0X400E40,"T",0X1,3);
	split_sreg_range(0X400E52,"T",0X1,3);
	split_sreg_range(0X400E54,"T",0X1,3);
	split_sreg_range(0X400E62,"T",0X1,3);
	split_sreg_range(0X400E66,"T",0X1,3);
	split_sreg_range(0X400E72,"T",0X1,3);
	split_sreg_range(0X400E80,"T",0X1,3);
	split_sreg_range(0X400E8A,"T",0X1,3);
	split_sreg_range(0X400E92,"T",0X1,3);
	split_sreg_range(0X400EA0,"T",0X1,3);
	split_sreg_range(0X400EA6,"T",0X1,3);
	split_sreg_range(0X400EB0,"T",0X1,3);
	split_sreg_range(0X400EB6,"T",0X1,3);
	split_sreg_range(0X400EC2,"T",0X1,3);
	split_sreg_range(0X400ECE,"T",0X1,3);
	split_sreg_range(0X400EE2,"T",0X1,3);
	split_sreg_range(0X400EEA,"T",0X1,3);
	split_sreg_range(0X400F12,"T",0X1,3);
	split_sreg_range(0X400F1C,"T",0X1,3);
	split_sreg_range(0X400F22,"T",0X1,3);
	split_sreg_range(0X400F2C,"T",0X1,3);
	split_sreg_range(0X400F38,"T",0X1,3);
	split_sreg_range(0X400F42,"T",0X1,3);
	split_sreg_range(0X400F44,"T",0X1,3);
	split_sreg_range(0X400F5A,"T",0X1,3);
	split_sreg_range(0X400F68,"T",0X1,3);
	split_sreg_range(0X400F6C,"T",0X1,3);
	split_sreg_range(0X400F84,"T",0X1,3);
	split_sreg_range(0X400FAA,"T",0X1,3);
	split_sreg_range(0X400FB8,"T",0X1,3);
	split_sreg_range(0X400FBE,"T",0X1,3);
	split_sreg_range(0X400FC8,"T",0X1,3);
	split_sreg_range(0X400FD8,"T",0X1,3);
	split_sreg_range(0X400FDA,"T",0X1,3);
	split_sreg_range(0X400FFA,"T",0X1,3);
	split_sreg_range(0X400FFC,"T",0X1,3);
	split_sreg_range(0X40100A,"T",0X1,3);
	split_sreg_range(0X401014,"T",0X1,3);
	split_sreg_range(0X401016,"T",0X1,3);
	split_sreg_range(0X40101A,"T",0X1,3);
	split_sreg_range(0X40101E,"T",0X1,3);
	split_sreg_range(0X401028,"T",0X1,3);
	split_sreg_range(0X401030,"T",0X1,3);
	split_sreg_range(0X40103A,"T",0X1,3);
	split_sreg_range(0X401048,"T",0X1,3);
	split_sreg_range(0X401064,"T",0X1,3);
	split_sreg_range(0X401066,"T",0X1,3);
	split_sreg_range(0X401070,"T",0X1,3);
	split_sreg_range(0X401088,"T",0X1,3);
	split_sreg_range(0X401098,"T",0X1,3);
	split_sreg_range(0X40109A,"T",0X1,3);
	split_sreg_range(0X4010A2,"T",0X1,3);
	split_sreg_range(0X4010B0,"T",0X1,3);
	split_sreg_range(0X4010CC,"T",0X1,3);
	split_sreg_range(0X4010DC,"T",0X1,3);
	split_sreg_range(0X4010EA,"T",0X1,3);
	split_sreg_range(0X4010F8,"T",0X1,3);
	split_sreg_range(0X4010FA,"T",0X1,3);
	split_sreg_range(0X401128,"T",0X1,3);
	split_sreg_range(0X401132,"T",0X1,3);
	split_sreg_range(0X401142,"T",0X1,3);
	split_sreg_range(0X401150,"T",0X1,3);
	split_sreg_range(0X401156,"T",0X1,3);
	split_sreg_range(0X401162,"T",0X1,3);
	split_sreg_range(0X401166,"T",0X1,3);
	split_sreg_range(0X40116A,"T",0X1,3);
	split_sreg_range(0X40117A,"T",0X1,3);
	split_sreg_range(0X401182,"T",0X1,3);
	split_sreg_range(0X4011A6,"T",0X1,3);
	split_sreg_range(0X4011BC,"T",0X1,3);
	split_sreg_range(0X4011C2,"T",0X1,3);
	split_sreg_range(0X4011CA,"T",0X1,3);
	split_sreg_range(0X4011CC,"T",0X1,3);
	split_sreg_range(0X4011FC,"T",0X1,3);
	split_sreg_range(0X40120C,"T",0X1,3);
	split_sreg_range(0X401214,"T",0X1,3);
	split_sreg_range(0X40122E,"T",0X1,3);
	split_sreg_range(0X401232,"T",0X1,3);
	split_sreg_range(0X401238,"T",0X1,3);
	split_sreg_range(0X40123A,"T",0X1,3);
	split_sreg_range(0X40124C,"T",0X1,3);
	split_sreg_range(0X401262,"T",0X1,3);
	split_sreg_range(0X401268,"T",0X1,3);
	split_sreg_range(0X40126C,"T",0X1,3);
	split_sreg_range(0X401276,"T",0X1,3);
	split_sreg_range(0X401294,"T",0X1,3);
	split_sreg_range(0X4012D8,"T",0X1,3);
	split_sreg_range(0X4012DA,"T",0X1,3);
	split_sreg_range(0X4012EA,"T",0X1,3);
	split_sreg_range(0X401302,"T",0X1,3);
	split_sreg_range(0X401306,"T",0X1,3);
	split_sreg_range(0X401312,"T",0X1,3);
	split_sreg_range(0X401330,"T",0X1,3);
	split_sreg_range(0X401340,"T",0X1,3);
	split_sreg_range(0X401344,"T",0X1,3);
	split_sreg_range(0X40135A,"T",0X1,3);
	split_sreg_range(0X40135E,"T",0X1,3);
	split_sreg_range(0X401370,"T",0X1,3);
	split_sreg_range(0X401382,"T",0X1,3);
	split_sreg_range(0X40138C,"T",0X1,3);
	split_sreg_range(0X40138E,"T",0X1,3);
	split_sreg_range(0X40139C,"T",0X1,3);
	split_sreg_range(0X4013A2,"T",0X1,3);
	split_sreg_range(0X4013AA,"T",0X1,3);
	split_sreg_range(0X4013B4,"T",0X1,3);
	split_sreg_range(0X4013F2,"T",0X1,3);
	split_sreg_range(0X401438,"T",0X1,3);
	split_sreg_range(0X401498,"T",0X1,3);
	split_sreg_range(0X40173A,"T",0X1,3);
	split_sreg_range(0X4017D0,"T",0X1,3);
	split_sreg_range(0X4017D4,"T",0X1,3);
	split_sreg_range(0X4017D8,"T",0X1,3);
	split_sreg_range(0X401812,"T",0X1,3);
	split_sreg_range(0X40181C,"T",0X1,3);
	split_sreg_range(0X401822,"T",0X1,3);
	split_sreg_range(0X401870,"T",0X1,3);
	split_sreg_range(0X401896,"T",0X1,3);
	split_sreg_range(0X4018B8,"T",0X1,3);
	split_sreg_range(0X4018BE,"T",0X1,3);
	split_sreg_range(0X4018E0,"T",0X1,3);
	split_sreg_range(0X4018E6,"T",0X1,3);
	split_sreg_range(0X4019F0,"T",0X1,3);
	split_sreg_range(0X401A00,"T",0X1,3);
	split_sreg_range(0X401A70,"T",0X1,3);
	split_sreg_range(0X401AE6,"T",0X1,3);
	split_sreg_range(0X401B2A,"T",0X1,3);
	split_sreg_range(0X401B2E,"T",0X1,3);
	split_sreg_range(0X401B44,"T",0X1,3);
	split_sreg_range(0X401BA8,"T",0X1,3);
	split_sreg_range(0X401BC4,"T",0X1,3);
	split_sreg_range(0X401BC6,"T",0X1,3);
	split_sreg_range(0X401BE8,"T",0X1,3);
	split_sreg_range(0X401C0E,"T",0X1,3);
	split_sreg_range(0X401C10,"T",0X1,3);
	split_sreg_range(0X401C40,"T",0X1,3);
	split_sreg_range(0X401C60,"T",0X1,3);
	split_sreg_range(0X401C70,"T",0X1,3);
	split_sreg_range(0X401C74,"T",0X1,3);
	split_sreg_range(0X401CA8,"T",0X1,3);
	split_sreg_range(0X401CAC,"T",0X1,3);
	split_sreg_range(0X401CBC,"T",0X1,3);
	split_sreg_range(0X401CCE,"T",0X1,3);
	split_sreg_range(0X401CEC,"T",0X1,3);
	split_sreg_range(0X401CF8,"T",0X1,3);
	split_sreg_range(0X401D08,"T",0X1,3);
	split_sreg_range(0X401D0C,"T",0X1,3);
	split_sreg_range(0X401D1C,"T",0X1,3);
	split_sreg_range(0X401D80,"T",0X1,3);
	split_sreg_range(0X401D8E,"T",0X1,3);
	split_sreg_range(0X401D98,"T",0X1,3);
	split_sreg_range(0X401D9A,"T",0X1,3);
	split_sreg_range(0X401D9C,"T",0X1,3);
	split_sreg_range(0X401DBC,"T",0X1,3);
	split_sreg_range(0X401DFC,"T",0X1,3);
	split_sreg_range(0X401E64,"T",0X1,3);
	split_sreg_range(0X401E7C,"T",0X1,3);
	split_sreg_range(0X401ED8,"T",0X1,3);
	split_sreg_range(0X401EF0,"T",0X1,3);
	split_sreg_range(0X401EFE,"T",0X1,3);
	split_sreg_range(0X401F02,"T",0X1,3);
	split_sreg_range(0X401F06,"T",0X1,3);
	split_sreg_range(0X401F08,"T",0X1,3);
	split_sreg_range(0X401F12,"T",0X1,3);
	split_sreg_range(0X401F14,"T",0X1,3);
	split_sreg_range(0X401F26,"T",0X1,3);
	split_sreg_range(0X401F2C,"T",0X1,3);
	split_sreg_range(0X401F3C,"T",0X1,3);
	split_sreg_range(0X401F3E,"T",0X1,3);
	split_sreg_range(0X401F54,"T",0X1,3);
	split_sreg_range(0X401F5C,"T",0X1,3);
	split_sreg_range(0X401F6C,"T",0X1,3);
	split_sreg_range(0X401F6E,"T",0X1,3);
	split_sreg_range(0X401F74,"T",0X1,3);
	split_sreg_range(0X401F98,"T",0X1,3);
	split_sreg_range(0X401F9E,"T",0X1,3);
	split_sreg_range(0X401FA8,"T",0X1,3);
	split_sreg_range(0X401FBA,"T",0X1,3);
	split_sreg_range(0X40200A,"T",0X1,3);
	split_sreg_range(0X402022,"T",0X1,3);
	split_sreg_range(0X402034,"T",0X1,3);
	split_sreg_range(0X402046,"T",0X1,3);
	split_sreg_range(0X402048,"T",0X1,3);
	split_sreg_range(0X402058,"T",0X1,3);
	split_sreg_range(0X40205C,"T",0X1,3);
	split_sreg_range(0X40206A,"T",0X1,3);
	split_sreg_range(0X40206C,"T",0X1,3);
	split_sreg_range(0X402076,"T",0X1,3);
	split_sreg_range(0X40207C,"T",0X1,3);
	split_sreg_range(0X4020A0,"T",0X1,3);
	split_sreg_range(0X4020A4,"T",0X1,3);
	split_sreg_range(0X4020AE,"T",0X1,3);
	split_sreg_range(0X4020B4,"T",0X1,3);
	split_sreg_range(0X4020C4,"T",0X1,3);
	split_sreg_range(0X4020D8,"T",0X1,3);
	split_sreg_range(0X4020E6,"T",0X1,3);
	split_sreg_range(0X4020EA,"T",0X1,3);
	split_sreg_range(0X4020F0,"T",0X1,3);
	split_sreg_range(0X4020FA,"T",0X1,3);
	split_sreg_range(0X402104,"T",0X1,3);
	split_sreg_range(0X40210C,"T",0X1,3);
	split_sreg_range(0X402130,"T",0X1,3);
	split_sreg_range(0X402148,"T",0X1,3);
	split_sreg_range(0X402154,"T",0X1,3);
	split_sreg_range(0X402176,"T",0X1,3);
	split_sreg_range(0X402184,"T",0X1,3);
	split_sreg_range(0X402190,"T",0X1,3);
	split_sreg_range(0X40219A,"T",0X1,3);
	split_sreg_range(0X4021B4,"T",0X1,3);
	split_sreg_range(0X4021CC,"T",0X1,3);
	split_sreg_range(0X4021D2,"T",0X1,3);
	split_sreg_range(0X4021EE,"T",0X1,3);
	split_sreg_range(0X402206,"T",0X1,3);
	split_sreg_range(0X402214,"T",0X1,3);
	split_sreg_range(0X40221C,"T",0X1,3);
	split_sreg_range(0X402236,"T",0X1,3);
	split_sreg_range(0X40223A,"T",0X1,3);
	split_sreg_range(0X402248,"T",0X1,3);
	split_sreg_range(0X402256,"T",0X1,3);
	split_sreg_range(0X4022A2,"T",0X1,3);
	split_sreg_range(0X4022DA,"T",0X1,3);
	split_sreg_range(0X4022E0,"T",0X1,3);
	split_sreg_range(0X4022F0,"T",0X1,3);
	split_sreg_range(0X402320,"T",0X1,3);
	split_sreg_range(0X402326,"T",0X1,3);
	split_sreg_range(0X40232A,"T",0X1,3);
	split_sreg_range(0X402340,"T",0X1,3);
	split_sreg_range(0X402358,"T",0X1,3);
	split_sreg_range(0X402382,"T",0X1,3);
	split_sreg_range(0X40238A,"T",0X1,3);
	split_sreg_range(0X40238E,"T",0X1,3);
	split_sreg_range(0X402390,"T",0X1,3);
	split_sreg_range(0X402394,"T",0X1,3);
	split_sreg_range(0X4023B6,"T",0X1,3);
	split_sreg_range(0X4023D6,"T",0X1,3);
	split_sreg_range(0X4023DA,"T",0X1,3);
	split_sreg_range(0X4023DE,"T",0X1,3);
	split_sreg_range(0X4023E2,"T",0X1,3);
	split_sreg_range(0X4023E4,"T",0X1,3);
	split_sreg_range(0X4023F0,"T",0X1,3);
	split_sreg_range(0X4023FC,"T",0X1,3);
	split_sreg_range(0X402412,"T",0X1,3);
	split_sreg_range(0X402426,"T",0X1,3);
	split_sreg_range(0X40242E,"T",0X1,3);
	split_sreg_range(0X40247C,"T",0X1,3);
	split_sreg_range(0X402494,"T",0X1,3);
	split_sreg_range(0X402496,"T",0X1,3);
	split_sreg_range(0X4024A8,"T",0X1,3);
	split_sreg_range(0X4024B4,"T",0X1,3);
	split_sreg_range(0X4024C8,"T",0X1,3);
	split_sreg_range(0X40252C,"T",0X1,3);
	split_sreg_range(0X4025B2,"T",0X1,3);
	split_sreg_range(0X4025D6,"T",0X1,3);
	split_sreg_range(0X402666,"T",0X1,3);
	split_sreg_range(0X402688,"T",0X1,3);
	split_sreg_range(0X4026AA,"T",0X1,3);
	split_sreg_range(0X4026C8,"T",0X1,3);
	split_sreg_range(0X4026CA,"T",0X1,3);
	split_sreg_range(0X4026D0,"T",0X1,3);
	split_sreg_range(0X402726,"T",0X1,3);
	split_sreg_range(0X402748,"T",0X1,3);
	split_sreg_range(0X40276A,"T",0X1,3);
	split_sreg_range(0X40278C,"T",0X1,3);
	split_sreg_range(0X4027AE,"T",0X1,3);
	split_sreg_range(0X4027F8,"T",0X1,3);
	split_sreg_range(0X402A5C,"T",0X1,3);
	split_sreg_range(0X402A70,"T",0X1,3);
	split_sreg_range(0X402A86,"T",0X1,3);
	split_sreg_range(0X402AB8,"T",0X1,3);
	split_sreg_range(0X402B5C,"T",0X1,3);
	split_sreg_range(0X402B90,"T",0X1,3);
	split_sreg_range(0X402B94,"T",0X1,3);
	split_sreg_range(0X402BB0,"T",0X1,3);
	split_sreg_range(0X402BBC,"T",0X1,3);
	split_sreg_range(0X402BD8,"T",0X1,3);
	split_sreg_range(0X402C00,"T",0X1,3);
	split_sreg_range(0X402C02,"T",0X1,3);
	split_sreg_range(0X402C0A,"T",0X1,3);
	split_sreg_range(0X402C40,"T",0X1,3);
	split_sreg_range(0X402C4E,"T",0X1,3);
	split_sreg_range(0X402C6A,"T",0X1,3);
	split_sreg_range(0X402C92,"T",0X1,3);
	split_sreg_range(0X402C94,"T",0X1,3);
	split_sreg_range(0X402C9C,"T",0X1,3);
	split_sreg_range(0X402CD4,"T",0X1,3);
	split_sreg_range(0X402CF0,"T",0X1,3);
	split_sreg_range(0X402D1C,"T",0X1,3);
	split_sreg_range(0X402D2A,"T",0X1,3);
	split_sreg_range(0X402D2C,"T",0X1,3);
	split_sreg_range(0X402D36,"T",0X1,3);
	split_sreg_range(0X402D44,"T",0X1,3);
	split_sreg_range(0X402D84,"T",0X1,3);
	split_sreg_range(0X402DA4,"T",0X1,3);
	split_sreg_range(0X402DA8,"T",0X1,3);
	split_sreg_range(0X402E86,"T",0X1,3);
	split_sreg_range(0X402E88,"T",0X1,3);
	split_sreg_range(0X402EB4,"T",0X1,3);
	split_sreg_range(0X402EB8,"T",0X1,3);
	split_sreg_range(0X402EC2,"T",0X1,3);
	split_sreg_range(0X402EC8,"T",0X1,3);
	split_sreg_range(0X402EEC,"T",0X1,3);
	split_sreg_range(0X402F00,"T",0X1,3);
	split_sreg_range(0X402F10,"T",0X1,3);
	split_sreg_range(0X402F20,"T",0X1,3);
	split_sreg_range(0X402F30,"T",0X1,3);
	split_sreg_range(0X402F32,"T",0X1,3);
	split_sreg_range(0X402F3A,"T",0X1,3);
	split_sreg_range(0X402F4C,"T",0X1,3);
	split_sreg_range(0X402F52,"T",0X1,3);
	split_sreg_range(0X402F5A,"T",0X1,3);
	split_sreg_range(0X402F7E,"T",0X1,3);
	split_sreg_range(0X402F84,"T",0X1,3);
	split_sreg_range(0X402F9A,"T",0X1,3);
	split_sreg_range(0X402F9E,"T",0X1,3);
	split_sreg_range(0X402FD0,"T",0X1,3);
	split_sreg_range(0X402FF4,"T",0X1,3);
	split_sreg_range(0X4034C4,"T",0X1,3);
	split_sreg_range(0X4036B0,"T",0X1,3);
	split_sreg_range(0X4036D8,"T",0X1,3);
	split_sreg_range(0X403700,"T",0X1,3);
	split_sreg_range(0X403714,"T",0X1,3);
	split_sreg_range(0X40371E,"T",0X1,3);
	split_sreg_range(0X403734,"T",0X1,3);
	split_sreg_range(0X4037A4,"T",0X1,3);
	split_sreg_range(0X4037A6,"T",0X1,3);
	split_sreg_range(0X4037BC,"T",0X1,3);
	split_sreg_range(0X4037FA,"T",0X1,3);
	split_sreg_range(0X403802,"T",0X1,3);
	split_sreg_range(0X40380A,"T",0X1,3);
	split_sreg_range(0X40382E,"T",0X1,3);
	split_sreg_range(0X403830,"T",0X1,3);
	split_sreg_range(0X40384E,"T",0X1,3);
	split_sreg_range(0X403850,"T",0X1,3);
	split_sreg_range(0X403856,"T",0X1,3);
	split_sreg_range(0X403860,"T",0X1,3);
	split_sreg_range(0X403876,"T",0X1,3);
	split_sreg_range(0X403878,"T",0X1,3);
	split_sreg_range(0X403896,"T",0X1,3);
	split_sreg_range(0X403898,"T",0X1,3);
	split_sreg_range(0X40389E,"T",0X1,3);
	split_sreg_range(0X4038BC,"T",0X1,3);
	split_sreg_range(0X4038BE,"T",0X1,3);
	split_sreg_range(0X4038C8,"T",0X1,3);
	split_sreg_range(0X4038CA,"T",0X1,3);
	split_sreg_range(0X4038D4,"T",0X1,3);
	split_sreg_range(0X4038DC,"T",0X1,3);
	split_sreg_range(0X4038EA,"T",0X1,3);
	split_sreg_range(0X4038FC,"T",0X1,3);
	split_sreg_range(0X4038FE,"T",0X1,3);
	split_sreg_range(0X403902,"T",0X1,3);
	split_sreg_range(0X403904,"T",0X1,3);
	split_sreg_range(0X40390A,"T",0X1,3);
	split_sreg_range(0X40390C,"T",0X1,3);
	split_sreg_range(0X403912,"T",0X1,3);
	split_sreg_range(0X403914,"T",0X1,3);
	split_sreg_range(0X403916,"T",0X1,3);
	split_sreg_range(0X403918,"T",0X1,3);
	split_sreg_range(0X40391C,"T",0X1,3);
	split_sreg_range(0X403926,"T",0X1,3);
	split_sreg_range(0X40392A,"T",0X1,3);
	split_sreg_range(0X403938,"T",0X1,3);
	split_sreg_range(0X403940,"T",0X1,3);
	split_sreg_range(0X403942,"T",0X1,3);
	split_sreg_range(0X403946,"T",0X1,3);
	split_sreg_range(0X403950,"T",0X1,3);
	split_sreg_range(0X403990,"T",0X1,3);
	split_sreg_range(0X40399A,"T",0X1,3);
	split_sreg_range(0X4039AA,"T",0X1,3);
	split_sreg_range(0X4039B8,"T",0X1,3);
	split_sreg_range(0X4039C2,"T",0X1,3);
	split_sreg_range(0X4039DA,"T",0X1,3);
	split_sreg_range(0X4039EE,"T",0X1,3);
	split_sreg_range(0X4039F0,"T",0X1,3);
	split_sreg_range(0X4039F8,"T",0X1,3);
	split_sreg_range(0X403A02,"T",0X1,3);
	split_sreg_range(0X403A1A,"T",0X1,3);
	split_sreg_range(0X403A2E,"T",0X1,3);
	split_sreg_range(0X403A30,"T",0X1,3);
	split_sreg_range(0X403A38,"T",0X1,3);
	split_sreg_range(0X403A42,"T",0X1,3);
	split_sreg_range(0X403A4E,"T",0X1,3);
	split_sreg_range(0X403A56,"T",0X1,3);
	split_sreg_range(0X403AC4,"T",0X1,3);
	split_sreg_range(0X403AEC,"T",0X1,3);
	split_sreg_range(0X403B00,"T",0X1,3);
	split_sreg_range(0X403B04,"T",0X1,3);
	split_sreg_range(0X403B28,"T",0X1,3);
	split_sreg_range(0X403B2E,"T",0X1,3);
	split_sreg_range(0X403B36,"T",0X1,3);
	split_sreg_range(0X403B50,"T",0X1,3);
	split_sreg_range(0X403B54,"T",0X1,3);
	split_sreg_range(0X403B7C,"T",0X1,3);
	split_sreg_range(0X403B9A,"T",0X1,3);
	split_sreg_range(0X403BA0,"T",0X1,3);
	split_sreg_range(0X403BA4,"T",0X1,3);
	split_sreg_range(0X403BB8,"T",0X1,3);
	split_sreg_range(0X403BC6,"T",0X1,3);
	split_sreg_range(0X403BD2,"T",0X1,3);
	split_sreg_range(0X403BDE,"T",0X1,3);
	split_sreg_range(0X403C6A,"T",0X1,3);
	split_sreg_range(0X403C8E,"T",0X1,3);
	split_sreg_range(0X403CA6,"T",0X1,3);
	split_sreg_range(0X403CAA,"T",0X1,3);
	split_sreg_range(0X403CAE,"T",0X1,3);
	split_sreg_range(0X403CC0,"T",0X1,3);
	split_sreg_range(0X403CCA,"T",0X1,3);
	split_sreg_range(0X403CCE,"T",0X1,3);
	split_sreg_range(0X403CD8,"T",0X1,3);
	split_sreg_range(0X403CE2,"T",0X1,3);
	split_sreg_range(0X403CE6,"T",0X1,3);
	split_sreg_range(0X403CF0,"T",0X1,3);
	split_sreg_range(0X403CFC,"T",0X1,3);
	split_sreg_range(0X403D00,"T",0X1,3);
	split_sreg_range(0X403D0A,"T",0X1,3);
	split_sreg_range(0X403D0E,"T",0X1,3);
	split_sreg_range(0X403D18,"T",0X1,3);
	split_sreg_range(0X403D1C,"T",0X1,3);
	split_sreg_range(0X403D24,"T",0X1,3);
	split_sreg_range(0X403D58,"T",0X1,3);
	split_sreg_range(0X403D78,"T",0X1,3);
	split_sreg_range(0X403D7C,"T",0X1,3);
	split_sreg_range(0X403D80,"T",0X1,3);
	split_sreg_range(0X403D84,"T",0X1,3);
	split_sreg_range(0X403D88,"T",0X1,3);
	split_sreg_range(0X403D90,"T",0X1,3);
	split_sreg_range(0X403D96,"T",0X1,3);
	split_sreg_range(0X403D98,"T",0X1,3);
	split_sreg_range(0X403D9C,"T",0X1,3);
	split_sreg_range(0X403DA2,"T",0X1,3);
	split_sreg_range(0X403DA4,"T",0X1,3);
	split_sreg_range(0X403DA8,"T",0X1,3);
	split_sreg_range(0X403DC8,"T",0X1,3);
	split_sreg_range(0X403DCC,"T",0X1,3);
	split_sreg_range(0X403DDC,"T",0X1,3);
	split_sreg_range(0X403E02,"T",0X1,3);
	split_sreg_range(0X403E06,"T",0X1,3);
	split_sreg_range(0X403E0A,"T",0X1,3);
	split_sreg_range(0X403E14,"T",0X1,3);
	split_sreg_range(0X403E22,"T",0X1,3);
	split_sreg_range(0X403E3A,"T",0X1,3);
	split_sreg_range(0X403E3E,"T",0X1,3);
	split_sreg_range(0X403E40,"T",0X1,3);
	split_sreg_range(0X403E4E,"T",0X1,3);
	split_sreg_range(0X403E64,"T",0X1,3);
	split_sreg_range(0X403E78,"T",0X1,3);
	split_sreg_range(0X403E8A,"T",0X1,3);
	split_sreg_range(0X403E98,"T",0X1,3);
	split_sreg_range(0X403F06,"T",0X1,3);
	split_sreg_range(0X403F08,"T",0X1,3);
	split_sreg_range(0X403F14,"T",0X1,3);
	split_sreg_range(0X403F26,"T",0X1,3);
	split_sreg_range(0X403F2E,"T",0X1,3);
	split_sreg_range(0X403F34,"T",0X1,3);
	split_sreg_range(0X403F40,"T",0X1,3);
	split_sreg_range(0X403F6C,"T",0X1,3);
	split_sreg_range(0X403FAC,"T",0X1,3);
	split_sreg_range(0X403FD4,"T",0X1,3);
	split_sreg_range(0X403FEC,"T",0X1,3);
	split_sreg_range(0X403FFE,"T",0X1,3);
	split_sreg_range(0X40401A,"T",0X1,3);
	split_sreg_range(0X404024,"T",0X1,3);
	split_sreg_range(0X404088,"T",0X1,3);
	split_sreg_range(0X40409A,"T",0X1,3);
	split_sreg_range(0X4040B8,"T",0X1,3);
	split_sreg_range(0X4040C4,"T",0X1,3);
	split_sreg_range(0X4040C6,"T",0X1,3);
	split_sreg_range(0X4040CE,"T",0X1,3);
	split_sreg_range(0X4040D2,"T",0X1,3);
	split_sreg_range(0X4040E6,"T",0X1,3);
	split_sreg_range(0X4040FE,"T",0X1,3);
	split_sreg_range(0X404100,"T",0X1,3);
	split_sreg_range(0X404104,"T",0X1,3);
	split_sreg_range(0X404110,"T",0X1,3);
	split_sreg_range(0X404122,"T",0X1,3);
	split_sreg_range(0X40413A,"T",0X1,3);
	split_sreg_range(0X404148,"T",0X1,3);
	split_sreg_range(0X40414A,"T",0X1,3);
	split_sreg_range(0X40414E,"T",0X1,3);
	split_sreg_range(0X404174,"T",0X1,3);
	split_sreg_range(0X404188,"T",0X1,3);
	split_sreg_range(0X404192,"T",0X1,3);
	split_sreg_range(0X4041B2,"T",0X1,3);
	split_sreg_range(0X4041C0,"T",0X1,3);
	split_sreg_range(0X4041DC,"T",0X1,3);
	split_sreg_range(0X4041F6,"T",0X1,3);
	split_sreg_range(0X40420E,"T",0X1,3);
	split_sreg_range(0X40422A,"T",0X1,3);
	split_sreg_range(0X40422E,"T",0X1,3);
	split_sreg_range(0X404258,"T",0X1,3);
	split_sreg_range(0X404276,"T",0X1,3);
	split_sreg_range(0X404286,"T",0X1,3);
	split_sreg_range(0X40428E,"T",0X1,3);
	split_sreg_range(0X4042C2,"T",0X1,3);
	split_sreg_range(0X4042C8,"T",0X1,3);
	split_sreg_range(0X40431C,"T",0X1,3);
	split_sreg_range(0X404336,"T",0X1,3);
	split_sreg_range(0X404348,"T",0X1,3);
	split_sreg_range(0X404356,"T",0X1,3);
	split_sreg_range(0X40436A,"T",0X1,3);
	split_sreg_range(0X404370,"T",0X1,3);
	split_sreg_range(0X40439C,"T",0X1,3);
	split_sreg_range(0X4043D0,"T",0X1,3);
	split_sreg_range(0X4043F6,"T",0X1,3);
	split_sreg_range(0X4043FA,"T",0X1,3);
	split_sreg_range(0X404408,"T",0X1,3);
	split_sreg_range(0X40442A,"T",0X1,3);
	split_sreg_range(0X40444A,"T",0X1,3);
	split_sreg_range(0X40444E,"T",0X1,3);
	split_sreg_range(0X404452,"T",0X1,3);
	split_sreg_range(0X404456,"T",0X1,3);
	split_sreg_range(0X40445C,"T",0X1,3);
	split_sreg_range(0X404484,"T",0X1,3);
	split_sreg_range(0X4044C2,"T",0X1,3);
	split_sreg_range(0X4044D2,"T",0X1,3);
	split_sreg_range(0X4044DC,"T",0X1,3);
	split_sreg_range(0X4044EC,"T",0X1,3);
	split_sreg_range(0X4044F8,"T",0X1,3);
	split_sreg_range(0X404534,"T",0X1,3);
	split_sreg_range(0X40453A,"T",0X1,3);
	split_sreg_range(0X40453C,"T",0X1,3);
	split_sreg_range(0X404540,"T",0X1,3);
	split_sreg_range(0X404546,"T",0X1,3);
	split_sreg_range(0X404548,"T",0X1,3);
	split_sreg_range(0X40454C,"T",0X1,3);
	split_sreg_range(0X404550,"T",0X1,3);
	split_sreg_range(0X40455A,"T",0X1,3);
	split_sreg_range(0X40455E,"T",0X1,3);
	split_sreg_range(0X404566,"T",0X1,3);
	split_sreg_range(0X40457C,"T",0X1,3);
	split_sreg_range(0X404586,"T",0X1,3);
	split_sreg_range(0X40458A,"T",0X1,3);
	split_sreg_range(0X404590,"T",0X1,3);
	split_sreg_range(0X404592,"T",0X1,3);
	split_sreg_range(0X40459A,"T",0X1,3);
	split_sreg_range(0X4045A2,"T",0X1,3);
	split_sreg_range(0X4045A4,"T",0X1,3);
	split_sreg_range(0X4045AC,"T",0X1,3);
	split_sreg_range(0X4045E8,"T",0X1,3);
	split_sreg_range(0X4045EC,"T",0X1,3);
	split_sreg_range(0X404620,"T",0X1,3);
	split_sreg_range(0X404644,"T",0X1,3);
	split_sreg_range(0X404678,"T",0X1,3);
	split_sreg_range(0X4046A0,"T",0X1,3);
	split_sreg_range(0X4046A8,"T",0X1,3);
	split_sreg_range(0X4046E4,"T",0X1,3);
	split_sreg_range(0X4046E6,"T",0X1,3);
	split_sreg_range(0X4046F6,"T",0X1,3);
	split_sreg_range(0X4046F8,"T",0X1,3);
	split_sreg_range(0X4046FA,"T",0X1,3);
	split_sreg_range(0X404708,"T",0X1,3);
	split_sreg_range(0X404780,"T",0X1,3);
	split_sreg_range(0X404784,"T",0X1,3);
	split_sreg_range(0X40478C,"T",0X1,3);
	split_sreg_range(0X404792,"T",0X1,3);
	split_sreg_range(0X4047AE,"T",0X1,3);
	split_sreg_range(0X4047B8,"T",0X1,3);
	split_sreg_range(0X4047D2,"T",0X1,3);
	split_sreg_range(0X4047D4,"T",0X1,3);
	split_sreg_range(0X4047EE,"T",0X1,3);
	split_sreg_range(0X4047FA,"T",0X1,3);
	split_sreg_range(0X4047FE,"T",0X1,3);
	split_sreg_range(0X404800,"T",0X1,3);
	split_sreg_range(0X404816,"T",0X1,3);
	split_sreg_range(0X404822,"T",0X1,3);
	split_sreg_range(0X404826,"T",0X1,3);
	split_sreg_range(0X404832,"T",0X1,3);
	split_sreg_range(0X404866,"T",0X1,3);
	split_sreg_range(0X404868,"T",0X1,3);
	split_sreg_range(0X404874,"T",0X1,3);
	split_sreg_range(0X404876,"T",0X1,3);
	split_sreg_range(0X404882,"T",0X1,3);
	split_sreg_range(0X404884,"T",0X1,3);
	split_sreg_range(0X404890,"T",0X1,3);
	split_sreg_range(0X4048B4,"T",0X1,3);
	split_sreg_range(0X4048B8,"T",0X1,3);
	split_sreg_range(0X4048BA,"T",0X1,3);
	split_sreg_range(0X4048BC,"T",0X1,3);
	split_sreg_range(0X4048D8,"T",0X1,3);
	split_sreg_range(0X4048E2,"T",0X1,3);
	split_sreg_range(0X4049AC,"T",0X1,3);
	split_sreg_range(0X4049B0,"T",0X1,3);
	split_sreg_range(0X4049B4,"T",0X1,3);
	split_sreg_range(0X4049C6,"T",0X1,3);
	split_sreg_range(0X4049CE,"T",0X1,3);
	split_sreg_range(0X4049D4,"T",0X1,3);
	split_sreg_range(0X4049DC,"T",0X1,3);
	split_sreg_range(0X4049E8,"T",0X1,3);
	split_sreg_range(0X4049FC,"T",0X1,3);
	split_sreg_range(0X404A1C,"T",0X1,3);
	split_sreg_range(0X404A62,"T",0X1,3);
	split_sreg_range(0X404A66,"T",0X1,3);
	split_sreg_range(0X404A70,"T",0X1,3);
	split_sreg_range(0X404A7A,"T",0X1,3);
	split_sreg_range(0X404A80,"T",0X1,3);
	split_sreg_range(0X404A84,"T",0X1,3);
	split_sreg_range(0X404A86,"T",0X1,3);
	split_sreg_range(0X404A9E,"T",0X1,3);
	split_sreg_range(0X404AA8,"T",0X1,3);
	split_sreg_range(0X404AC2,"T",0X1,3);
	split_sreg_range(0X404AC6,"T",0X1,3);
	split_sreg_range(0X404ACA,"T",0X1,3);
	split_sreg_range(0X404AD2,"T",0X1,3);
	split_sreg_range(0X404AE6,"T",0X1,3);
	split_sreg_range(0X404AF0,"T",0X1,3);
	split_sreg_range(0X404AFA,"T",0X1,3);
	split_sreg_range(0X404B04,"T",0X1,3);
	split_sreg_range(0X404B10,"T",0X1,3);
	split_sreg_range(0X404B1C,"T",0X1,3);
	split_sreg_range(0X404B26,"T",0X1,3);
	split_sreg_range(0X404B30,"T",0X1,3);
	split_sreg_range(0X404BC8,"T",0X1,3);
	split_sreg_range(0X404BCA,"T",0X1,3);
	split_sreg_range(0X404BDE,"T",0X1,3);
	split_sreg_range(0X404BF6,"T",0X1,3);
	split_sreg_range(0X404C08,"T",0X1,3);
	split_sreg_range(0X404C12,"T",0X1,3);
	split_sreg_range(0X404CC4,"T",0X1,3);
	split_sreg_range(0X404CF8,"T",0X1,3);
	split_sreg_range(0X404D10,"T",0X1,3);
	split_sreg_range(0X404D34,"T",0X1,3);
	split_sreg_range(0X404D5E,"T",0X1,3);
	split_sreg_range(0X404D62,"T",0X1,3);
	split_sreg_range(0X404D6C,"T",0X1,3);
	split_sreg_range(0X404D9A,"T",0X1,3);
	split_sreg_range(0X404D9C,"T",0X1,3);
	split_sreg_range(0X404DBE,"T",0X1,3);
	split_sreg_range(0X404DC8,"T",0X1,3);
	split_sreg_range(0X404DE0,"T",0X1,3);
	split_sreg_range(0X404DF6,"T",0X1,3);
	split_sreg_range(0X404DFE,"T",0X1,3);
	split_sreg_range(0X404E0C,"T",0X1,3);
	split_sreg_range(0X404E48,"T",0X1,3);
	split_sreg_range(0X404E4A,"T",0X1,3);
	split_sreg_range(0X404E50,"T",0X1,3);
	split_sreg_range(0X404E8C,"T",0X1,3);
	split_sreg_range(0X404E9C,"T",0X1,3);
	split_sreg_range(0X404EB4,"T",0X1,3);
	split_sreg_range(0X404EB8,"T",0X1,3);
	split_sreg_range(0X404ECA,"T",0X1,3);
	split_sreg_range(0X404EEC,"T",0X1,3);
	split_sreg_range(0X404EEE,"T",0X1,3);
	split_sreg_range(0X404EF8,"T",0X1,3);
	split_sreg_range(0X404F0A,"T",0X1,3);
	split_sreg_range(0X404F18,"T",0X1,3);
	split_sreg_range(0X404F30,"T",0X1,3);
	split_sreg_range(0X404F5E,"T",0X1,3);
	split_sreg_range(0X404F60,"T",0X1,3);
	split_sreg_range(0X404F68,"T",0X1,3);
	split_sreg_range(0X404F80,"T",0X1,3);
	split_sreg_range(0X404F96,"T",0X1,3);
	split_sreg_range(0X404F9C,"T",0X1,3);
	split_sreg_range(0X404FA4,"T",0X1,3);
	split_sreg_range(0X404FA8,"T",0X1,3);
	split_sreg_range(0X404FBE,"T",0X1,3);
	split_sreg_range(0X404FCC,"T",0X1,3);
	split_sreg_range(0X404FEA,"T",0X1,3);
	split_sreg_range(0X405024,"T",0X1,3);
	split_sreg_range(0X405038,"T",0X1,3);
	split_sreg_range(0X405086,"T",0X1,3);
	split_sreg_range(0X40509E,"T",0X1,3);
	split_sreg_range(0X4050BC,"T",0X1,3);
	split_sreg_range(0X4050CC,"T",0X1,3);
	split_sreg_range(0X4050F4,"T",0X1,3);
	split_sreg_range(0X40510E,"T",0X1,3);
	split_sreg_range(0X405124,"T",0X1,3);
	split_sreg_range(0X405128,"T",0X1,3);
	split_sreg_range(0X40514E,"T",0X1,3);
	split_sreg_range(0X405150,"T",0X1,3);
	split_sreg_range(0X40515A,"T",0X1,3);
	split_sreg_range(0X40516C,"T",0X1,3);
	split_sreg_range(0X405178,"T",0X1,3);
	split_sreg_range(0X405180,"T",0X1,3);
	split_sreg_range(0X40519C,"T",0X1,3);
	split_sreg_range(0X4051A0,"T",0X1,3);
	split_sreg_range(0X4051C0,"T",0X1,3);
	split_sreg_range(0X4051CA,"T",0X1,3);
	split_sreg_range(0X405200,"T",0X1,3);
	split_sreg_range(0X405228,"T",0X1,3);
	split_sreg_range(0X405246,"T",0X1,3);
	split_sreg_range(0X40525A,"T",0X1,3);
	split_sreg_range(0X40525E,"T",0X1,3);
	split_sreg_range(0X405268,"T",0X1,3);
	split_sreg_range(0X40527A,"T",0X1,3);
	split_sreg_range(0X405290,"T",0X1,3);
	split_sreg_range(0X405294,"T",0X1,3);
	split_sreg_range(0X4052B0,"T",0X1,3);
	split_sreg_range(0X4052B8,"T",0X1,3);
	split_sreg_range(0X4052BC,"T",0X1,3);
	split_sreg_range(0X4052C2,"T",0X1,3);
	split_sreg_range(0X4052E0,"T",0X1,3);
	split_sreg_range(0X4052EA,"T",0X1,3);
	split_sreg_range(0X4052EE,"T",0X1,3);
	split_sreg_range(0X4052F2,"T",0X1,3);
	split_sreg_range(0X4052FA,"T",0X1,3);
	split_sreg_range(0X405302,"T",0X1,3);
	split_sreg_range(0X405306,"T",0X1,3);
	split_sreg_range(0X40530C,"T",0X1,3);
	split_sreg_range(0X405310,"T",0X1,3);
	split_sreg_range(0X40531E,"T",0X1,3);
	split_sreg_range(0X405328,"T",0X1,3);
	split_sreg_range(0X405336,"T",0X1,3);
	split_sreg_range(0X40533A,"T",0X1,3);
	split_sreg_range(0X40533E,"T",0X1,3);
	split_sreg_range(0X405346,"T",0X1,3);
	split_sreg_range(0X40534A,"T",0X1,3);
	split_sreg_range(0X40534E,"T",0X1,3);
	split_sreg_range(0X405356,"T",0X1,3);
	split_sreg_range(0X40535A,"T",0X1,3);
	split_sreg_range(0X405362,"T",0X1,3);
	split_sreg_range(0X405366,"T",0X1,3);
	split_sreg_range(0X40536C,"T",0X1,3);
	split_sreg_range(0X40537C,"T",0X1,3);
	split_sreg_range(0X40538C,"T",0X1,3);
	split_sreg_range(0X405390,"T",0X1,3);
	split_sreg_range(0X405396,"T",0X1,3);
	split_sreg_range(0X4053A2,"T",0X1,3);
	split_sreg_range(0X4053A6,"T",0X1,3);
	split_sreg_range(0X4053AA,"T",0X1,3);
	split_sreg_range(0X4053BA,"T",0X1,3);
	split_sreg_range(0X4053C4,"T",0X1,3);
	split_sreg_range(0X4053D2,"T",0X1,3);
	split_sreg_range(0X4053DE,"T",0X1,3);
	split_sreg_range(0X4053E0,"T",0X1,3);
	split_sreg_range(0X4053E4,"T",0X1,3);
	split_sreg_range(0X4053F4,"T",0X1,3);
	split_sreg_range(0X405404,"T",0X1,3);
	split_sreg_range(0X40540A,"T",0X1,3);
	split_sreg_range(0X405418,"T",0X1,3);
	split_sreg_range(0X405422,"T",0X1,3);
	split_sreg_range(0X405432,"T",0X1,3);
	split_sreg_range(0X40543E,"T",0X1,3);
	split_sreg_range(0X40547E,"T",0X1,3);
	split_sreg_range(0X4054B6,"T",0X1,3);
	split_sreg_range(0X4054D8,"T",0X1,3);
	split_sreg_range(0X4054E2,"T",0X1,3);
	split_sreg_range(0X4054E6,"T",0X1,3);
	split_sreg_range(0X4054F2,"T",0X1,3);
	split_sreg_range(0X40550A,"T",0X1,3);
	split_sreg_range(0X40550C,"T",0X1,3);
	split_sreg_range(0X40551A,"T",0X1,3);
	split_sreg_range(0X40552A,"T",0X1,3);
	split_sreg_range(0X405530,"T",0X1,3);
	split_sreg_range(0X405550,"T",0X1,3);
	split_sreg_range(0X405562,"T",0X1,3);
	split_sreg_range(0X405566,"T",0X1,3);
	split_sreg_range(0X405574,"T",0X1,3);
	split_sreg_range(0X405578,"T",0X1,3);
	split_sreg_range(0X40557E,"T",0X1,3);
	split_sreg_range(0X405582,"T",0X1,3);
	split_sreg_range(0X405586,"T",0X1,3);
	split_sreg_range(0X40558E,"T",0X1,3);
	split_sreg_range(0X405594,"T",0X1,3);
	split_sreg_range(0X4055F4,"T",0X1,3);
	split_sreg_range(0X4055F8,"T",0X1,3);
	split_sreg_range(0X405600,"T",0X1,3);
	split_sreg_range(0X405604,"T",0X1,3);
	split_sreg_range(0X40560C,"T",0X1,3);
	split_sreg_range(0X405614,"T",0X1,3);
	split_sreg_range(0X405618,"T",0X1,3);
	split_sreg_range(0X405620,"T",0X1,3);
	split_sreg_range(0X40562C,"T",0X1,3);
	split_sreg_range(0X405630,"T",0X1,3);
	split_sreg_range(0X405638,"T",0X1,3);
	split_sreg_range(0X40563C,"T",0X1,3);
	split_sreg_range(0X405644,"T",0X1,3);
	split_sreg_range(0X40564C,"T",0X1,3);
	split_sreg_range(0X405650,"T",0X1,3);
	split_sreg_range(0X405658,"T",0X1,3);
	split_sreg_range(0X405664,"T",0X1,3);
	split_sreg_range(0X405668,"T",0X1,3);
	split_sreg_range(0X405670,"T",0X1,3);
	split_sreg_range(0X405674,"T",0X1,3);
	split_sreg_range(0X40567C,"T",0X1,3);
	split_sreg_range(0X405684,"T",0X1,3);
	split_sreg_range(0X405688,"T",0X1,3);
	split_sreg_range(0X405690,"T",0X1,3);
	split_sreg_range(0X405698,"T",0X1,3);
	split_sreg_range(0X40569C,"T",0X1,3);
	split_sreg_range(0X4056A4,"T",0X1,3);
	split_sreg_range(0X4056AC,"T",0X1,3);
	split_sreg_range(0X4056B0,"T",0X1,3);
	split_sreg_range(0X4056B8,"T",0X1,3);
	split_sreg_range(0X4056BC,"T",0X1,3);
	split_sreg_range(0X4056C4,"T",0X1,3);
	split_sreg_range(0X4056C8,"T",0X1,3);
	split_sreg_range(0X4056D4,"T",0X1,3);
	split_sreg_range(0X4056DC,"T",0X1,3);
	split_sreg_range(0X4056EC,"T",0X1,3);
	split_sreg_range(0X4056F4,"T",0X1,3);
	split_sreg_range(0X4056F8,"T",0X1,3);
	split_sreg_range(0X405704,"T",0X1,3);
	split_sreg_range(0X40570C,"T",0X1,3);
	split_sreg_range(0X405710,"T",0X1,3);
	split_sreg_range(0X405718,"T",0X1,3);
	split_sreg_range(0X405720,"T",0X1,3);
	split_sreg_range(0X405724,"T",0X1,3);
	split_sreg_range(0X40572C,"T",0X1,3);
	split_sreg_range(0X405738,"T",0X1,3);
	split_sreg_range(0X40573C,"T",0X1,3);
	split_sreg_range(0X40574A,"T",0X1,3);
	split_sreg_range(0X405752,"T",0X1,3);
	split_sreg_range(0X405756,"T",0X1,3);
	split_sreg_range(0X40575E,"T",0X1,3);
	split_sreg_range(0X405766,"T",0X1,3);
	split_sreg_range(0X40576A,"T",0X1,3);
	split_sreg_range(0X405772,"T",0X1,3);
	split_sreg_range(0X40577A,"T",0X1,3);
	split_sreg_range(0X40577E,"T",0X1,3);
	split_sreg_range(0X40578C,"T",0X1,3);
	split_sreg_range(0X405794,"T",0X1,3);
	split_sreg_range(0X405798,"T",0X1,3);
	split_sreg_range(0X4057A4,"T",0X1,3);
	split_sreg_range(0X4057AC,"T",0X1,3);
	split_sreg_range(0X4057B0,"T",0X1,3);
	split_sreg_range(0X4057B8,"T",0X1,3);
	split_sreg_range(0X4057C0,"T",0X1,3);
	split_sreg_range(0X4057C4,"T",0X1,3);
	split_sreg_range(0X4057D2,"T",0X1,3);
	split_sreg_range(0X4057DA,"T",0X1,3);
	split_sreg_range(0X4057DE,"T",0X1,3);
	split_sreg_range(0X4057E6,"T",0X1,3);
	split_sreg_range(0X405818,"T",0X1,3);
	split_sreg_range(0X40582E,"T",0X1,3);
	split_sreg_range(0X405830,"T",0X1,3);
	split_sreg_range(0X405834,"T",0X1,3);
	split_sreg_range(0X405838,"T",0X1,3);
	split_sreg_range(0X405840,"T",0X1,3);
	split_sreg_range(0X405846,"T",0X1,3);
	split_sreg_range(0X40584C,"T",0X1,3);
	split_sreg_range(0X405856,"T",0X1,3);
	split_sreg_range(0X40585E,"T",0X1,3);
	split_sreg_range(0X40586C,"T",0X1,3);
	split_sreg_range(0X405874,"T",0X1,3);
	split_sreg_range(0X40587A,"T",0X1,3);
	split_sreg_range(0X405910,"T",0X1,3);
	split_sreg_range(0X405954,"T",0X1,3);
	split_sreg_range(0X405958,"T",0X1,3);
	split_sreg_range(0X40595A,"T",0X1,3);
	split_sreg_range(0X40595E,"T",0X1,3);
	split_sreg_range(0X405962,"T",0X1,3);
	split_sreg_range(0X405980,"T",0X1,3);
	split_sreg_range(0X405992,"T",0X1,3);
	split_sreg_range(0X4059B2,"T",0X1,3);
	split_sreg_range(0X4059C2,"T",0X1,3);
	split_sreg_range(0X405A2C,"T",0X1,3);
	split_sreg_range(0X405A56,"T",0X1,3);
	split_sreg_range(0X405A5A,"T",0X1,3);
	split_sreg_range(0X405A9E,"T",0X1,3);
	split_sreg_range(0X405AA8,"T",0X1,3);
	split_sreg_range(0X405AB2,"T",0X1,3);
	split_sreg_range(0X405AC0,"T",0X1,3);
	split_sreg_range(0X405AC6,"T",0X1,3);
	split_sreg_range(0X405AC8,"T",0X1,3);
	split_sreg_range(0X405AD2,"T",0X1,3);
	split_sreg_range(0X405AD6,"T",0X1,3);
	split_sreg_range(0X405ADE,"T",0X1,3);
	split_sreg_range(0X405AE4,"T",0X1,3);
	split_sreg_range(0X405B06,"T",0X1,3);
	split_sreg_range(0X405B0E,"T",0X1,3);
	split_sreg_range(0X405B12,"T",0X1,3);
	split_sreg_range(0X405B32,"T",0X1,3);
	split_sreg_range(0X405B52,"T",0X1,3);
	split_sreg_range(0X405B68,"T",0X1,3);
	split_sreg_range(0X405B9A,"T",0X1,3);
	split_sreg_range(0X405B9E,"T",0X1,3);
	split_sreg_range(0X405BA2,"T",0X1,3);
	split_sreg_range(0X405BA6,"T",0X1,3);
	split_sreg_range(0X405BAC,"T",0X1,3);
	split_sreg_range(0X405C10,"T",0X1,3);
	split_sreg_range(0X405C38,"T",0X1,3);
	split_sreg_range(0X405C3C,"T",0X1,3);
	split_sreg_range(0X405C40,"T",0X1,3);
	split_sreg_range(0X405C44,"T",0X1,3);
	split_sreg_range(0X405C54,"T",0X1,3);
	split_sreg_range(0X405C58,"T",0X1,3);
	split_sreg_range(0X405C5C,"T",0X1,3);
	split_sreg_range(0X405C84,"T",0X1,3);
	split_sreg_range(0X405C8E,"T",0X1,3);
	split_sreg_range(0X405C9A,"T",0X1,3);
	split_sreg_range(0X405CA2,"T",0X1,3);
	split_sreg_range(0X405CEC,"T",0X1,3);
	split_sreg_range(0X405CFE,"T",0X1,3);
	split_sreg_range(0X405D02,"T",0X1,3);
	split_sreg_range(0X405D34,"T",0X1,3);
	split_sreg_range(0X405D4A,"T",0X1,3);
	split_sreg_range(0X405D6A,"T",0X1,3);
	split_sreg_range(0X405D6E,"T",0X1,3);
	split_sreg_range(0X405D80,"T",0X1,3);
	split_sreg_range(0X405D98,"T",0X1,3);
	split_sreg_range(0X405DA6,"T",0X1,3);
	split_sreg_range(0X405DAA,"T",0X1,3);
	split_sreg_range(0X405DAE,"T",0X1,3);
	split_sreg_range(0X405DC0,"T",0X1,3);
	split_sreg_range(0X405DC2,"T",0X1,3);
	split_sreg_range(0X405DD8,"T",0X1,3);
	split_sreg_range(0X405E04,"T",0X1,3);
	split_sreg_range(0X405E2C,"T",0X1,3);
	split_sreg_range(0X405E3C,"T",0X1,3);
	split_sreg_range(0X405E40,"T",0X1,3);
	split_sreg_range(0X405E56,"T",0X1,3);
	split_sreg_range(0X405E62,"T",0X1,3);
	split_sreg_range(0X405E6A,"T",0X1,3);
	split_sreg_range(0X405E70,"T",0X1,3);
	split_sreg_range(0X405E72,"T",0X1,3);
	split_sreg_range(0X405E74,"T",0X1,3);
	split_sreg_range(0X405E9A,"T",0X1,3);
	split_sreg_range(0X405EA8,"T",0X1,3);
	split_sreg_range(0X405EAA,"T",0X1,3);
	split_sreg_range(0X405EBC,"T",0X1,3);
	split_sreg_range(0X405EC0,"T",0X1,3);
	split_sreg_range(0X405ED0,"T",0X1,3);
	split_sreg_range(0X405EDA,"T",0X1,3);
	split_sreg_range(0X405EE8,"T",0X1,3);
	split_sreg_range(0X405EF6,"T",0X1,3);
	split_sreg_range(0X405F04,"T",0X1,3);
	split_sreg_range(0X405F20,"T",0X1,3);
	split_sreg_range(0X405F32,"T",0X1,3);
	split_sreg_range(0X405F48,"T",0X1,3);
	split_sreg_range(0X405F78,"T",0X1,3);
	split_sreg_range(0X405FA8,"T",0X1,3);
	split_sreg_range(0X405FEC,"T",0X1,3);
	split_sreg_range(0X40602A,"T",0X1,3);
	split_sreg_range(0X40602E,"T",0X1,3);
	split_sreg_range(0X406032,"T",0X1,3);
	split_sreg_range(0X406080,"T",0X1,3);
	split_sreg_range(0X406082,"T",0X1,3);
	split_sreg_range(0X4060B4,"T",0X1,3);
	split_sreg_range(0X4060F4,"T",0X1,3);
	split_sreg_range(0X4060FA,"T",0X1,3);
	split_sreg_range(0X4060FE,"T",0X1,3);
	split_sreg_range(0X40614E,"T",0X1,3);
	split_sreg_range(0X40615A,"T",0X1,3);
	split_sreg_range(0X406190,"T",0X1,3);
	split_sreg_range(0X4061B2,"T",0X1,3);
	split_sreg_range(0X4061CC,"T",0X1,3);
	split_sreg_range(0X4061D2,"T",0X1,3);
	split_sreg_range(0X4061DC,"T",0X1,3);
	split_sreg_range(0X4061F0,"T",0X1,3);
	split_sreg_range(0X406202,"T",0X1,3);
	split_sreg_range(0X406204,"T",0X1,3);
	split_sreg_range(0X40622C,"T",0X1,3);
	split_sreg_range(0X40623C,"T",0X1,3);
	split_sreg_range(0X40624A,"T",0X1,3);
	split_sreg_range(0X40625E,"T",0X1,3);
	split_sreg_range(0X40626C,"T",0X1,3);
	split_sreg_range(0X406280,"T",0X1,3);
	split_sreg_range(0X4062A6,"T",0X1,3);
	split_sreg_range(0X4062B4,"T",0X1,3);
	split_sreg_range(0X4062E8,"T",0X1,3);
	split_sreg_range(0X4062F0,"T",0X1,3);
	split_sreg_range(0X4062F6,"T",0X1,3);
	split_sreg_range(0X4062FC,"T",0X1,3);
	split_sreg_range(0X406308,"T",0X1,3);
	split_sreg_range(0X406314,"T",0X1,3);
	split_sreg_range(0X40632C,"T",0X1,3);
	split_sreg_range(0X406344,"T",0X1,3);
	split_sreg_range(0X40634C,"T",0X1,3);
	split_sreg_range(0X40634E,"T",0X1,3);
	split_sreg_range(0X40635C,"T",0X1,3);
	split_sreg_range(0X40637C,"T",0X1,3);
	split_sreg_range(0X406380,"T",0X1,3);
	split_sreg_range(0X406384,"T",0X1,3);
	split_sreg_range(0X406390,"T",0X1,3);
	split_sreg_range(0X4063B2,"T",0X1,3);
	split_sreg_range(0X4063B8,"T",0X1,3);
	split_sreg_range(0X4063BC,"T",0X1,3);
	split_sreg_range(0X4063C0,"T",0X1,3);
	split_sreg_range(0X4063C8,"T",0X1,3);
	split_sreg_range(0X40640C,"T",0X1,3);
	split_sreg_range(0X40640E,"T",0X1,3);
	split_sreg_range(0X40644A,"T",0X1,3);
	split_sreg_range(0X406450,"T",0X1,3);
	split_sreg_range(0X406454,"T",0X1,3);
	split_sreg_range(0X406496,"T",0X1,3);
	split_sreg_range(0X4064CC,"T",0X1,3);
	split_sreg_range(0X4064D0,"T",0X1,3);
	split_sreg_range(0X406538,"T",0X1,3);
	split_sreg_range(0X406562,"T",0X1,3);
	split_sreg_range(0X40656C,"T",0X1,3);
	split_sreg_range(0X406570,"T",0X1,3);
	split_sreg_range(0X406572,"T",0X1,3);
	split_sreg_range(0X406580,"T",0X1,3);
	split_sreg_range(0X4065F0,"T",0X1,3);
	split_sreg_range(0X4065F2,"T",0X1,3);
	split_sreg_range(0X4065F6,"T",0X1,3);
	split_sreg_range(0X4065F8,"T",0X1,3);
	split_sreg_range(0X406614,"T",0X1,3);
	split_sreg_range(0X406632,"T",0X1,3);
	split_sreg_range(0X40664E,"T",0X1,3);
	split_sreg_range(0X406656,"T",0X1,3);
	split_sreg_range(0X406662,"T",0X1,3);
	split_sreg_range(0X40669C,"T",0X1,3);
	split_sreg_range(0X4066A4,"T",0X1,3);
	split_sreg_range(0X406700,"T",0X1,3);
	split_sreg_range(0X4067B8,"T",0X1,3);
	split_sreg_range(0X4067C6,"T",0X1,3);
	split_sreg_range(0X4067CC,"T",0X1,3);
	split_sreg_range(0X406816,"T",0X1,3);
	split_sreg_range(0X406818,"T",0X1,3);
	split_sreg_range(0X40683E,"T",0X1,3);
	split_sreg_range(0X406840,"T",0X1,3);
	split_sreg_range(0X406846,"T",0X1,3);
	split_sreg_range(0X40686C,"T",0X1,3);
	split_sreg_range(0X4068A4,"T",0X1,3);
	split_sreg_range(0X4068D4,"T",0X1,3);
	split_sreg_range(0X4068F0,"T",0X1,3);
	split_sreg_range(0X406908,"T",0X1,3);
	split_sreg_range(0X406918,"T",0X1,3);
	split_sreg_range(0X406924,"T",0X1,3);
	split_sreg_range(0X406940,"T",0X1,3);
	split_sreg_range(0X406944,"T",0X1,3);
	split_sreg_range(0X40694E,"T",0X1,3);
	split_sreg_range(0X40695C,"T",0X1,3);
	split_sreg_range(0X4069AC,"T",0X1,3);
	split_sreg_range(0X4069AE,"T",0X1,3);
	split_sreg_range(0X4069C2,"T",0X1,3);
	split_sreg_range(0X4069C8,"T",0X1,3);
	split_sreg_range(0X4069CE,"T",0X1,3);
	split_sreg_range(0X4069D2,"T",0X1,3);
	split_sreg_range(0X4069F8,"T",0X1,3);
	split_sreg_range(0X406A1C,"T",0X1,3);
	split_sreg_range(0X406A54,"T",0X1,3);
	split_sreg_range(0X406A84,"T",0X1,3);
	split_sreg_range(0X406AA0,"T",0X1,3);
	split_sreg_range(0X406AB8,"T",0X1,3);
	split_sreg_range(0X406AC8,"T",0X1,3);
	split_sreg_range(0X406AD4,"T",0X1,3);
	split_sreg_range(0X406AEA,"T",0X1,3);
	split_sreg_range(0X406AF0,"T",0X1,3);
	split_sreg_range(0X406AFC,"T",0X1,3);
	split_sreg_range(0X406B0C,"T",0X1,3);
	split_sreg_range(0X406B16,"T",0X1,3);
	split_sreg_range(0X406B1A,"T",0X1,3);
	split_sreg_range(0X406B1C,"T",0X1,3);
	split_sreg_range(0X406B1E,"T",0X1,3);
	split_sreg_range(0X406B34,"T",0X1,3);
	split_sreg_range(0X406B36,"T",0X1,3);
	split_sreg_range(0X406B50,"T",0X1,3);
	split_sreg_range(0X406B5C,"T",0X1,3);
	split_sreg_range(0X406B6A,"T",0X1,3);
	split_sreg_range(0X406B70,"T",0X1,3);
	split_sreg_range(0X406B74,"T",0X1,3);
	split_sreg_range(0X406B84,"T",0X1,3);
	split_sreg_range(0X406BA6,"T",0X1,3);
	split_sreg_range(0X406BC4,"T",0X1,3);
	split_sreg_range(0X406BD2,"T",0X1,3);
	split_sreg_range(0X406BD4,"T",0X1,3);
	split_sreg_range(0X406BEC,"T",0X1,3);
	split_sreg_range(0X406BF4,"T",0X1,3);
	split_sreg_range(0X406C02,"T",0X1,3);
	split_sreg_range(0X406C26,"T",0X1,3);
	split_sreg_range(0X406C2A,"T",0X1,3);
	split_sreg_range(0X406C44,"T",0X1,3);
	split_sreg_range(0X406C4A,"T",0X1,3);
	split_sreg_range(0X406C52,"T",0X1,3);
	split_sreg_range(0X406C54,"T",0X1,3);
	split_sreg_range(0X406C6E,"T",0X1,3);
	split_sreg_range(0X406C76,"T",0X1,3);
	split_sreg_range(0X406C86,"T",0X1,3);
	split_sreg_range(0X406C94,"T",0X1,3);
	split_sreg_range(0X406C9C,"T",0X1,3);
	split_sreg_range(0X406CAA,"T",0X1,3);
	split_sreg_range(0X406CAE,"T",0X1,3);
	split_sreg_range(0X406CC8,"T",0X1,3);
	split_sreg_range(0X406CD2,"T",0X1,3);
	split_sreg_range(0X406D0A,"T",0X1,3);
	split_sreg_range(0X406D0E,"T",0X1,3);
	split_sreg_range(0X406D20,"T",0X1,3);
	split_sreg_range(0X406D3C,"T",0X1,3);
	split_sreg_range(0X406D3E,"T",0X1,3);
	split_sreg_range(0X406D5E,"T",0X1,3);
	split_sreg_range(0X406D66,"T",0X1,3);
	split_sreg_range(0X406D92,"T",0X1,3);
	split_sreg_range(0X406D9C,"T",0X1,3);
	split_sreg_range(0X406DA4,"T",0X1,3);
	split_sreg_range(0X406DA6,"T",0X1,3);
	split_sreg_range(0X406DAA,"T",0X1,3);
	split_sreg_range(0X406DAE,"T",0X1,3);
	split_sreg_range(0X406DBA,"T",0X1,3);
	split_sreg_range(0X406DC6,"T",0X1,3);
	split_sreg_range(0X406DD2,"T",0X1,3);
	split_sreg_range(0X406DF0,"T",0X1,3);
	split_sreg_range(0X406DF4,"T",0X1,3);
	split_sreg_range(0X406DFC,"T",0X1,3);
	split_sreg_range(0X406DFE,"T",0X1,3);
	split_sreg_range(0X406E04,"T",0X1,3);
	split_sreg_range(0X406E0C,"T",0X1,3);
	split_sreg_range(0X406E1A,"T",0X1,3);
	split_sreg_range(0X406E28,"T",0X1,3);
	split_sreg_range(0X406E42,"T",0X1,3);
	split_sreg_range(0X406E76,"T",0X1,3);
	split_sreg_range(0X406E7E,"T",0X1,3);
	split_sreg_range(0X406E80,"T",0X1,3);
	split_sreg_range(0X406E9A,"T",0X1,3);
	split_sreg_range(0X406EC2,"T",0X1,3);
	split_sreg_range(0X406EC4,"T",0X1,3);
	split_sreg_range(0X406ED0,"T",0X1,3);
	split_sreg_range(0X406ED4,"T",0X1,3);
	split_sreg_range(0X406EDC,"T",0X1,3);
	split_sreg_range(0X406F04,"T",0X1,3);
	split_sreg_range(0X406F0A,"T",0X1,3);
	split_sreg_range(0X406F0C,"T",0X1,3);
	split_sreg_range(0X406F3E,"T",0X1,3);
	split_sreg_range(0X406F6C,"T",0X1,3);
	split_sreg_range(0X406F94,"T",0X1,3);
	split_sreg_range(0X406F98,"T",0X1,3);
	split_sreg_range(0X406FAE,"T",0X1,3);
	split_sreg_range(0X406FBE,"T",0X1,3);
	split_sreg_range(0X406FC4,"T",0X1,3);
	split_sreg_range(0X406FCE,"T",0X1,3);
	split_sreg_range(0X406FD6,"T",0X1,3);
	split_sreg_range(0X406FEE,"T",0X1,3);
	split_sreg_range(0X407002,"T",0X1,3);
	split_sreg_range(0X40701A,"T",0X1,3);
	split_sreg_range(0X407022,"T",0X1,3);
	split_sreg_range(0X40702A,"T",0X1,3);
	split_sreg_range(0X407042,"T",0X1,3);
	split_sreg_range(0X407046,"T",0X1,3);
	split_sreg_range(0X40704C,"T",0X1,3);
	split_sreg_range(0X40704E,"T",0X1,3);
	split_sreg_range(0X40708A,"T",0X1,3);
	split_sreg_range(0X40708C,"T",0X1,3);
	split_sreg_range(0X407094,"T",0X1,3);
	split_sreg_range(0X4070A2,"T",0X1,3);
	split_sreg_range(0X4070B6,"T",0X1,3);
	split_sreg_range(0X4070B8,"T",0X1,3);
	split_sreg_range(0X4070BA,"T",0X1,3);
	split_sreg_range(0X4070BE,"T",0X1,3);
	split_sreg_range(0X4070C2,"T",0X1,3);
	split_sreg_range(0X4070CC,"T",0X1,3);
	split_sreg_range(0X4070D0,"T",0X1,3);
	split_sreg_range(0X4070E6,"T",0X1,3);
	split_sreg_range(0X4070EE,"T",0X1,3);
	split_sreg_range(0X4070FE,"T",0X1,3);
	split_sreg_range(0X407102,"T",0X1,3);
	split_sreg_range(0X40710C,"T",0X1,3);
	split_sreg_range(0X40711E,"T",0X1,3);
	split_sreg_range(0X407120,"T",0X1,3);
	split_sreg_range(0X40713A,"T",0X1,3);
	split_sreg_range(0X4071A4,"T",0X1,3);
	split_sreg_range(0X4071B2,"T",0X1,3);
	split_sreg_range(0X4071B6,"T",0X1,3);
	split_sreg_range(0X4071B8,"T",0X1,3);
	split_sreg_range(0X4071BE,"T",0X1,3);
	split_sreg_range(0X4071C2,"T",0X1,3);
	split_sreg_range(0X4071D8,"T",0X1,3);
	split_sreg_range(0X407254,"T",0X1,3);
	split_sreg_range(0X40725E,"T",0X1,3);
	split_sreg_range(0X407260,"T",0X1,3);
	split_sreg_range(0X40727E,"T",0X1,3);
	split_sreg_range(0X407280,"T",0X1,3);
	split_sreg_range(0X407286,"T",0X1,3);
	split_sreg_range(0X407298,"T",0X1,3);
	split_sreg_range(0X4072A8,"T",0X1,3);
	split_sreg_range(0X4072EA,"T",0X1,3);
	split_sreg_range(0X4072F0,"T",0X1,3);
	split_sreg_range(0X4072F8,"T",0X1,3);
	split_sreg_range(0X407308,"T",0X1,3);
	split_sreg_range(0X40735C,"T",0X1,3);
	split_sreg_range(0X40736A,"T",0X1,3);
	split_sreg_range(0X407378,"T",0X1,3);
	split_sreg_range(0X407388,"T",0X1,3);
	split_sreg_range(0X407398,"T",0X1,3);
	split_sreg_range(0X4073DC,"T",0X1,3);
	split_sreg_range(0X407418,"T",0X1,3);
	split_sreg_range(0X407450,"T",0X1,3);
	split_sreg_range(0X40745C,"T",0X1,3);
	split_sreg_range(0X40746A,"T",0X1,3);
	split_sreg_range(0X407498,"T",0X1,3);
	split_sreg_range(0X4074A8,"T",0X1,3);
	split_sreg_range(0X4074B6,"T",0X1,3);
	split_sreg_range(0X4074C2,"T",0X1,3);
	split_sreg_range(0X4074C8,"T",0X1,3);
	split_sreg_range(0X4074E0,"T",0X1,3);
	split_sreg_range(0X4074F2,"T",0X1,3);
	split_sreg_range(0X40750E,"T",0X1,3);
	split_sreg_range(0X407512,"T",0X1,3);
	split_sreg_range(0X407518,"T",0X1,3);
	split_sreg_range(0X407532,"T",0X1,3);
	split_sreg_range(0X40753A,"T",0X1,3);
	split_sreg_range(0X407542,"T",0X1,3);
	split_sreg_range(0X407546,"T",0X1,3);
	split_sreg_range(0X40754A,"T",0X1,3);
	split_sreg_range(0X40754E,"T",0X1,3);
	split_sreg_range(0X407550,"T",0X1,3);
	split_sreg_range(0X407574,"T",0X1,3);
	split_sreg_range(0X4075AA,"T",0X1,3);
	split_sreg_range(0X4075D2,"T",0X1,3);
	split_sreg_range(0X4075E2,"T",0X1,3);
	split_sreg_range(0X40761A,"T",0X1,3);
	split_sreg_range(0X407628,"T",0X1,3);
	split_sreg_range(0X40763A,"T",0X1,3);
	split_sreg_range(0X407654,"T",0X1,3);
	split_sreg_range(0X407668,"T",0X1,3);
	split_sreg_range(0X407684,"T",0X1,3);
	split_sreg_range(0X4076A0,"T",0X1,3);
	split_sreg_range(0X40779C,"T",0X1,3);
	split_sreg_range(0X4077A4,"T",0X1,3);
	split_sreg_range(0X4077A8,"T",0X1,3);
	split_sreg_range(0X4077AA,"T",0X1,3);
	split_sreg_range(0X4077B8,"T",0X1,3);
	split_sreg_range(0X40780E,"T",0X1,3);
	split_sreg_range(0X40783E,"T",0X1,3);
	split_sreg_range(0X407846,"T",0X1,3);
	split_sreg_range(0X40784A,"T",0X1,3);
	split_sreg_range(0X40784C,"T",0X1,3);
	split_sreg_range(0X407896,"T",0X1,3);
	split_sreg_range(0X4078BE,"T",0X1,3);
	split_sreg_range(0X4078C2,"T",0X1,3);
	split_sreg_range(0X4078CC,"T",0X1,3);
	split_sreg_range(0X4078DC,"T",0X1,3);
	split_sreg_range(0X4078E4,"T",0X1,3);
	split_sreg_range(0X4078EE,"T",0X1,3);
	split_sreg_range(0X407918,"T",0X1,3);
	split_sreg_range(0X40791C,"T",0X1,3);
	split_sreg_range(0X40796C,"T",0X1,3);
	split_sreg_range(0X40797A,"T",0X1,3);
	split_sreg_range(0X4079B8,"T",0X1,3);
	split_sreg_range(0X4079DA,"T",0X1,3);
	split_sreg_range(0X4079E8,"T",0X1,3);
	split_sreg_range(0X4079F2,"T",0X1,3);
	split_sreg_range(0X407A02,"T",0X1,3);
	split_sreg_range(0X407A1C,"T",0X1,3);
	split_sreg_range(0X407AA4,"T",0X1,3);
	split_sreg_range(0X407AEA,"T",0X1,3);
	split_sreg_range(0X407B2C,"T",0X1,3);
	split_sreg_range(0X407B30,"T",0X1,3);
	split_sreg_range(0X407B32,"T",0X1,3);
	split_sreg_range(0X407B36,"T",0X1,3);
	split_sreg_range(0X407B48,"T",0X1,3);
	split_sreg_range(0X407B6A,"T",0X1,3);
	split_sreg_range(0X407B6E,"T",0X1,3);
	split_sreg_range(0X407B98,"T",0X1,3);
	split_sreg_range(0X407BB0,"T",0X1,3);
	split_sreg_range(0X407BB4,"T",0X1,3);
	split_sreg_range(0X407BD2,"T",0X1,3);
	split_sreg_range(0X407BEE,"T",0X1,3);
	split_sreg_range(0X407C08,"T",0X1,3);
	split_sreg_range(0X407C0A,"T",0X1,3);
	split_sreg_range(0X407C36,"T",0X1,3);
	split_sreg_range(0X407C50,"T",0X1,3);
	split_sreg_range(0X407C58,"T",0X1,3);
	split_sreg_range(0X407C5A,"T",0X1,3);
	split_sreg_range(0X407C70,"T",0X1,3);
	split_sreg_range(0X407C88,"T",0X1,3);
	split_sreg_range(0X407C96,"T",0X1,3);
	split_sreg_range(0X407C98,"T",0X1,3);
	split_sreg_range(0X407C9C,"T",0X1,3);
	split_sreg_range(0X407CA2,"T",0X1,3);
	split_sreg_range(0X407CA8,"T",0X1,3);
	split_sreg_range(0X407CB6,"T",0X1,3);
	split_sreg_range(0X407CC8,"T",0X1,3);
	split_sreg_range(0X407CCC,"T",0X1,3);
	split_sreg_range(0X407CDC,"T",0X1,3);
	split_sreg_range(0X407CE2,"T",0X1,3);
	split_sreg_range(0X407CEC,"T",0X1,3);
	split_sreg_range(0X407D00,"T",0X1,3);
	split_sreg_range(0X407D02,"T",0X1,3);
	split_sreg_range(0X407D04,"T",0X1,3);
	split_sreg_range(0X407D14,"T",0X1,3);
	split_sreg_range(0X407D2E,"T",0X1,3);
	split_sreg_range(0X407D36,"T",0X1,3);
	split_sreg_range(0X407D3C,"T",0X1,3);
	split_sreg_range(0X407D54,"T",0X1,3);
	split_sreg_range(0X407D6C,"T",0X1,3);
	split_sreg_range(0X407D76,"T",0X1,3);
	split_sreg_range(0X407D80,"T",0X1,3);
	split_sreg_range(0X407D8C,"T",0X1,3);
	split_sreg_range(0X407D92,"T",0X1,3);
	split_sreg_range(0X407DA0,"T",0X1,3);
	split_sreg_range(0X407DAC,"T",0X1,3);
	split_sreg_range(0X407DB2,"T",0X1,3);
	split_sreg_range(0X407DC0,"T",0X1,3);
	split_sreg_range(0X407DCC,"T",0X1,3);
	split_sreg_range(0X407DE2,"T",0X1,3);
	split_sreg_range(0X407DE4,"T",0X1,3);
	split_sreg_range(0X407DE8,"T",0X1,3);
	split_sreg_range(0X407E06,"T",0X1,3);
	split_sreg_range(0X407E16,"T",0X1,3);
	split_sreg_range(0X407E1E,"T",0X1,3);
	split_sreg_range(0X407E3E,"T",0X1,3);
	split_sreg_range(0X407E42,"T",0X1,3);
	split_sreg_range(0X407E58,"T",0X1,3);
	split_sreg_range(0X407E5C,"T",0X1,3);
	split_sreg_range(0X407E6E,"T",0X1,3);
	split_sreg_range(0X407E80,"T",0X1,3);
	split_sreg_range(0X407E82,"T",0X1,3);
	split_sreg_range(0X407E8A,"T",0X1,3);
	split_sreg_range(0X407E94,"T",0X1,3);
	split_sreg_range(0X407EB6,"T",0X1,3);
	split_sreg_range(0X407EC6,"T",0X1,3);
	split_sreg_range(0X407ED4,"T",0X1,3);
	split_sreg_range(0X407EDC,"T",0X1,3);
	split_sreg_range(0X407EEA,"T",0X1,3);
	split_sreg_range(0X407EF4,"T",0X1,3);
	split_sreg_range(0X407F00,"T",0X1,3);
	split_sreg_range(0X407F1A,"T",0X1,3);
	split_sreg_range(0X407F22,"T",0X1,3);
	split_sreg_range(0X407F24,"T",0X1,3);
	split_sreg_range(0X407F2C,"T",0X1,3);
	split_sreg_range(0X407F72,"T",0X1,3);
	split_sreg_range(0X407F76,"T",0X1,3);
	split_sreg_range(0X407F7A,"T",0X1,3);
	split_sreg_range(0X407FB4,"T",0X1,3);
	split_sreg_range(0X407FCA,"T",0X1,3);
	split_sreg_range(0X407FCC,"T",0X1,3);
	split_sreg_range(0X407FDE,"T",0X1,3);
	split_sreg_range(0X407FE2,"T",0X1,3);
	split_sreg_range(0X408014,"T",0X1,3);
	split_sreg_range(0X408030,"T",0X1,3);
	split_sreg_range(0X408042,"T",0X1,3);
	split_sreg_range(0X40804A,"T",0X1,3);
	split_sreg_range(0X408058,"T",0X1,3);
	split_sreg_range(0X40805C,"T",0X1,3);
	split_sreg_range(0X40807C,"T",0X1,3);
	split_sreg_range(0X4080B2,"T",0X1,3);
	split_sreg_range(0X4080FA,"T",0X1,3);
	split_sreg_range(0X408100,"T",0X1,3);
	split_sreg_range(0X40810E,"T",0X1,3);
	split_sreg_range(0X408112,"T",0X1,3);
	split_sreg_range(0X40813C,"T",0X1,3);
	split_sreg_range(0X40813E,"T",0X1,3);
	split_sreg_range(0X408172,"T",0X1,3);
	split_sreg_range(0X408174,"T",0X1,3);
	split_sreg_range(0X408176,"T",0X1,3);
	split_sreg_range(0X408180,"T",0X1,3);
	split_sreg_range(0X408192,"T",0X1,3);
	split_sreg_range(0X408194,"T",0X1,3);
	split_sreg_range(0X4081B0,"T",0X1,3);
	split_sreg_range(0X4081BA,"T",0X1,3);
	split_sreg_range(0X408230,"T",0X1,3);
	split_sreg_range(0X408276,"T",0X1,3);
	split_sreg_range(0X4082E8,"T",0X1,3);
	split_sreg_range(0X40834E,"T",0X1,3);
	split_sreg_range(0X40837C,"T",0X1,3);
	split_sreg_range(0X4083DE,"T",0X1,3);
	split_sreg_range(0X4083E4,"T",0X1,3);
	split_sreg_range(0X4083EC,"T",0X1,3);
	split_sreg_range(0X40842E,"T",0X1,3);
	split_sreg_range(0X40845E,"T",0X1,3);
	split_sreg_range(0X408464,"T",0X1,3);
	split_sreg_range(0X408488,"T",0X1,3);
	split_sreg_range(0X4084B8,"T",0X1,3);
	split_sreg_range(0X4084D0,"T",0X1,3);
	split_sreg_range(0X4084E2,"T",0X1,3);
	split_sreg_range(0X4085A0,"T",0X1,3);
	split_sreg_range(0X4085EE,"T",0X1,3);
	split_sreg_range(0X4085F8,"T",0X1,3);
	split_sreg_range(0X408620,"T",0X1,3);
	split_sreg_range(0X4086B0,"T",0X1,3);
	split_sreg_range(0X4086E8,"T",0X1,3);
	split_sreg_range(0X408724,"T",0X1,3);
	split_sreg_range(0X408744,"T",0X1,3);
	split_sreg_range(0X4087B2,"T",0X1,3);
	split_sreg_range(0X4087F6,"T",0X1,3);
	split_sreg_range(0X4087FC,"T",0X1,3);
	split_sreg_range(0X408806,"T",0X1,3);
	split_sreg_range(0X4088C8,"T",0X1,3);
	split_sreg_range(0X4089D0,"T",0X1,3);
	split_sreg_range(0X408A18,"T",0X1,3);
	split_sreg_range(0X408A40,"T",0X1,3);
	split_sreg_range(0X408A4E,"T",0X1,3);
	split_sreg_range(0X408A5E,"T",0X1,3);
	split_sreg_range(0X408A6C,"T",0X1,3);
	split_sreg_range(0X408A7E,"T",0X1,3);
	split_sreg_range(0X408A80,"T",0X1,3);
	split_sreg_range(0X408A84,"T",0X1,3);
	split_sreg_range(0X408A8E,"T",0X1,3);
	split_sreg_range(0X408AAC,"T",0X1,3);
	split_sreg_range(0X408AC4,"T",0X1,3);
	split_sreg_range(0X408ACA,"T",0X1,3);
	split_sreg_range(0X408AEA,"T",0X1,3);
	split_sreg_range(0X408B10,"T",0X1,3);
	split_sreg_range(0X408B26,"T",0X1,3);
	split_sreg_range(0X408B38,"T",0X1,3);
	split_sreg_range(0X408B44,"T",0X1,3);
	split_sreg_range(0X408B50,"T",0X1,3);
	split_sreg_range(0X408B82,"T",0X1,3);
	split_sreg_range(0X408B88,"T",0X1,3);
	split_sreg_range(0X408B8A,"T",0X1,3);
	split_sreg_range(0X408B8E,"T",0X1,3);
	split_sreg_range(0X408B9C,"T",0X1,3);
	split_sreg_range(0X408BC2,"T",0X1,3);
	split_sreg_range(0X408BC4,"T",0X1,3);
	split_sreg_range(0X408BC6,"T",0X1,3);
	split_sreg_range(0X408BC8,"T",0X1,3);
	split_sreg_range(0X408C2A,"T",0X1,3);
	split_sreg_range(0X408C54,"T",0X1,3);
	split_sreg_range(0X408C8C,"T",0X1,3);
	split_sreg_range(0X408CA8,"T",0X1,3);
	split_sreg_range(0X408D2C,"T",0X1,3);
	split_sreg_range(0X408D48,"T",0X1,3);
	split_sreg_range(0X408D58,"T",0X1,3);
	split_sreg_range(0X408D5C,"T",0X1,3);
	split_sreg_range(0X408D60,"T",0X1,3);
	split_sreg_range(0X408D72,"T",0X1,3);
	split_sreg_range(0X408D74,"T",0X1,3);
	split_sreg_range(0X408D90,"T",0X1,3);
	split_sreg_range(0X408DB8,"T",0X1,3);
	split_sreg_range(0X408DBC,"T",0X1,3);
	split_sreg_range(0X408DC8,"T",0X1,3);
	split_sreg_range(0X408DCC,"T",0X1,3);
	split_sreg_range(0X408DD0,"T",0X1,3);
	split_sreg_range(0X408DD4,"T",0X1,3);
	split_sreg_range(0X408DEA,"T",0X1,3);
	split_sreg_range(0X408DF6,"T",0X1,3);
	split_sreg_range(0X408DFA,"T",0X1,3);
	split_sreg_range(0X408E00,"T",0X1,3);
	split_sreg_range(0X408E0A,"T",0X1,3);
	split_sreg_range(0X408E10,"T",0X1,3);
	split_sreg_range(0X408E14,"T",0X1,3);
	split_sreg_range(0X408E1E,"T",0X1,3);
	split_sreg_range(0X408E36,"T",0X1,3);
	split_sreg_range(0X408E3C,"T",0X1,3);
	split_sreg_range(0X408E42,"T",0X1,3);
	split_sreg_range(0X408E4C,"T",0X1,3);
	split_sreg_range(0X408E5C,"T",0X1,3);
	split_sreg_range(0X408E5E,"T",0X1,3);
	split_sreg_range(0X408E60,"T",0X1,3);
	split_sreg_range(0X408E6A,"T",0X1,3);
	split_sreg_range(0X408E7E,"T",0X1,3);
	split_sreg_range(0X408E84,"T",0X1,3);
	split_sreg_range(0X408E90,"T",0X1,3);
	split_sreg_range(0X408EA0,"T",0X1,3);
	split_sreg_range(0X408EB0,"T",0X1,3);
	split_sreg_range(0X408EB2,"T",0X1,3);
	split_sreg_range(0X408EB4,"T",0X1,3);
	split_sreg_range(0X408ED0,"T",0X1,3);
	split_sreg_range(0X408ED4,"T",0X1,3);
	split_sreg_range(0X408EDC,"T",0X1,3);
	split_sreg_range(0X408F0E,"T",0X1,3);
	split_sreg_range(0X408F20,"T",0X1,3);
	split_sreg_range(0X408F36,"T",0X1,3);
	split_sreg_range(0X408F38,"T",0X1,3);
	split_sreg_range(0X408F4C,"T",0X1,3);
	split_sreg_range(0X408F62,"T",0X1,3);
	split_sreg_range(0X408F68,"T",0X1,3);
	split_sreg_range(0X408FA2,"T",0X1,3);
	split_sreg_range(0X408FAC,"T",0X1,3);
	split_sreg_range(0X408FB4,"T",0X1,3);
	split_sreg_range(0X408FBC,"T",0X1,3);
	split_sreg_range(0X408FD2,"T",0X1,3);
	split_sreg_range(0X408FD8,"T",0X1,3);
	split_sreg_range(0X408FEC,"T",0X1,3);
	split_sreg_range(0X408FF2,"T",0X1,3);
	split_sreg_range(0X409000,"T",0X1,3);
	split_sreg_range(0X409006,"T",0X1,3);
	split_sreg_range(0X40900C,"T",0X1,3);
	split_sreg_range(0X40902C,"T",0X1,3);
	split_sreg_range(0X40903E,"T",0X1,3);
	split_sreg_range(0X409040,"T",0X1,3);
	split_sreg_range(0X409044,"T",0X1,3);
	split_sreg_range(0X409052,"T",0X1,3);
	split_sreg_range(0X4090A6,"T",0X1,3);
	split_sreg_range(0X4090AA,"T",0X1,3);
	split_sreg_range(0X409148,"T",0X1,3);
	split_sreg_range(0X409186,"T",0X1,3);
	split_sreg_range(0X4091B2,"T",0X1,3);
	split_sreg_range(0X4091B8,"T",0X1,3);
	split_sreg_range(0X4091BC,"T",0X1,3);
	split_sreg_range(0X409200,"T",0X1,3);
	split_sreg_range(0X409222,"T",0X1,3);
	split_sreg_range(0X409242,"T",0X1,3);
	split_sreg_range(0X409252,"T",0X1,3);
	split_sreg_range(0X409256,"T",0X1,3);
	split_sreg_range(0X40925C,"T",0X1,3);
	split_sreg_range(0X409262,"T",0X1,3);
	split_sreg_range(0X40926A,"T",0X1,3);
	split_sreg_range(0X409274,"T",0X1,3);
	split_sreg_range(0X409296,"T",0X1,3);
	split_sreg_range(0X4092B4,"T",0X1,3);
	split_sreg_range(0X4092BC,"T",0X1,3);
	split_sreg_range(0X4092DC,"T",0X1,3);
	split_sreg_range(0X4092F6,"T",0X1,3);
	split_sreg_range(0X4092FA,"T",0X1,3);
	split_sreg_range(0X4092FE,"T",0X1,3);
	split_sreg_range(0X409306,"T",0X1,3);
	split_sreg_range(0X409316,"T",0X1,3);
	split_sreg_range(0X409318,"T",0X1,3);
	split_sreg_range(0X40931E,"T",0X1,3);
	split_sreg_range(0X409328,"T",0X1,3);
	split_sreg_range(0X409330,"T",0X1,3);
	split_sreg_range(0X409342,"T",0X1,3);
	split_sreg_range(0X409348,"T",0X1,3);
	split_sreg_range(0X40934E,"T",0X1,3);
	split_sreg_range(0X40935E,"T",0X1,3);
	split_sreg_range(0X40936C,"T",0X1,3);
	split_sreg_range(0X409372,"T",0X1,3);
	split_sreg_range(0X40937A,"T",0X1,3);
	split_sreg_range(0X409388,"T",0X1,3);
	split_sreg_range(0X40938A,"T",0X1,3);
	split_sreg_range(0X409394,"T",0X1,3);
	split_sreg_range(0X40939C,"T",0X1,3);
	split_sreg_range(0X4093B2,"T",0X1,3);
	split_sreg_range(0X4093B8,"T",0X1,3);
	split_sreg_range(0X4093BE,"T",0X1,3);
	split_sreg_range(0X4093C4,"T",0X1,3);
	split_sreg_range(0X4093D8,"T",0X1,3);
	split_sreg_range(0X4093DC,"T",0X1,3);
	split_sreg_range(0X4093F0,"T",0X1,3);
	split_sreg_range(0X409402,"T",0X1,3);
	split_sreg_range(0X409404,"T",0X1,3);
	split_sreg_range(0X409412,"T",0X1,3);
	split_sreg_range(0X40941C,"T",0X1,3);
	split_sreg_range(0X409428,"T",0X1,3);
	split_sreg_range(0X40943A,"T",0X1,3);
	split_sreg_range(0X409448,"T",0X1,3);
	split_sreg_range(0X40945C,"T",0X1,3);
	split_sreg_range(0X40947C,"T",0X1,3);
	split_sreg_range(0X409480,"T",0X1,3);
	split_sreg_range(0X409484,"T",0X1,3);
	split_sreg_range(0X409490,"T",0X1,3);
	split_sreg_range(0X40949E,"T",0X1,3);
	split_sreg_range(0X4094B0,"T",0X1,3);
	split_sreg_range(0X4094B4,"T",0X1,3);
	split_sreg_range(0X4094BC,"T",0X1,3);
	split_sreg_range(0X4094C4,"T",0X1,3);
	split_sreg_range(0X4094F2,"T",0X1,3);
	split_sreg_range(0X4094FC,"T",0X1,3);
	split_sreg_range(0X409536,"T",0X1,3);
	split_sreg_range(0X409560,"T",0X1,3);
	split_sreg_range(0X409564,"T",0X1,3);
	split_sreg_range(0X40956A,"T",0X1,3);
	split_sreg_range(0X409580,"T",0X1,3);
	split_sreg_range(0X409586,"T",0X1,3);
	split_sreg_range(0X4095A6,"T",0X1,3);
	split_sreg_range(0X4095B4,"T",0X1,3);
	split_sreg_range(0X4095C2,"T",0X1,3);
	split_sreg_range(0X4095DE,"T",0X1,3);
	split_sreg_range(0X4095E2,"T",0X1,3);
	split_sreg_range(0X4095EC,"T",0X1,3);
	split_sreg_range(0X409660,"T",0X1,3);
	split_sreg_range(0X409668,"T",0X1,3);
	split_sreg_range(0X4096A0,"T",0X1,3);
	split_sreg_range(0X4096A4,"T",0X1,3);
	split_sreg_range(0X4096AE,"T",0X1,3);
	split_sreg_range(0X4096D8,"T",0X1,3);
	split_sreg_range(0X4096DE,"T",0X1,3);
	split_sreg_range(0X4096EE,"T",0X1,3);
	split_sreg_range(0X4096FC,"T",0X1,3);
	split_sreg_range(0X409704,"T",0X1,3);
	split_sreg_range(0X40970E,"T",0X1,3);
	split_sreg_range(0X409730,"T",0X1,3);
	split_sreg_range(0X409734,"T",0X1,3);
	split_sreg_range(0X40973A,"T",0X1,3);
	split_sreg_range(0X4097D0,"T",0X1,3);
	split_sreg_range(0X4097D6,"T",0X1,3);
	split_sreg_range(0X4097EA,"T",0X1,3);
	split_sreg_range(0X4097F2,"T",0X1,3);
	split_sreg_range(0X409804,"T",0X1,3);
	split_sreg_range(0X40980C,"T",0X1,3);
	split_sreg_range(0X409822,"T",0X1,3);
	split_sreg_range(0X409828,"T",0X1,3);
	split_sreg_range(0X40982E,"T",0X1,3);
	split_sreg_range(0X409834,"T",0X1,3);
	split_sreg_range(0X409844,"T",0X1,3);
	split_sreg_range(0X409846,"T",0X1,3);
	split_sreg_range(0X40985A,"T",0X1,3);
	split_sreg_range(0X40985C,"T",0X1,3);
	split_sreg_range(0X409870,"T",0X1,3);
	split_sreg_range(0X409872,"T",0X1,3);
	split_sreg_range(0X40987C,"T",0X1,3);
	split_sreg_range(0X40988C,"T",0X1,3);
	split_sreg_range(0X409898,"T",0X1,3);
	split_sreg_range(0X4098A6,"T",0X1,3);
	split_sreg_range(0X4098B8,"T",0X1,3);
	split_sreg_range(0X4098BC,"T",0X1,3);
	split_sreg_range(0X4098DC,"T",0X1,3);
	split_sreg_range(0X409908,"T",0X1,3);
	split_sreg_range(0X40992A,"T",0X1,3);
	split_sreg_range(0X409934,"T",0X1,3);
	split_sreg_range(0X40998E,"T",0X1,3);
	split_sreg_range(0X4099BC,"T",0X1,3);
	split_sreg_range(0X4099D4,"T",0X1,3);
	split_sreg_range(0X4099F4,"T",0X1,3);
	split_sreg_range(0X409A02,"T",0X1,3);
	split_sreg_range(0X409A06,"T",0X1,3);
	split_sreg_range(0X409A16,"T",0X1,3);
	split_sreg_range(0X409A1C,"T",0X1,3);
	split_sreg_range(0X409A28,"T",0X1,3);
	split_sreg_range(0X409C48,"T",0X1,3);
	split_sreg_range(0X409C52,"T",0X1,3);
	split_sreg_range(0X409C76,"T",0X1,3);
	split_sreg_range(0X409C8A,"T",0X1,3);
	split_sreg_range(0X409CA2,"T",0X1,3);
	split_sreg_range(0X409CA4,"T",0X1,3);
	split_sreg_range(0X409CAC,"T",0X1,3);
	split_sreg_range(0X409CB2,"T",0X1,3);
	split_sreg_range(0X409CC0,"T",0X1,3);
	split_sreg_range(0X409CD8,"T",0X1,3);
	split_sreg_range(0X409CDC,"T",0X1,3);
	split_sreg_range(0X409CF2,"T",0X1,3);
	split_sreg_range(0X409CF6,"T",0X1,3);
	split_sreg_range(0X409D1C,"T",0X1,3);
	split_sreg_range(0X409D22,"T",0X1,3);
	split_sreg_range(0X409D2E,"T",0X1,3);
	split_sreg_range(0X409D46,"T",0X1,3);
	split_sreg_range(0X409D4A,"T",0X1,3);
	split_sreg_range(0X409D60,"T",0X1,3);
	split_sreg_range(0X409D64,"T",0X1,3);
	split_sreg_range(0X409D8A,"T",0X1,3);
	split_sreg_range(0X409D90,"T",0X1,3);
	split_sreg_range(0X409D9C,"T",0X1,3);
	split_sreg_range(0X409DEA,"T",0X1,3);
	split_sreg_range(0X409E10,"T",0X1,3);
	split_sreg_range(0X409E32,"T",0X1,3);
	split_sreg_range(0X409E38,"T",0X1,3);
	split_sreg_range(0X409E46,"T",0X1,3);
	split_sreg_range(0X409E58,"T",0X1,3);
	split_sreg_range(0X409E74,"T",0X1,3);
	split_sreg_range(0X409E82,"T",0X1,3);
	split_sreg_range(0X409E94,"T",0X1,3);
	split_sreg_range(0X409E9A,"T",0X1,3);
	split_sreg_range(0X409EA4,"T",0X1,3);
	split_sreg_range(0X409EB0,"T",0X1,3);
	split_sreg_range(0X409ECC,"T",0X1,3);
	split_sreg_range(0X409EE4,"T",0X1,3);
	split_sreg_range(0X409F16,"T",0X1,3);
	split_sreg_range(0X409F44,"T",0X1,3);
	split_sreg_range(0X409F66,"T",0X1,3);
	split_sreg_range(0X409F8C,"T",0X1,3);
	split_sreg_range(0X409FD8,"T",0X1,3);
	split_sreg_range(0X40A01C,"T",0X1,3);
	split_sreg_range(0X40A088,"T",0X1,3);
	split_sreg_range(0X40A090,"T",0X1,3);
	split_sreg_range(0X40A106,"T",0X1,3);
	split_sreg_range(0X40A16C,"T",0X1,3);
	split_sreg_range(0X40A196,"T",0X1,3);
	split_sreg_range(0X40A19A,"T",0X1,3);
	split_sreg_range(0X40A1DC,"T",0X1,3);
	split_sreg_range(0X40A206,"T",0X1,3);
	split_sreg_range(0X40A22E,"T",0X1,3);
	split_sreg_range(0X40A278,"T",0X1,3);
	split_sreg_range(0X40A27C,"T",0X1,3);
	split_sreg_range(0X40A2C6,"T",0X1,3);
	split_sreg_range(0X40A2CC,"T",0X1,3);
	split_sreg_range(0X40A2D4,"T",0X1,3);
	split_sreg_range(0X40A30A,"T",0X1,3);
	split_sreg_range(0X40A328,"T",0X1,3);
	split_sreg_range(0X40A344,"T",0X1,3);
	split_sreg_range(0X40A348,"T",0X1,3);
	split_sreg_range(0X40A362,"T",0X1,3);
	split_sreg_range(0X40A364,"T",0X1,3);
	split_sreg_range(0X40A370,"T",0X1,3);
	split_sreg_range(0X40A386,"T",0X1,3);
	split_sreg_range(0X40A3E4,"T",0X1,3);
	split_sreg_range(0X40A41C,"T",0X1,3);
	split_sreg_range(0X40A454,"T",0X1,3);
	split_sreg_range(0X40A460,"T",0X1,3);
	split_sreg_range(0X40A476,"T",0X1,3);
	split_sreg_range(0X40A480,"T",0X1,3);
	split_sreg_range(0X40A488,"T",0X1,3);
	split_sreg_range(0X40A48A,"T",0X1,3);
	split_sreg_range(0X40A498,"T",0X1,3);
	split_sreg_range(0X40A4B0,"T",0X1,3);
	split_sreg_range(0X40A4B8,"T",0X1,3);
	split_sreg_range(0X40A516,"T",0X1,3);
	split_sreg_range(0X40A520,"T",0X1,3);
	split_sreg_range(0X40A532,"T",0X1,3);
	split_sreg_range(0X40A564,"T",0X1,3);
	split_sreg_range(0X40A59A,"T",0X1,3);
	split_sreg_range(0X40A5B6,"T",0X1,3);
	split_sreg_range(0X40A5CA,"T",0X1,3);
	split_sreg_range(0X40A5F0,"T",0X1,3);
	split_sreg_range(0X40A5F6,"T",0X1,3);
	split_sreg_range(0X40A612,"T",0X1,3);
	split_sreg_range(0X40A626,"T",0X1,3);
	split_sreg_range(0X40A636,"T",0X1,3);
	split_sreg_range(0X40A63C,"T",0X1,3);
	split_sreg_range(0X40A658,"T",0X1,3);
	split_sreg_range(0X40A660,"T",0X1,3);
	split_sreg_range(0X40A6AE,"T",0X1,3);
	split_sreg_range(0X40A6B6,"T",0X1,3);
	split_sreg_range(0X40A702,"T",0X1,3);
	split_sreg_range(0X40A756,"T",0X1,3);
	split_sreg_range(0X40A838,"T",0X1,3);
	split_sreg_range(0X40A864,"T",0X1,3);
	split_sreg_range(0X40A8A8,"T",0X1,3);
	split_sreg_range(0X40A8AC,"T",0X1,3);
	split_sreg_range(0X40A8B0,"T",0X1,3);
	split_sreg_range(0X40A8BA,"T",0X1,3);
	split_sreg_range(0X40A8C2,"T",0X1,3);
	split_sreg_range(0X40A8E2,"T",0X1,3);
	split_sreg_range(0X40A938,"T",0X1,3);
	split_sreg_range(0X40A93C,"T",0X1,3);
	split_sreg_range(0X40A940,"T",0X1,3);
	split_sreg_range(0X40A950,"T",0X1,3);
	split_sreg_range(0X40A954,"T",0X1,3);
	split_sreg_range(0X40A97E,"T",0X1,3);
	split_sreg_range(0X40A982,"T",0X1,3);
	split_sreg_range(0X40A9B0,"T",0X1,3);
	split_sreg_range(0X40A9D2,"T",0X1,3);
	split_sreg_range(0X40A9E2,"T",0X1,3);
	split_sreg_range(0X40A9EC,"T",0X1,3);
	split_sreg_range(0X40AA00,"T",0X1,3);
	split_sreg_range(0X40AA0A,"T",0X1,3);
	split_sreg_range(0X40AA1E,"T",0X1,3);
	split_sreg_range(0X40AA28,"T",0X1,3);
	split_sreg_range(0X40AA58,"T",0X1,3);
	split_sreg_range(0X40AA64,"T",0X1,3);
	split_sreg_range(0X40AA94,"T",0X1,3);
	split_sreg_range(0X40AA9E,"T",0X1,3);
	split_sreg_range(0X40AAB8,"T",0X1,3);
	split_sreg_range(0X40AAEC,"T",0X1,3);
	split_sreg_range(0X40AAF8,"T",0X1,3);
	split_sreg_range(0X40AB2A,"T",0X1,3);
	split_sreg_range(0X40AB44,"T",0X1,3);
	split_sreg_range(0X40AB4A,"T",0X1,3);
	split_sreg_range(0X40AB6C,"T",0X1,3);
	split_sreg_range(0X40AB78,"T",0X1,3);
	split_sreg_range(0X40ABA4,"T",0X1,3);
	split_sreg_range(0X40ABEC,"T",0X1,3);
	split_sreg_range(0X40AC14,"T",0X1,3);
	split_sreg_range(0X40AC16,"T",0X1,3);
	split_sreg_range(0X40AC34,"T",0X1,3);
	split_sreg_range(0X40AC6C,"T",0X1,3);
	split_sreg_range(0X40AC7C,"T",0X1,3);
	split_sreg_range(0X40AC7E,"T",0X1,3);
	split_sreg_range(0X40AC80,"T",0X1,3);
	split_sreg_range(0X40AC8C,"T",0X1,3);
	split_sreg_range(0X40AC98,"T",0X1,3);
	split_sreg_range(0X40ACA6,"T",0X1,3);
	split_sreg_range(0X40ACB0,"T",0X1,3);
	split_sreg_range(0X40ACC4,"T",0X1,3);
	split_sreg_range(0X40ACCC,"T",0X1,3);
	split_sreg_range(0X40AD04,"T",0X1,3);
	split_sreg_range(0X40AD40,"T",0X1,3);
	split_sreg_range(0X40AD74,"T",0X1,3);
	split_sreg_range(0X40AD82,"T",0X1,3);
	split_sreg_range(0X40ADA0,"T",0X1,3);
	split_sreg_range(0X40ADAC,"T",0X1,3);
	split_sreg_range(0X40ADB2,"T",0X1,3);
	split_sreg_range(0X40ADBC,"T",0X1,3);
	split_sreg_range(0X40ADD0,"T",0X1,3);
	split_sreg_range(0X40ADF0,"T",0X1,3);
	split_sreg_range(0X40ADF4,"T",0X1,3);
	split_sreg_range(0X40AE2A,"T",0X1,3);
	split_sreg_range(0X40AEAA,"T",0X1,3);
	split_sreg_range(0X40AEDC,"T",0X1,3);
	split_sreg_range(0X40AEF6,"T",0X1,3);
	split_sreg_range(0X40AEF8,"T",0X1,3);
	split_sreg_range(0X40AEFA,"T",0X1,3);
	split_sreg_range(0X40AF08,"T",0X1,3);
	split_sreg_range(0X40AF12,"T",0X1,3);
	split_sreg_range(0X40AF34,"T",0X1,3);
	split_sreg_range(0X40AF36,"T",0X1,3);
	split_sreg_range(0X40AF46,"T",0X1,3);
	split_sreg_range(0X40AF50,"T",0X1,3);
	split_sreg_range(0X40AFD2,"T",0X1,3);
	split_sreg_range(0X40B004,"T",0X1,3);
	split_sreg_range(0X40B01C,"T",0X1,3);
	split_sreg_range(0X40B020,"T",0X1,3);
	split_sreg_range(0X40B032,"T",0X1,3);
	split_sreg_range(0X40B03C,"T",0X1,3);
	split_sreg_range(0X40B048,"T",0X1,3);
	split_sreg_range(0X40B05C,"T",0X1,3);
	split_sreg_range(0X40B05E,"T",0X1,3);
	split_sreg_range(0X40B078,"T",0X1,3);
	split_sreg_range(0X40B090,"T",0X1,3);
	split_sreg_range(0X40B0D0,"T",0X1,3);
	split_sreg_range(0X40B0DC,"T",0X1,3);
	split_sreg_range(0X40B134,"T",0X1,3);
	split_sreg_range(0X40B1D8,"T",0X1,3);
	split_sreg_range(0X40B22E,"T",0X1,3);
	split_sreg_range(0X40B23E,"T",0X1,3);
	split_sreg_range(0X40B25C,"T",0X1,3);
	split_sreg_range(0X40B262,"T",0X1,3);
	split_sreg_range(0X40B264,"T",0X1,3);
	split_sreg_range(0X40B266,"T",0X1,3);
	split_sreg_range(0X40B268,"T",0X1,3);
	split_sreg_range(0X40B294,"T",0X1,3);
	split_sreg_range(0X40B2A2,"T",0X1,3);
	split_sreg_range(0X40B2C0,"T",0X1,3);
	split_sreg_range(0X40B2C2,"T",0X1,3);
	split_sreg_range(0X40B2C6,"T",0X1,3);
	split_sreg_range(0X40B2CC,"T",0X1,3);
	split_sreg_range(0X40B2EC,"T",0X1,3);
	split_sreg_range(0X40B30E,"T",0X1,3);
	split_sreg_range(0X40B310,"T",0X1,3);
	split_sreg_range(0X40B324,"T",0X1,3);
	split_sreg_range(0X40B33C,"T",0X1,3);
	split_sreg_range(0X40B340,"T",0X1,3);
	split_sreg_range(0X40B34A,"T",0X1,3);
	split_sreg_range(0X40B35C,"T",0X1,3);
	split_sreg_range(0X40B3C4,"T",0X1,3);
	split_sreg_range(0X40B3D8,"T",0X1,3);
	split_sreg_range(0X40B3EC,"T",0X1,3);
	split_sreg_range(0X40B400,"T",0X1,3);
	split_sreg_range(0X40B414,"T",0X1,3);
	split_sreg_range(0X40B428,"T",0X1,3);
	split_sreg_range(0X40B43C,"T",0X1,3);
	split_sreg_range(0X40B450,"T",0X1,3);
	split_sreg_range(0X40B464,"T",0X1,3);
	split_sreg_range(0X40B478,"T",0X1,3);
	split_sreg_range(0X40B48C,"T",0X1,3);
	split_sreg_range(0X40B4A0,"T",0X1,3);
	split_sreg_range(0X40B4B4,"T",0X1,3);
	split_sreg_range(0X40B4C2,"T",0X1,3);
	split_sreg_range(0X40B4D4,"T",0X1,3);
	split_sreg_range(0X40B4D8,"T",0X1,3);
	split_sreg_range(0X40B4EC,"T",0X1,3);
	split_sreg_range(0X40B4F0,"T",0X1,3);
	split_sreg_range(0X40B4FC,"T",0X1,3);
	split_sreg_range(0X40B51E,"T",0X1,3);
	split_sreg_range(0X40B540,"T",0X1,3);
	split_sreg_range(0X40B542,"T",0X1,3);
	split_sreg_range(0X40B5C4,"T",0X1,3);
	split_sreg_range(0X40B5DC,"T",0X1,3);
	split_sreg_range(0X40B60E,"T",0X1,3);
	split_sreg_range(0X40B614,"T",0X1,3);
	split_sreg_range(0X40B61C,"T",0X1,3);
	split_sreg_range(0X40B636,"T",0X1,3);
	split_sreg_range(0X40B63A,"T",0X1,3);
	split_sreg_range(0X40B644,"T",0X1,3);
	split_sreg_range(0X40B660,"T",0X1,3);
	split_sreg_range(0X40B66C,"T",0X1,3);
	split_sreg_range(0X40B680,"T",0X1,3);
	split_sreg_range(0X40B698,"T",0X1,3);
	split_sreg_range(0X40B6BC,"T",0X1,3);
	split_sreg_range(0X40B6C0,"T",0X1,3);
	split_sreg_range(0X40B6DC,"T",0X1,3);
	split_sreg_range(0X40B6EC,"T",0X1,3);
	split_sreg_range(0X40B706,"T",0X1,3);
	split_sreg_range(0X40B70A,"T",0X1,3);
	split_sreg_range(0X40B724,"T",0X1,3);
	split_sreg_range(0X40B72E,"T",0X1,3);
	split_sreg_range(0X40B732,"T",0X1,3);
	split_sreg_range(0X40B750,"T",0X1,3);
	split_sreg_range(0X40B754,"T",0X1,3);
	split_sreg_range(0X40B75A,"T",0X1,3);
	split_sreg_range(0X40B766,"T",0X1,3);
	split_sreg_range(0X40B77A,"T",0X1,3);
	split_sreg_range(0X40B786,"T",0X1,3);
	split_sreg_range(0X40B790,"T",0X1,3);
	split_sreg_range(0X40B7A6,"T",0X1,3);
	split_sreg_range(0X40B7B8,"T",0X1,3);
	split_sreg_range(0X40B7C0,"T",0X1,3);
	split_sreg_range(0X40B7C6,"T",0X1,3);
	split_sreg_range(0X40B7CA,"T",0X1,3);
	split_sreg_range(0X40B7E2,"T",0X1,3);
	split_sreg_range(0X40B7F4,"T",0X1,3);
	split_sreg_range(0X40B7FC,"T",0X1,3);
	split_sreg_range(0X40B810,"T",0X1,3);
	split_sreg_range(0X40B84C,"T",0X1,3);
	split_sreg_range(0X40B860,"T",0X1,3);
	split_sreg_range(0X40B88E,"T",0X1,3);
	split_sreg_range(0X40B8A4,"T",0X1,3);
	split_sreg_range(0X40B8BC,"T",0X1,3);
	split_sreg_range(0X40B8C2,"T",0X1,3);
	split_sreg_range(0X40B900,"T",0X1,3);
	split_sreg_range(0X40B908,"T",0X1,3);
	split_sreg_range(0X40B91E,"T",0X1,3);
	split_sreg_range(0X40B926,"T",0X1,3);
	split_sreg_range(0X40B928,"T",0X1,3);
	split_sreg_range(0X40B92A,"T",0X1,3);
	split_sreg_range(0X40B92E,"T",0X1,3);
	split_sreg_range(0X40B938,"T",0X1,3);
	split_sreg_range(0X40B942,"T",0X1,3);
	split_sreg_range(0X40B944,"T",0X1,3);
	split_sreg_range(0X40B962,"T",0X1,3);
	split_sreg_range(0X40B966,"T",0X1,3);
	split_sreg_range(0X40B96C,"T",0X1,3);
	split_sreg_range(0X40B97E,"T",0X1,3);
	split_sreg_range(0X40B994,"T",0X1,3);
	split_sreg_range(0X40B99E,"T",0X1,3);
	split_sreg_range(0X40B9AA,"T",0X1,3);
	split_sreg_range(0X40B9C8,"T",0X1,3);
	split_sreg_range(0X40B9DE,"T",0X1,3);
	split_sreg_range(0X40B9E4,"T",0X1,3);
	split_sreg_range(0X40B9EC,"T",0X1,3);
	split_sreg_range(0X40B9F0,"T",0X1,3);
	split_sreg_range(0X40BA1A,"T",0X1,3);
	split_sreg_range(0X40BA34,"T",0X1,3);
	split_sreg_range(0X40BA62,"T",0X1,3);
	split_sreg_range(0X40BA64,"T",0X1,3);
	split_sreg_range(0X40BA98,"T",0X1,3);
	split_sreg_range(0X40BA9E,"T",0X1,3);
	split_sreg_range(0X40BAC8,"T",0X1,3);
	split_sreg_range(0X40BAF8,"T",0X1,3);
	split_sreg_range(0X40BAFA,"T",0X1,3);
	split_sreg_range(0X40BB14,"T",0X1,3);
	split_sreg_range(0X40BB38,"T",0X1,3);
	split_sreg_range(0X40BB52,"T",0X1,3);
	split_sreg_range(0X40BB54,"T",0X1,3);
	split_sreg_range(0X40BB6C,"T",0X1,3);
	split_sreg_range(0X40BBA8,"T",0X1,3);
	split_sreg_range(0X40BBB0,"T",0X1,3);
	split_sreg_range(0X40BBCC,"T",0X1,3);
	split_sreg_range(0X40BC34,"T",0X1,3);
	split_sreg_range(0X40BC5E,"T",0X1,3);
	split_sreg_range(0X40BC66,"T",0X1,3);
	split_sreg_range(0X40BC7A,"T",0X1,3);
	split_sreg_range(0X40BC7C,"T",0X1,3);
	split_sreg_range(0X40BC80,"T",0X1,3);
	split_sreg_range(0X40BC84,"T",0X1,3);
	split_sreg_range(0X40BC90,"T",0X1,3);
	split_sreg_range(0X40BC96,"T",0X1,3);
	split_sreg_range(0X40BCB0,"T",0X1,3);
	split_sreg_range(0X40BCC0,"T",0X1,3);
	split_sreg_range(0X40BCD2,"T",0X1,3);
	split_sreg_range(0X40BCDC,"T",0X1,3);
	split_sreg_range(0X40BCF8,"T",0X1,3);
	split_sreg_range(0X40BD0C,"T",0X1,3);
	split_sreg_range(0X40BD26,"T",0X1,3);
	split_sreg_range(0X40BD2C,"T",0X1,3);
	split_sreg_range(0X40BD52,"T",0X1,3);
	split_sreg_range(0X40BD60,"T",0X1,3);
	split_sreg_range(0X40BD70,"T",0X1,3);
	split_sreg_range(0X40BDB0,"T",0X1,3);
	split_sreg_range(0X40BDEA,"T",0X1,3);
	split_sreg_range(0X40BE44,"T",0X1,3);
	split_sreg_range(0X40BE60,"T",0X1,3);
	split_sreg_range(0X40BE66,"T",0X1,3);
	split_sreg_range(0X40BE8C,"T",0X1,3);
	split_sreg_range(0X40BF10,"T",0X1,3);
	split_sreg_range(0X40BF2C,"T",0X1,3);
	split_sreg_range(0X40BF3C,"T",0X1,3);
	split_sreg_range(0X40BF58,"T",0X1,3);
	split_sreg_range(0X40BF68,"T",0X1,3);
	split_sreg_range(0X40BF72,"T",0X1,3);
	split_sreg_range(0X40C5B0,"T",0X1,3);
	split_sreg_range(0X40C60E,"T",0X1,3);
	split_sreg_range(0X40C7E4,"T",0X1,3);
	split_sreg_range(0X40C866,"T",0X1,3);
	split_sreg_range(0X40CA10,"T",0X1,3);
	split_sreg_range(0X40CA86,"T",0X1,3);
	split_sreg_range(0X40CA90,"T",0X1,3);
	split_sreg_range(0X40CAF4,"T",0X1,3);
	split_sreg_range(0X40CB24,"T",0X1,3);
	split_sreg_range(0X40CB42,"T",0X1,3);
	split_sreg_range(0X40CB8C,"T",0X1,3);
	split_sreg_range(0X40CBAA,"T",0X1,3);
	split_sreg_range(0X40CBE8,"T",0X1,3);
	split_sreg_range(0X40CC18,"T",0X1,3);
	split_sreg_range(0X40CC9E,"T",0X1,3);
	split_sreg_range(0X40CD92,"T",0X1,3);
	split_sreg_range(0X40CEC4,"T",0X1,3);
	split_sreg_range(0X40CF52,"T",0X1,3);
	split_sreg_range(0X40CF60,"T",0X1,3);
	split_sreg_range(0X40CF7A,"T",0X1,3);
	split_sreg_range(0X40D320,"T",0,3);
	split_sreg_range(0X203E0000,"T",0,3);
	split_sreg_range(0X400C0000,"T",0,3);
	split_sreg_range(0X400000,"DS",0X2,3);
	split_sreg_range(0X40D320,"DS",0X2,3);
	split_sreg_range(0X203E0000,"DS",0X2,3);
	split_sreg_range(0X400C0000,"DS",0X2,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
	Bytes_1();
        end_type_updating(UTP_STRUCT);
}

// End of file.

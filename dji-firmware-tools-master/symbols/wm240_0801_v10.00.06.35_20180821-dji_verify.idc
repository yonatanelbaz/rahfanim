//
// +-------------------------------------------------------------------------+
// |   This file has been generated by The Interactive Disassembler (IDA)    |
// |           Copyright (c) 2017 Hex-Rays, <support@hex-rays.com>           |
// +-------------------------------------------------------------------------+
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
  // set 'loading idc file' mode
  set_inf_attr(INF_GENFLAGS, INFFL_LOADIDC|get_inf_attr(INF_GENFLAGS));
  GenInfo();            // various settings
  Segments();           // segmentation
  Enums();              // enumerations
  Structures();         // structure types
  ApplyStrucTInfos();   // structure type infos
  Patches();            // manual patches
  SegRegs();            // segment register values
  Bytes();              // individual bytes (code,data)
  Functions();          // function definitions
  // clear 'loading idc file' mode
  set_inf_attr(INF_GENFLAGS, ~INFFL_LOADIDC&get_inf_attr(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        delete_all_segments();    // purge database
	set_processor_type("ARM", SETPROC_USER);
	set_inf_attr(INF_COMPILER, 6);
	set_inf_attr(INF_STRLIT_BREAK, 0xA);
	set_flag(INF_CMTFLAG, SW_ALLCMT, 0);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_VOID, 0);
	set_inf_attr(INF_XREFNUM, 2);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_AUTO, 1);
	set_inf_attr(INF_INDENT, 16);
	set_inf_attr(INF_COMMENT, 40);
	set_inf_attr(INF_MAXREF, 0x10);
	add_default_til("armv12");
	add_default_til("android_arm");
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	set_selector(0X1,0);
	set_selector(0X2,0);
	set_selector(0X3,0);
	set_selector(0X4,0);
	set_selector(0X5,0);
	set_selector(0X6,0);
	set_selector(0X7,0);
	set_selector(0X8,0);
	set_selector(0X9,0);
	set_selector(0XA,0);
	set_selector(0XB,0);
	set_selector(0XC,0);
	set_selector(0XD,0);
	set_selector(0XE,0);
	set_selector(0XF,0);
	set_selector(0X10,0);
	set_selector(0X11,0);
	set_selector(0X12,0);
	set_selector(0X13,0);
	;
	add_segm_ex(0,0X808,0X1,1,6,2,ADDSEG_NOSREG);
	SegRename(0,"LOAD");
	SegClass (0,"CODE");
	SegDefReg(0x0,"T",0x0);
	SegDefReg(0x0,"DS",0x1);
	set_segm_type(0,2);
	add_segm_ex(0X808,0X90C,0X4,1,5,2,ADDSEG_NOSREG);
	SegRename(0X808,".plt");
	SegClass (0X808,"CODE");
	SegDefReg(0x808,"T",0x0);
	SegDefReg(0x808,"DS",0x1);
	set_segm_type(0X808,2);
	add_segm_ex(0X90C,0X910,0X1,1,6,2,ADDSEG_NOSREG);
	SegRename(0X90C,"LOAD");
	SegClass (0X90C,"CODE");
	SegDefReg(0x90C,"T",0x0);
	SegDefReg(0x90C,"DS",0x1);
	set_segm_type(0X90C,2);
	add_segm_ex(0X910,0X295C,0X5,1,10,2,ADDSEG_NOSREG);
	SegRename(0X910,".text");
	SegClass (0X910,"CODE");
	SegDefReg(0x910,"T",0x0);
	SegDefReg(0x910,"DS",0x1);
	set_segm_type(0X910,2);
	add_segm_ex(0X295C,0X2974,0X6,1,5,2,ADDSEG_NOSREG);
	SegRename(0X295C,".note.android.ident");
	SegClass (0X295C,"CONST");
	SegDefReg(0x295C,"T",0x0);
	SegDefReg(0x295C,"DS",0x1);
	set_segm_type(0X295C,3);
	add_segm_ex(0X2974,0X2A4C,0X7,1,5,2,ADDSEG_NOSREG);
	SegRename(0X2974,".ARM.exidx");
	SegClass (0X2974,"CONST");
	SegDefReg(0x2974,"T",0x0);
	SegDefReg(0x2974,"DS",0x1);
	set_segm_type(0X2974,3);
	add_segm_ex(0X2A4C,0X6104,0X8,1,5,2,ADDSEG_NOSREG);
	SegRename(0X2A4C,".rodata");
	SegClass (0X2A4C,"CONST");
	SegDefReg(0x2A4C,"T",0x0);
	SegDefReg(0x2A4C,"DS",0x1);
	set_segm_type(0X2A4C,3);
	add_segm_ex(0X6104,0X6140,0X9,1,5,2,ADDSEG_NOSREG);
	SegRename(0X6104,".ARM.extab");
	SegClass (0X6104,"CONST");
	SegDefReg(0x6104,"T",0x0);
	SegDefReg(0x6104,"DS",0x1);
	set_segm_type(0X6104,3);
	add_segm_ex(0X7DEC,0X7E4C,0XA,1,5,2,ADDSEG_NOSREG);
	SegRename(0X7DEC,".data.rel.ro.local");
	SegClass (0X7DEC,"DATA");
	SegDefReg(0x7DEC,"T",0x0);
	SegDefReg(0x7DEC,"DS",0x1);
	set_segm_type(0X7DEC,3);
	add_segm_ex(0X7E4C,0X7E54,0XB,1,5,2,ADDSEG_NOSREG);
	SegRename(0X7E4C,".preinit_array");
	SegClass (0X7E4C,"DATA");
	SegDefReg(0x7E4C,"T",0x0);
	SegDefReg(0x7E4C,"DS",0x1);
	set_segm_type(0X7E4C,3);
	add_segm_ex(0X7E54,0X7E5C,0XC,1,5,2,ADDSEG_NOSREG);
	SegRename(0X7E54,".init_array");
	SegClass (0X7E54,"DATA");
	SegDefReg(0x7E54,"T",0x0);
	SegDefReg(0x7E54,"DS",0x1);
	set_segm_type(0X7E54,3);
	add_segm_ex(0X7E5C,0X7E64,0XD,1,5,2,ADDSEG_NOSREG);
	SegRename(0X7E5C,".fini_array");
	SegClass (0X7E5C,"DATA");
	SegDefReg(0x7E5C,"T",0x0);
	SegDefReg(0x7E5C,"DS",0x1);
	set_segm_type(0X7E5C,3);
	add_segm_ex(0X7E64,0X7E8C,0XE,1,5,2,ADDSEG_NOSREG);
	SegRename(0X7E64,".data.rel.ro");
	SegClass (0X7E64,"DATA");
	SegDefReg(0x7E64,"T",0x0);
	SegDefReg(0x7E64,"DS",0x1);
	set_segm_type(0X7E64,3);
	add_segm_ex(0X7E8C,0X7F84,0X2,1,6,2,ADDSEG_NOSREG);
	SegRename(0X7E8C,"LOAD");
	SegClass (0X7E8C,"DATA");
	SegDefReg(0x7E8C,"T",0x0);
	SegDefReg(0x7E8C,"DS",0x1);
	set_segm_type(0X7E8C,3);
	add_segm_ex(0X7F84,0X8000,0XF,1,5,2,ADDSEG_NOSREG);
	SegRename(0X7F84,".got");
	SegClass (0X7F84,"DATA");
	SegDefReg(0x7F84,"T",0x0);
	SegDefReg(0x7F84,"DS",0x1);
	set_segm_type(0X7F84,3);
	add_segm_ex(0X8000,0X864C,0X10,1,5,2,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X8000,".bss");
	SegClass (0X8000,"BSS");
	SegDefReg(0x8000,"T",0x0);
	SegDefReg(0x8000,"DS",0x1);
	set_segm_type(0X8000,9);
	add_segm_ex(0X864C,0X864D,0X11,1,1,2,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X864C,".prgend");
	SegClass (0X864C,".prgend");
	SegDefReg(0x864C,"T",0x0);
	SegDefReg(0x864C,"DS",0x11);
	set_segm_type(0X864C,7);
	add_segm_ex(0X8650,0X86E8,0X12,1,5,2,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X8650,"extern");
	SegClass (0X8650,"extern");
	SegDefReg(0x8650,"T",0x0);
	SegDefReg(0x8650,"DS",0x12);
	set_segm_type(0X8650,1);
	add_segm_ex(0X86E8,0X86F4,0X13,1,5,2,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X86E8,"abs");
	SegClass (0X86E8,"abs");
	SegDefReg(0x86E8,"T",0x0);
	SegDefReg(0x86E8,"DS",0x13);
	set_segm_type(0X86E8,10);
	set_inf_attr(INF_LOW_OFF, 0x20);
	set_inf_attr(INF_HIGH_OFF, 0x9510);
}

static Enums_0(id) {

	id = add_enum(-1,"SHA256_defines",0x1100000);
	add_enum_member(id,"SHA256_DIGEST_SIZE",	0X20,	-1);
	return id;
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        begin_type_updating(UTP_ENUM);
	id = Enums_0(id);
        end_type_updating(UTP_ENUM);
}

static ApplyStrucTInfos_0(void) {
        auto id;
	id = get_struc_id("Elf32_Sym");
	SetType(get_member_id(id, 0x0), "unsigned __int32");
	SetType(get_member_id(id, 0x4), "unsigned __int32");
	SetType(get_member_id(id, 0x8), "unsigned __int32");
	SetType(get_member_id(id, 0xC), "unsigned __int8");
	SetType(get_member_id(id, 0xD), "unsigned __int8");
	SetType(get_member_id(id, 0xE), "unsigned __int16");
	id = get_struc_id("Elf32_Rel");
	SetType(get_member_id(id, 0x0), "unsigned __int32");
	SetType(get_member_id(id, 0x4), "unsigned __int32");
	id = get_struc_id("Elf32_Dyn");
	SetType(get_member_id(id, 0x0), "__int32");
	SetType(get_member_id(id, 0x4), "union Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249");
	id = get_struc_id("Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249");
	SetType(get_member_id(id, 0x0), "unsigned __int32");
	SetType(get_member_id(id, 0x1), "unsigned __int32");
	id = get_struc_id("structors_array_t");
	SetType(get_member_id(id, 0x0), "void (**)(void)");
	SetType(get_member_id(id, 0x4), "void (**)(void)");
	SetType(get_member_id(id, 0x8), "void (**)(void)");
	id = get_struc_id("option");
	SetType(get_member_id(id, 0x0), "char *");
	SetType(get_member_id(id, 0x8), "int *");
	id = get_struc_id("ImageVerifyState");
	SetType(get_member_id(id, 0x24), "struct ImageHeader");
	SetType(get_member_id(id, 0xE4), "uint8_t[512]");
	SetType(get_member_id(id, 0x2F8), "struct SHA256_CTX");
	SetType(get_member_id(id, 0x368), "struct AES_CTX[1]");
	id = get_struc_id("SHA_CTX");
	SetType(get_member_id(id, 0x0), "void *");
	SetType(get_member_id(id, 0x8), "uint64_t");
	id = get_struc_id("SHA256_CTX");
	SetType(get_member_id(id, 0x0), "void *");
	SetType(get_member_id(id, 0x8), "uint64_t");
	id = get_struc_id("ImageHeader");
	SetType(get_member_id(id, 0x90), "uint64_t");
	id = get_struc_id("AES_CTX");
	SetType(get_member_id(id, 0x0), "uint32_t[60]");
	SetType(get_member_id(id, 0xF0), "uint32_t");
	return id;
}

//------------------------------------------------------------------------
// Information about type information for structure members

static ApplyStrucTInfos() {
	ApplyStrucTInfos_0();
}

static Structures_0(id) {
        auto mid;

	id = add_struc(-1,"Elf32_Sym",0);
	id = add_struc(-1,"Elf32_Rel",0);
	id = add_struc(-1,"Elf32_Dyn",0);
	id = add_struc(-1,"Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249",1);
	id = add_struc(-1,"structors_array_t",0);
	id = add_struc(-1,"option",0);
	id = add_struc(-1,"ImageVerifyState",0);
	id = add_struc(-1,"SHA_CTX",0);
	id = add_struc(-1,"SHA256_CTX",0);
	id = add_struc(-1,"ImageHeader",0);
	id = add_struc(-1,"AES_CTX",0);
	
	id = get_struc_id("Elf32_Sym");
	mid = add_struc_member(id,"st_name",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"st_value",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"st_size",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"st_info",	0XC,	0x000400,	-1,	1);
	mid = add_struc_member(id,"st_other",	0XD,	0x000400,	-1,	1);
	mid = add_struc_member(id,"st_shndx",	0XE,	0x10000400,	-1,	2);
	set_struc_align(id,2);
	
	id = get_struc_id("Elf32_Rel");
	mid = add_struc_member(id,"r_offset",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"r_info",	0X4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249");
	mid = add_struc_member(id,"d_val",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"d_ptr",	0,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("Elf32_Dyn");
	mid = add_struc_member(id,"d_tag",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"d_un",	0X4,	0x60000400,	get_struc_id("Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("structors_array_t");
	mid = add_struc_member(id,"preinit_array",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"init_array",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"fini_array",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("option");
	mid = add_struc_member(id,"name",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"has_arg",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"flag",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"val",	0XC,	0x20200400,	-1,	4);
	
	id = get_struc_id("SHA256_CTX");
	mid = add_struc_member(id,"f",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"f_pad",	0X4,	0x000400,	-1,	4);
	mid = add_struc_member(id,"count",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"buf",	0X10,	0x000400,	-1,	64);
	mid = add_struc_member(id,"state",	0X50,	0x20000400,	-1,	32);
	
	id = get_struc_id("ImageHeader");
	mid = add_struc_member(id,"magic_num",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"header_version",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"size",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"reserved",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"header_size",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"signature_size",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"payload_size",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"target_size",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"os",	0X20,	0x000400,	-1,	1);
	mid = add_struc_member(id,"arch",	0X21,	0x200400,	-1,	1);
	mid = add_struc_member(id,"compression",	0X22,	0x000400,	-1,	1);
	mid = add_struc_member(id,"anti_version",	0X23,	0x000400,	-1,	1);
	mid = add_struc_member(id,"auth_alg",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"auth_key",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"enc_key",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"scram_key",	0X30,	0x000400,	-1,	16);
	mid = add_struc_member(id,"name",	0X40,	0x000400,	-1,	32);
	mid = add_struc_member(id,"mdtype",	0X60,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"version",	0X64,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"date",	0X68,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"reserved2",	0X6C,	0x20000400,	-1,	20);
	mid = add_struc_member(id,"userdata",	0X80,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"entry",	0X90,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"reserved3",	0X98,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"chunk_num",	0X9C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"payload_digest",	0XA0,	0x000400,	-1,	32);
	
	id = get_struc_id("AES_CTX");
	mid = add_struc_member(id,"Ek",	0,	0x20000400,	-1,	240);
	mid = add_struc_member(id,"Nr",	0XF0,	0x20000400,	-1,	4);
	
	id = get_struc_id("ImageVerifyState");
	mid = add_struc_member(id,"ifname",	0,	0x000400,	-1,	32);
	mid = add_struc_member(id,"field_20",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"imghdr",	0X24,	0x60000400,	get_struc_id("ImageHeader"),	192);
	mid = add_struc_member(id,"field_E4",	0XE4,	0x000400,	-1,	512);
	mid = add_struc_member(id,"parsed_payload_size",	0X2E4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_2E8",	0X2E8,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_2E9",	0X2E9,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_2EA",	0X2EA,	0x000400,	-1,	2);
	mid = add_struc_member(id,"field_2EC",	0X2EC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_2F0",	0X2F0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_2F4",	0X2F4,	0x000400,	-1,	4);
	mid = add_struc_member(id,"payload_digest_ctx",	0X2F8,	0x60000400,	get_struc_id("SHA256_CTX"),	112);
	mid = add_struc_member(id,"aes_ctx",	0X368,	0x60000400,	get_struc_id("AES_CTX"),	244);
	mid = add_struc_member(id,"iv",	0X45C,	0x000400,	-1,	16);
	mid = add_struc_member(id,"field_46C",	0X46C,	0x20000400,	-1,	4);
	
	id = get_struc_id("SHA_CTX");
	mid = add_struc_member(id,"f",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"f_pad",	0X4,	0x000400,	-1,	4);
	mid = add_struc_member(id,"count",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"buf",	0X10,	0x000400,	-1,	64);
	mid = add_struc_member(id,"state",	0X50,	0x20000400,	-1,	32);
	return id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        begin_type_updating(UTP_STRUCT);
	id = Structures_0(id);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	set_cmt	(0,	"File format: \\x7FELF",	0);
	update_extra_cmt		(0,	E_PREV + 0,	"; File Name   : wm240_0801_v10.00.06.35_20180821-dji_verify.elf");
	update_extra_cmt		(0,	E_PREV + 1,	"; Format      : ELF for ARM (Shared object)");
	update_extra_cmt		(0,	E_PREV + 2,	"; Interpreter '/system/bin/linker'");
	update_extra_cmt		(0,	E_PREV + 3,	"; Needed Library 'libc.so'");
	update_extra_cmt		(0,	E_PREV + 4,	"; Needed Library 'libstdc++.so'");
	update_extra_cmt		(0,	E_PREV + 5,	"; Needed Library 'libm.so'");
	update_extra_cmt		(0,	E_PREV + 6,	"; ");
	update_extra_cmt		(0,	E_PREV + 7,	"; EABI version: 5");
	update_extra_cmt		(0,	E_PREV + 8,	"; ");
	update_extra_cmt		(0,	E_PREV + 9,	"; Application type:  Executable 32bit");
	create_dword	(x=0);
	op_hex		(x,	0);
	set_cmt	(0X4,	"File class: 32-bit",	0);
	create_byte	(x=0X4);
	op_hex		(x,	0);
	set_cmt	(0X5,	"Data encoding: little-endian",	0);
	create_byte	(x=0X5);
	op_hex		(x,	0);
	set_cmt	(0X6,	"File version",	0);
	create_byte	(x=0X6);
	op_hex		(x,	0);
	set_cmt	(0X7,	"OS/ABI: UNIX System V ABI",	0);
	create_byte	(x=0X7);
	op_hex		(x,	0);
	set_cmt	(0X8,	"ABI Version",	0);
	create_byte	(x=0X8);
	op_hex		(x,	0);
	set_cmt	(0X9,	"Padding",	0);
	create_byte	(x=0X9);
	make_array	(x,	0X7);
	op_hex		(x,	0);
	set_cmt	(0X10,	"File type: Shared object",	0);
	create_word	(x=0X10);
	op_hex		(x,	0);
	set_cmt	(0X12,	"Machine: ARM",	0);
	create_word	(x=0X12);
	op_hex		(x,	0);
	set_cmt	(0X14,	"File version",	0);
	create_dword	(x=0X14);
	op_hex		(x,	0);
	set_cmt	(0X18,	"Entry point",	0);
	create_dword	(x=0X18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X1C,	"PHT file offset",	0);
	create_dword	(x=0X1C);
	op_hex		(x,	0);
	set_cmt	(0X20,	"SHT file offset",	0);
	create_dword	(x=0X20);
	op_hex		(x,	0);
	set_cmt	(0X24,	"Processor-specific flags",	0);
	create_dword	(x=0X24);
	op_hex		(x,	0);
	set_cmt	(0X28,	"ELF header size",	0);
	create_word	(x=0X28);
	op_hex		(x,	0);
	set_cmt	(0X2A,	"PHT entry size",	0);
	create_word	(x=0X2A);
	op_hex		(x,	0);
	set_cmt	(0X2C,	"Number of entries in PHT",	0);
	create_word	(x=0X2C);
	op_hex		(x,	0);
	set_cmt	(0X2E,	"SHT entry size",	0);
	create_word	(x=0X2E);
	op_hex		(x,	0);
	set_cmt	(0X30,	"Number of entries in SHT",	0);
	create_word	(x=0X30);
	op_hex		(x,	0);
	set_cmt	(0X32,	"SHT entry index for string table",	0);
	create_word	(x=0X32);
	op_hex		(x,	0);
	set_cmt	(0X34,	"Type: PHDR",	0);
	update_extra_cmt		(0X34,	E_PREV + 0,	"; ELF32 Program Header");
	update_extra_cmt		(0X34,	E_PREV + 1,	"; PHT Entry 0");
	create_dword	(x=0X34);
	op_hex		(x,	0);
	set_cmt	(0X38,	"File offset",	0);
	create_dword	(x=0X38);
	op_hex		(x,	0);
	set_cmt	(0X3C,	"Virtual address",	0);
	create_dword	(x=0X3C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X40,	"Physical address",	0);
	create_dword	(x=0X40);
	op_hex		(x,	0);
	set_cmt	(0X44,	"Size in file image",	0);
	create_dword	(x=0X44);
	op_hex		(x,	0);
	set_cmt	(0X48,	"Size in memory image",	0);
	create_dword	(x=0X48);
	op_hex		(x,	0);
	set_cmt	(0X4C,	"Flags",	0);
	create_dword	(x=0X4C);
	op_hex		(x,	0);
	set_cmt	(0X50,	"Alignment",	0);
	create_dword	(x=0X50);
	op_hex		(x,	0);
	set_cmt	(0X54,	"Type: INTERP",	0);
	update_extra_cmt		(0X54,	E_PREV + 0,	"; PHT Entry 1");
	create_dword	(x=0X54);
	op_hex		(x,	0);
	set_cmt	(0X58,	"File offset",	0);
	create_dword	(x=0X58);
	op_hex		(x,	0);
	set_cmt	(0X5C,	"Virtual address",	0);
	create_dword	(x=0X5C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X60,	"Physical address",	0);
	create_dword	(x=0X60);
	op_hex		(x,	0);
	set_cmt	(0X64,	"Size in file image",	0);
	create_dword	(x=0X64);
	op_hex		(x,	0);
	set_cmt	(0X68,	"Size in memory image",	0);
	create_dword	(x=0X68);
	op_hex		(x,	0);
	set_cmt	(0X6C,	"Flags",	0);
	create_dword	(x=0X6C);
	op_hex		(x,	0);
	set_cmt	(0X70,	"Alignment",	0);
	create_dword	(x=0X70);
	op_hex		(x,	0);
	set_cmt	(0X74,	"Type: LOAD",	0);
	update_extra_cmt		(0X74,	E_PREV + 0,	"; PHT Entry 2");
	create_dword	(x=0X74);
	op_hex		(x,	0);
	set_cmt	(0X78,	"File offset",	0);
	create_dword	(x=0X78);
	op_hex		(x,	0);
	set_cmt	(0X7C,	"Virtual address",	0);
	create_dword	(0X7C);
	set_cmt	(0X80,	"Physical address",	0);
	create_dword	(x=0X80);
	op_hex		(x,	0);
	set_cmt	(0X84,	"Size in file image",	0);
	create_dword	(x=0X84);
	op_hex		(x,	0);
	set_cmt	(0X88,	"Size in memory image",	0);
	create_dword	(x=0X88);
	op_hex		(x,	0);
	set_cmt	(0X8C,	"Flags",	0);
	create_dword	(x=0X8C);
	op_hex		(x,	0);
	set_cmt	(0X90,	"Alignment",	0);
	create_dword	(x=0X90);
	op_hex		(x,	0);
	set_cmt	(0X94,	"Type: LOAD",	0);
	update_extra_cmt		(0X94,	E_PREV + 0,	"; PHT Entry 3");
	create_dword	(x=0X94);
	op_hex		(x,	0);
	set_cmt	(0X98,	"File offset",	0);
	create_dword	(x=0X98);
	op_hex		(x,	0);
	set_cmt	(0X9C,	"Virtual address",	0);
	create_dword	(x=0X9C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA0,	"Physical address",	0);
	create_dword	(x=0XA0);
	op_hex		(x,	0);
	set_cmt	(0XA4,	"Size in file image",	0);
	create_dword	(x=0XA4);
	op_hex		(x,	0);
	set_cmt	(0XA8,	"Size in memory image",	0);
	create_dword	(x=0XA8);
	op_hex		(x,	0);
	set_cmt	(0XAC,	"Flags",	0);
	create_dword	(x=0XAC);
	op_hex		(x,	0);
	set_cmt	(0XB0,	"Alignment",	0);
	create_dword	(x=0XB0);
	op_hex		(x,	0);
	set_cmt	(0XB4,	"Type: DYNAMIC",	0);
	update_extra_cmt		(0XB4,	E_PREV + 0,	"; PHT Entry 4");
	create_dword	(x=0XB4);
	op_hex		(x,	0);
	set_cmt	(0XB8,	"File offset",	0);
	create_dword	(x=0XB8);
	op_hex		(x,	0);
	set_cmt	(0XBC,	"Virtual address",	0);
	create_dword	(x=0XBC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XC0,	"Physical address",	0);
	create_dword	(x=0XC0);
	op_hex		(x,	0);
	set_cmt	(0XC4,	"Size in file image",	0);
	create_dword	(x=0XC4);
	op_hex		(x,	0);
	set_cmt	(0XC8,	"Size in memory image",	0);
	create_dword	(x=0XC8);
	op_hex		(x,	0);
	set_cmt	(0XCC,	"Flags",	0);
	create_dword	(x=0XCC);
	op_hex		(x,	0);
	set_cmt	(0XD0,	"Alignment",	0);
	create_dword	(x=0XD0);
	op_hex		(x,	0);
	set_cmt	(0XD4,	"Type: STACK",	0);
	update_extra_cmt		(0XD4,	E_PREV + 0,	"; PHT Entry 5");
	create_dword	(x=0XD4);
	op_hex		(x,	0);
	set_cmt	(0XD8,	"File offset",	0);
	create_dword	(x=0XD8);
	op_hex		(x,	0);
	set_cmt	(0XDC,	"Virtual address",	0);
	create_dword	(0XDC);
	set_cmt	(0XE0,	"Physical address",	0);
	create_dword	(x=0XE0);
	op_hex		(x,	0);
	set_cmt	(0XE4,	"Size in file image",	0);
	create_dword	(x=0XE4);
	op_hex		(x,	0);
	set_cmt	(0XE8,	"Size in memory image",	0);
	create_dword	(x=0XE8);
	op_hex		(x,	0);
	set_cmt	(0XEC,	"Flags",	0);
	create_dword	(x=0XEC);
	op_hex		(x,	0);
	set_cmt	(0XF0,	"Alignment",	0);
	create_dword	(x=0XF0);
	op_hex		(x,	0);
	set_cmt	(0XF4,	"Type: EXIDX",	0);
	update_extra_cmt		(0XF4,	E_PREV + 0,	"; PHT Entry 6");
	create_dword	(x=0XF4);
	op_hex		(x,	0);
	set_cmt	(0XF8,	"File offset",	0);
	create_dword	(x=0XF8);
	op_hex		(x,	0);
	set_cmt	(0XFC,	"Virtual address",	0);
	create_dword	(x=0XFC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X100,	"Physical address",	0);
	create_dword	(x=0X100);
	op_hex		(x,	0);
	set_cmt	(0X104,	"Size in file image",	0);
	create_dword	(x=0X104);
	op_hex		(x,	0);
	set_cmt	(0X108,	"Size in memory image",	0);
	create_dword	(x=0X108);
	op_hex		(x,	0);
	set_cmt	(0X10C,	"Flags",	0);
	create_dword	(x=0X10C);
	op_hex		(x,	0);
	set_cmt	(0X110,	"Alignment",	0);
	create_dword	(x=0X110);
	op_hex		(x,	0);
	set_cmt	(0X114,	"Type: RO-AFTER",	0);
	update_extra_cmt		(0X114,	E_PREV + 0,	"; PHT Entry 7");
	create_dword	(x=0X114);
	op_hex		(x,	0);
	set_cmt	(0X118,	"File offset",	0);
	create_dword	(x=0X118);
	op_hex		(x,	0);
	set_cmt	(0X11C,	"Virtual address",	0);
	create_dword	(x=0X11C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X120,	"Physical address",	0);
	create_dword	(x=0X120);
	op_hex		(x,	0);
	set_cmt	(0X124,	"Size in file image",	0);
	create_dword	(x=0X124);
	op_hex		(x,	0);
	set_cmt	(0X128,	"Size in memory image",	0);
	create_dword	(x=0X128);
	op_hex		(x,	0);
	set_cmt	(0X12C,	"Flags",	0);
	create_dword	(x=0X12C);
	op_hex		(x,	0);
	set_cmt	(0X130,	"Alignment",	0);
	create_dword	(x=0X130);
	op_hex		(x,	0);
	create_strlit	(0X134,	0X147);
	set_name	(0X134,	"aSystemBinLinke");
	create_byte	(0X147);
	update_extra_cmt		(0X148,	E_PREV + 0,	"; ELF Symbol Table");
	MakeStruct	(0X148,	"Elf32_Sym");
	MakeStruct	(0X158,	"Elf32_Sym");
	MakeStruct	(0X168,	"Elf32_Sym");
	MakeStruct	(0X178,	"Elf32_Sym");
	MakeStruct	(0X188,	"Elf32_Sym");
	MakeStruct	(0X198,	"Elf32_Sym");
	MakeStruct	(0X1A8,	"Elf32_Sym");
	MakeStruct	(0X1B8,	"Elf32_Sym");
	MakeStruct	(0X1C8,	"Elf32_Sym");
	MakeStruct	(0X1D8,	"Elf32_Sym");
	MakeStruct	(0X1E8,	"Elf32_Sym");
	MakeStruct	(0X1F8,	"Elf32_Sym");
	MakeStruct	(0X208,	"Elf32_Sym");
	MakeStruct	(0X218,	"Elf32_Sym");
	MakeStruct	(0X228,	"Elf32_Sym");
	MakeStruct	(0X238,	"Elf32_Sym");
	MakeStruct	(0X248,	"Elf32_Sym");
	MakeStruct	(0X258,	"Elf32_Sym");
	MakeStruct	(0X268,	"Elf32_Sym");
	MakeStruct	(0X278,	"Elf32_Sym");
	MakeStruct	(0X288,	"Elf32_Sym");
	MakeStruct	(0X298,	"Elf32_Sym");
	MakeStruct	(0X2A8,	"Elf32_Sym");
	MakeStruct	(0X2B8,	"Elf32_Sym");
	MakeStruct	(0X2C8,	"Elf32_Sym");
	MakeStruct	(0X2D8,	"Elf32_Sym");
	MakeStruct	(0X2E8,	"Elf32_Sym");
	MakeStruct	(0X2F8,	"Elf32_Sym");
	MakeStruct	(0X308,	"Elf32_Sym");
	MakeStruct	(0X318,	"Elf32_Sym");
	MakeStruct	(0X328,	"Elf32_Sym");
	MakeStruct	(0X338,	"Elf32_Sym");
	MakeStruct	(0X348,	"Elf32_Sym");
	MakeStruct	(0X358,	"Elf32_Sym");
	MakeStruct	(0X368,	"Elf32_Sym");
	MakeStruct	(0X378,	"Elf32_Sym");
	MakeStruct	(0X388,	"Elf32_Sym");
	MakeStruct	(0X398,	"Elf32_Sym");
	MakeStruct	(0X3A8,	"Elf32_Sym");
	MakeStruct	(0X3B8,	"Elf32_Sym");
	MakeStruct	(0X3C8,	"Elf32_Sym");
	MakeStruct	(0X3D8,	"Elf32_Sym");
	update_extra_cmt		(0X3E8,	E_PREV + 0,	"; ELF String Table");
	create_byte	(0X3E8);
	create_strlit	(0X3E9,	0X3F5);
	set_name	(0X3E9,	"aLibcInit");
	create_strlit	(0X3F5,	0X402);
	set_name	(0X3F5,	"aCxaAtexit");
	create_strlit	(0X402,	0X40E);
	set_name	(0X402,	"aGetoptLong");
	create_strlit	(0X40E,	0X415);
	set_name	(0X40E,	"aPrintf");
	create_strlit	(0X415,	0X41D);
	set_name	(0X415,	"aFprintf");
	create_strlit	(0X41D,	0X422);
	set_name	(0X41D,	"aExit");
	create_strlit	(0X422,	0X428);
	set_name	(0X422,	"aFputs");
	create_strlit	(0X428,	0X42F);
	set_name	(0X428,	"aOptarg");
	create_strlit	(0X42F,	0X434);
	set_name	(0X42F,	"aSf");
	create_strlit	(0X434,	0X43B);
	set_name	(0X434,	"aOptind");
	create_strlit	(0X43B,	0X452);
	set_name	(0X43B,	"aAeabiUnwindCpp");
	create_strlit	(0X452,	0X458);
	set_name	(0X452,	"aFopen");
	create_strlit	(0X458,	0X45E);
	set_name	(0X458,	"aFseek");
	create_strlit	(0X45E,	0X464);
	set_name	(0X45E,	"aFtell");
	create_strlit	(0X464,	0X46B);
	set_name	(0X464,	"aFclose");
	create_strlit	(0X46B,	0X472);
	set_name	(0X46B,	"aFwrite");
	create_strlit	(0X472,	0X478);
	set_name	(0X472,	"aFread");
	create_strlit	(0X478,	0X47D);
	set_name	(0X478,	"aPuts");
	create_strlit	(0X47D,	0X484);
	set_name	(0X47D,	"aMalloc");
	create_strlit	(0X484,	0X489);
	set_name	(0X484,	"aTime");
	create_strlit	(0X489,	0X493);
	set_name	(0X489,	"aLocaltime");
	create_strlit	(0X493,	0X4A1);
	set_name	(0X493,	"aSprintfChk");
	create_strlit	(0X4A1,	0X4A8);
	set_name	(0X4A1,	"aSscanf");
	create_strlit	(0X4A8,	0X4B9);
	set_name	(0X4A8,	"aStackChkFail");
	create_strlit	(0X4B9,	0X4CB);
	set_name	(0X4B9,	"aStackChkGuard");
	create_strlit	(0X4CB,	0X4D3);
	set_name	(0X4CB,	"aStrtoll");
	create_strlit	(0X4D3,	0X4EA);
	set_name	(0X4D3,	"aAeabiUnwindCpp_0");
	create_strlit	(0X4EA,	0X4F2);
	set_name	(0X4EA,	"aSprintf");
	create_strlit	(0X4F2,	0X4FA);
	set_name	(0X4F2,	"aPutchar");
	create_strlit	(0X4FA,	0X501);
	set_name	(0X4FA,	"aStrlen");
	create_strlit	(0X501,	0X508);
	set_name	(0X501,	"aStrcmp");
	create_strlit	(0X508,	0X50F);
	set_name	(0X508,	"aMemset");
	create_strlit	(0X50F,	0X517);
	set_name	(0X50F,	"aStrncpy");
	create_strlit	(0X517,	0X51E);
	set_name	(0X517,	"aMemcpy");
	create_strlit	(0X51E,	0X525);
	set_name	(0X51E,	"aMemcmp");
	create_strlit	(0X525,	0X52A);
	set_name	(0X525,	"aFree");
	create_strlit	(0X52A,	0X537);
	set_name	(0X52A,	"aMemcpyChk");
	create_strlit	(0X537,	0X544);
	set_name	(0X537,	"aAeabiLlsr");
	create_strlit	(0X544,	0X54B);
	set_name	(0X544,	"aEdata");
	create_strlit	(0X54B,	0X557);
	set_name	(0X54B,	"aBssStart");
	create_strlit	(0X557,	0X55C);
	set_name	(0X557,	"aEnd");
	create_strlit	(0X55C,	0X564);
	set_name	(0X55C,	"aLibcSo");
	create_strlit	(0X564,	0X571);
	set_name	(0X564,	"aLibstdcSo");
	create_strlit	(0X571,	0X579);
	set_name	(0X571,	"aLibmSo");
	create_byte	(0X579);
	make_array	(0X579,	0X3);
	update_extra_cmt		(0X57C,	E_PREV + 0,	"; ELF Hash Table");
	create_dword	(x=0X57C);
	op_hex		(x,	0);
	set_name	(0X57C,	"elf_hash_nbucket");
	create_dword	(x=0X580);
	op_hex		(x,	0);
	set_name	(0X580,	"elf_hash_nchain");
	create_dword	(x=0X584);
	make_array	(x,	0X25);
	op_hex		(x,	0);
	set_name	(0X584,	"elf_hash_bucket");
	create_dword	(x=0X618);
	make_array	(x,	0X2A);
	op_hex		(x,	0);
	set_name	(0X618,	"elf_hash_chain");
	set_cmt	(0X6C0,	"R_ARM_RELATIVE",	0);
	update_extra_cmt		(0X6C0,	E_PREV + 0,	"; ELF REL Relocation Table");
	MakeStruct	(0X6C0,	"Elf32_Rel");
	set_cmt	(0X6C8,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X6C8,	"Elf32_Rel");
	set_cmt	(0X6D0,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X6D0,	"Elf32_Rel");
	set_cmt	(0X6D8,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X6D8,	"Elf32_Rel");
	set_cmt	(0X6E0,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X6E0,	"Elf32_Rel");
	set_cmt	(0X6E8,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X6E8,	"Elf32_Rel");
	set_cmt	(0X6F0,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X6F0,	"Elf32_Rel");
	set_cmt	(0X6F8,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X6F8,	"Elf32_Rel");
	set_cmt	(0X700,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X700,	"Elf32_Rel");
	set_cmt	(0X708,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X708,	"Elf32_Rel");
	set_cmt	(0X710,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X710,	"Elf32_Rel");
	set_cmt	(0X718,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X718,	"Elf32_Rel");
	set_cmt	(0X720,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X720,	"Elf32_Rel");
	set_cmt	(0X728,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X728,	"Elf32_Rel");
	set_cmt	(0X730,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X730,	"Elf32_Rel");
	set_cmt	(0X738,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X738,	"Elf32_Rel");
	set_cmt	(0X740,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X740,	"Elf32_Rel");
	set_cmt	(0X748,	"R_ARM_GLOB_DAT optarg",	0);
	MakeStruct	(0X748,	"Elf32_Rel");
	set_cmt	(0X750,	"R_ARM_GLOB_DAT __sF",	0);
	MakeStruct	(0X750,	"Elf32_Rel");
	set_cmt	(0X758,	"R_ARM_GLOB_DAT optind",	0);
	MakeStruct	(0X758,	"Elf32_Rel");
	set_cmt	(0X760,	"R_ARM_GLOB_DAT __stack_chk_guard",	0);
	MakeStruct	(0X760,	"Elf32_Rel");
	set_cmt	(0X768,	"R_ARM_JUMP_SLOT __libc_init",	0);
	update_extra_cmt		(0X768,	E_PREV + 0,	"; ELF JMPREL Relocation Table");
	MakeStruct	(0X768,	"Elf32_Rel");
	set_cmt	(0X770,	"R_ARM_JUMP_SLOT __cxa_atexit",	0);
	MakeStruct	(0X770,	"Elf32_Rel");
	set_cmt	(0X778,	"R_ARM_JUMP_SLOT getopt_long",	0);
	MakeStruct	(0X778,	"Elf32_Rel");
	set_cmt	(0X780,	"R_ARM_JUMP_SLOT printf",	0);
	MakeStruct	(0X780,	"Elf32_Rel");
	set_cmt	(0X788,	"R_ARM_JUMP_SLOT fprintf",	0);
	MakeStruct	(0X788,	"Elf32_Rel");
	set_cmt	(0X790,	"R_ARM_JUMP_SLOT exit",	0);
	MakeStruct	(0X790,	"Elf32_Rel");
	set_cmt	(0X798,	"R_ARM_JUMP_SLOT fputs",	0);
	MakeStruct	(0X798,	"Elf32_Rel");
	set_cmt	(0X7A0,	"R_ARM_JUMP_SLOT strcmp",	0);
	MakeStruct	(0X7A0,	"Elf32_Rel");
	set_cmt	(0X7A8,	"R_ARM_JUMP_SLOT __stack_chk_fail",	0);
	MakeStruct	(0X7A8,	"Elf32_Rel");
	set_cmt	(0X7B0,	"R_ARM_JUMP_SLOT memset",	0);
	MakeStruct	(0X7B0,	"Elf32_Rel");
	set_cmt	(0X7B8,	"R_ARM_JUMP_SLOT strncpy",	0);
	MakeStruct	(0X7B8,	"Elf32_Rel");
	set_cmt	(0X7C0,	"R_ARM_JUMP_SLOT memcpy",	0);
	MakeStruct	(0X7C0,	"Elf32_Rel");
	set_cmt	(0X7C8,	"R_ARM_JUMP_SLOT memcmp",	0);
	MakeStruct	(0X7C8,	"Elf32_Rel");
	set_cmt	(0X7D0,	"R_ARM_JUMP_SLOT fopen",	0);
	MakeStruct	(0X7D0,	"Elf32_Rel");
	set_cmt	(0X7D8,	"R_ARM_JUMP_SLOT malloc",	0);
	MakeStruct	(0X7D8,	"Elf32_Rel");
	set_cmt	(0X7E0,	"R_ARM_JUMP_SLOT fread",	0);
	MakeStruct	(0X7E0,	"Elf32_Rel");
	set_cmt	(0X7E8,	"R_ARM_JUMP_SLOT fwrite",	0);
	MakeStruct	(0X7E8,	"Elf32_Rel");
	set_cmt	(0X7F0,	"R_ARM_JUMP_SLOT fclose",	0);
	MakeStruct	(0X7F0,	"Elf32_Rel");
	set_cmt	(0X7F8,	"R_ARM_JUMP_SLOT free",	0);
	MakeStruct	(0X7F8,	"Elf32_Rel");
	set_cmt	(0X800,	"R_ARM_JUMP_SLOT __aeabi_llsr",	0);
	MakeStruct	(0X800,	"Elf32_Rel");
	create_insn	(0X808);
	create_dword	(x=0X818);
	op_plain_offset	(x,	0,	0X818);
	op_plain_offset	(x,	128,	0X818);
	create_insn	(x=0X81C);
	op_hex		(x,	1);
	set_name	(0X81C,	"__libc_init");
	create_insn	(x=0X820);
	op_hex		(x,	1);
	create_insn	(x=0X824);
	op_plain_offset	(x,	1,	0X7824);
	op_plain_offset	(x,	129,	0X7824);
	create_insn	(x=0X828);
	op_hex		(x,	1);
	set_name	(0X828,	"__cxa_atexit");
	create_insn	(x=0X82C);
	op_hex		(x,	1);
	create_insn	(x=0X830);
	op_plain_offset	(x,	1,	0X7830);
	op_plain_offset	(x,	129,	0X7830);
	create_insn	(x=0X834);
	op_hex		(x,	1);
	set_name	(0X834,	"getopt_long");
	create_insn	(x=0X838);
	op_hex		(x,	1);
	create_insn	(x=0X83C);
	op_plain_offset	(x,	1,	0X783C);
	op_plain_offset	(x,	129,	0X783C);
	create_insn	(x=0X840);
	op_hex		(x,	1);
	set_name	(0X840,	"printf");
	create_insn	(x=0X844);
	op_hex		(x,	1);
	create_insn	(x=0X848);
	op_plain_offset	(x,	1,	0X7848);
	op_plain_offset	(x,	129,	0X7848);
	create_insn	(x=0X84C);
	op_hex		(x,	1);
	set_name	(0X84C,	"fprintf");
	create_insn	(x=0X850);
	op_hex		(x,	1);
	create_insn	(x=0X854);
	op_plain_offset	(x,	1,	0X7854);
	op_plain_offset	(x,	129,	0X7854);
	create_insn	(x=0X858);
	op_hex		(x,	1);
	set_name	(0X858,	"exit");
	create_insn	(x=0X85C);
	op_hex		(x,	1);
	create_insn	(x=0X860);
	op_plain_offset	(x,	1,	0X7860);
	op_plain_offset	(x,	129,	0X7860);
	create_insn	(x=0X864);
	op_hex		(x,	1);
	set_name	(0X864,	"fputs");
	create_insn	(x=0X868);
	op_hex		(x,	1);
	create_insn	(x=0X86C);
	op_plain_offset	(x,	1,	0X786C);
	op_plain_offset	(x,	129,	0X786C);
	create_insn	(x=0X870);
	op_hex		(x,	1);
	set_name	(0X870,	"strcmp");
	create_insn	(x=0X874);
	op_hex		(x,	1);
	create_insn	(x=0X878);
	op_plain_offset	(x,	1,	0X7878);
	op_plain_offset	(x,	129,	0X7878);
	create_insn	(x=0X87C);
	op_hex		(x,	1);
	set_name	(0X87C,	"__stack_chk_fail");
	create_insn	(x=0X880);
	op_hex		(x,	1);
	create_insn	(x=0X884);
	op_plain_offset	(x,	1,	0X7884);
	op_plain_offset	(x,	129,	0X7884);
	create_insn	(x=0X888);
	op_hex		(x,	1);
	set_name	(0X888,	"memset");
	create_insn	(x=0X88C);
	op_hex		(x,	1);
	create_insn	(x=0X890);
	op_plain_offset	(x,	1,	0X7890);
	op_plain_offset	(x,	129,	0X7890);
	create_insn	(x=0X894);
	op_hex		(x,	1);
	set_name	(0X894,	"strncpy");
	create_insn	(x=0X898);
	op_hex		(x,	1);
	create_insn	(x=0X89C);
	op_plain_offset	(x,	1,	0X789C);
	op_plain_offset	(x,	129,	0X789C);
	create_insn	(x=0X8A0);
	op_hex		(x,	1);
	set_name	(0X8A0,	"memcpy");
	create_insn	(x=0X8A4);
	op_hex		(x,	1);
	create_insn	(x=0X8A8);
	op_plain_offset	(x,	1,	0X78A8);
	op_plain_offset	(x,	129,	0X78A8);
	create_insn	(x=0X8AC);
	op_hex		(x,	1);
	set_name	(0X8AC,	"memcmp");
	create_insn	(x=0X8B0);
	op_hex		(x,	1);
	create_insn	(x=0X8B4);
	op_plain_offset	(x,	1,	0X78B4);
	op_plain_offset	(x,	129,	0X78B4);
	create_insn	(x=0X8B8);
	op_hex		(x,	1);
	set_name	(0X8B8,	"fopen");
	create_insn	(x=0X8BC);
	op_hex		(x,	1);
	create_insn	(x=0X8C0);
	op_plain_offset	(x,	1,	0X78C0);
	op_plain_offset	(x,	129,	0X78C0);
	create_insn	(x=0X8C4);
	op_hex		(x,	1);
	set_name	(0X8C4,	"malloc");
	create_insn	(x=0X8C8);
	op_hex		(x,	1);
	create_insn	(x=0X8CC);
	op_plain_offset	(x,	1,	0X78CC);
	op_plain_offset	(x,	129,	0X78CC);
	create_insn	(x=0X8D0);
	op_hex		(x,	1);
	set_name	(0X8D0,	"fread");
	create_insn	(x=0X8D4);
	op_hex		(x,	1);
	create_insn	(x=0X8D8);
	op_plain_offset	(x,	1,	0X78D8);
	op_plain_offset	(x,	129,	0X78D8);
	create_insn	(x=0X8DC);
	op_hex		(x,	1);
	set_name	(0X8DC,	"fwrite");
	create_insn	(x=0X8E0);
	op_hex		(x,	1);
	create_insn	(x=0X8E4);
	op_plain_offset	(x,	1,	0X78E4);
	op_plain_offset	(x,	129,	0X78E4);
	create_insn	(x=0X8E8);
	op_hex		(x,	1);
	set_name	(0X8E8,	"fclose");
	create_insn	(x=0X8EC);
	op_hex		(x,	1);
	create_insn	(x=0X8F0);
	op_plain_offset	(x,	1,	0X78F0);
	op_plain_offset	(x,	129,	0X78F0);
	create_insn	(x=0X8F4);
	op_hex		(x,	1);
	set_name	(0X8F4,	"free");
	create_insn	(x=0X8F8);
	op_hex		(x,	1);
	create_insn	(x=0X8FC);
	op_plain_offset	(x,	1,	0X78FC);
	op_plain_offset	(x,	129,	0X78FC);
	create_insn	(x=0X900);
	op_hex		(x,	1);
	set_name	(0X900,	"__aeabi_llsr");
	create_insn	(x=0X904);
	op_hex		(x,	1);
	create_insn	(x=0X908);
	op_plain_offset	(x,	1,	0X7908);
	op_plain_offset	(x,	129,	0X7908);
	make_array	(0X90C,	0X4);
	create_insn	(0X910);
	set_name	(0X910,	"start");
	create_insn	(x=0X92C);
	op_stkvar	(x,	1);
	create_insn	(x=0X938);
	op_stkvar	(x,	1);
	create_insn	(x=0X944);
	op_stkvar	(x,	1);
	create_insn	(x=0X950);
	op_stkvar	(x,	1);
	create_insn	(x=0X954);
	op_stkvar	(x,	1);
	set_cmt	(0X958,	"raw_args",	0);
	create_insn	(x=0X958);
	op_stkvar	(x,	1);
	set_cmt	(0X95C,	"onexit",	0);
	set_cmt	(0X968,	"slingshot",	0);
	set_cmt	(0X96C,	"structors",	0);
	create_dword	(x=0X974);
	op_plain_offset	(x,	0,	0X928);
	op_plain_offset	(x,	128,	0X928);
	create_dword	(x=0X978);
	op_plain_offset	(x,	0,	0X7FA4);
	op_plain_offset	(x,	128,	0X7FA4);
	create_dword	(x=0X97C);
	op_plain_offset	(x,	0,	0X7FA4);
	op_plain_offset	(x,	128,	0X7FA4);
	create_dword	(x=0X980);
	op_plain_offset	(x,	0,	0X7FA4);
	op_plain_offset	(x,	128,	0X7FA4);
	create_dword	(x=0X984);
	op_plain_offset	(x,	0,	0X7FA4);
	op_plain_offset	(x,	128,	0X7FA4);
	create_insn	(0X988);
	create_insn	(x=0X994);
	op_stkvar	(x,	1);
	create_insn	(x=0X998);
	op_stkvar	(x,	1);
	create_dword	(x=0X9C0);
	op_plain_offset	(x,	0,	0X9AC);
	op_plain_offset	(x,	128,	0X9AC);
	create_insn	(0X9C4);
	set_name	(0X9C4,	"main");
	create_insn	(x=0X9E6);
	op_stkvar	(x,	1);
	create_insn	(0XA0A);
	create_insn	(0XA14);
	create_insn	(0XA22);
	create_insn	(0XA2A);
	create_insn	(0XA32);
	create_insn	(0XA3A);
	create_insn	(0XA44);
	set_cmt	(0XA4C,	"FILE *",	0);
	set_cmt	(0XA5C,	"int",	0);
	create_insn	(0XA64);
	set_cmt	(0XA76,	"FILE *",	0);
	create_insn	(0XA82);
	set_cmt	(0XA9C,	"FILE *",	0);
	create_insn	(0XAA8);
	set_cmt	(0XAAC,	"chunk_str",	0);
	create_insn	(0XAC2);
	set_cmt	(0XACC,	"ofname",	0);
	create_insn	(x=0XACC);
	op_stkvar	(x,	1);
	set_cmt	(0XACE,	"hfname",	0);
	set_cmt	(0XAD0,	"ifname",	0);
	set_cmt	(0XAD2,	"name",	0);
	set_cmt	(0XAD4,	"buffer_len",	0);
	create_insn	(0XAEE);
	make_array	(0XAFE,	0X2);
	create_dword	(x=0XB00);
	op_plain_offset	(x,	0,	0X9DE);
	op_plain_offset	(x,	128,	0X9DE);
	create_dword	(x=0XB04);
	op_plain_offset	(x,	0,	0X9E0);
	op_plain_offset	(x,	128,	0X9E0);
	create_dword	(x=0XB08);
	op_plain_offset	(x,	0,	0X9E2);
	op_plain_offset	(x,	128,	0X9E2);
	create_dword	(x=0XB0C);
	op_plain_offset	(x,	0,	0X9E4);
	op_plain_offset	(x,	128,	0X9E4);
	create_dword	(x=0XB10);
	op_plain_offset	(x,	0,	0X7FA4);
	op_plain_offset	(x,	128,	0X7FA4);
	create_dword	(x=0XB14);
	op_plain_offset	(x,	0,	0XA1C);
	op_plain_offset	(x,	128,	0XA1C);
	create_dword	(x=0XB18);
	op_plain_offset	(x,	0,	0XA32);
	op_plain_offset	(x,	128,	0XA32);
	create_dword	(x=0XB1C);
	op_plain_offset	(x,	0,	0XA3A);
	op_plain_offset	(x,	128,	0XA3A);
	create_dword	(x=0XB20);
	op_plain_offset	(x,	0,	0XA42);
	op_plain_offset	(x,	128,	0XA42);
	create_dword	(x=0XB24);
	op_plain_offset	(x,	0,	0X7FA4);
	op_plain_offset	(x,	128,	0X7FA4);
	create_dword	(x=0XB28);
	op_plain_offset	(x,	0,	0XA4E);
	op_plain_offset	(x,	128,	0XA4E);
	create_dword	(x=0XB2C);
	op_plain_offset	(x,	0,	0XA58);
	op_plain_offset	(x,	128,	0XA58);
	create_dword	(x=0XB30);
	op_plain_offset	(x,	0,	0X7FA4);
	op_plain_offset	(x,	128,	0X7FA4);
	create_dword	(x=0XB34);
	op_plain_offset	(x,	0,	0XA78);
	op_plain_offset	(x,	128,	0XA78);
	create_dword	(x=0XB38);
	op_plain_offset	(x,	0,	0XA82);
	op_plain_offset	(x,	128,	0XA82);
	create_dword	(x=0XB3C);
	op_plain_offset	(x,	0,	0XA8C);
	op_plain_offset	(x,	128,	0XA8C);
	create_dword	(x=0XB40);
	op_plain_offset	(x,	0,	0XA92);
	op_plain_offset	(x,	128,	0XA92);
	create_dword	(x=0XB44);
	op_plain_offset	(x,	0,	0XA9E);
	op_plain_offset	(x,	128,	0XA9E);
	create_dword	(x=0XB48);
	op_plain_offset	(x,	0,	0XAA8);
	op_plain_offset	(x,	128,	0XAA8);
	create_dword	(x=0XB4C);
	op_plain_offset	(x,	0,	0XAAE);
	op_plain_offset	(x,	128,	0XAAE);
	create_dword	(x=0XB50);
	op_plain_offset	(x,	0,	0XAC2);
	op_plain_offset	(x,	128,	0XAC2);
	create_dword	(x=0XB54);
	op_plain_offset	(x,	0,	0XACA);
	op_plain_offset	(x,	128,	0XACA);
	create_dword	(x=0XB58);
	op_plain_offset	(x,	0,	0XACE);
	op_plain_offset	(x,	128,	0XACE);
	create_dword	(x=0XB5C);
	op_plain_offset	(x,	0,	0XAEA);
	op_plain_offset	(x,	128,	0XAEA);
	create_dword	(x=0XB60);
	op_plain_offset	(x,	0,	0XAF6);
	op_plain_offset	(x,	128,	0XAF6);
	create_insn	(0XB64);
	set_name	(0XB64,	"chunk_id_select");
	create_insn	(x=0XB6A);
	op_stkvar	(x,	1);
	create_insn	(x=0XB70);
	op_stkvar	(x,	1);
	create_insn	(x=0XB74);
	op_stkvar	(x,	1);
	create_insn	(0XB80);
	create_insn	(0XB84);
	set_name	(0XB84,	"dji_image_verify_header");
	create_insn	(x=0XB9C);
	op_stkvar	(x,	1);
	create_insn	(x=0XBA4);
	op_stkvar	(x,	1);
	create_insn	(0XBC2);
	set_cmt	(0XBC4,	"char *",	0);
	set_cmt	(0XBC8,	"char *",	0);
	set_cmt	(0XBE4,	"a1",	0);
	create_insn	(0XBE4);
	set_cmt	(0XBE6,	"a2",	0);
	create_insn	(x=0XBE6);
	op_stkvar	(x,	1);
	set_cmt	(0XBFE,	"len",	0);
	create_insn	(0XBFE);
	set_cmt	(0XC00,	"digest",	0);
	create_insn	(x=0XC00);
	op_stkvar	(x,	1);
	set_cmt	(0XC02,	"data",	0);
	set_cmt	(0XC0A,	"hash_len",	0);
	create_insn	(x=0XC0A);
	op_stkvar	(x,	1);
	set_cmt	(0XC0C,	"key",	0);
	set_cmt	(0XC0E,	"signatr",	0);
	set_cmt	(0XC10,	"sig_len",	0);
	set_cmt	(0XC14,	"hash",	0);
	create_insn	(x=0XC14);
	op_stkvar	(x,	1);
	create_insn	(0XC2E);
	create_insn	(x=0XC34);
	op_stkvar	(x,	1);
	create_insn	(0XC40);
	make_array	(0XC46,	0X2);
	create_dword	(x=0XC48);
	op_plain_offset	(x,	0,	0XB94);
	op_plain_offset	(x,	128,	0XB94);
	create_dword	(x=0XC4C);
	op_plain_offset	(x,	0,	0X7FA4);
	op_plain_offset	(x,	128,	0X7FA4);
	create_dword	(x=0XC50);
	op_plain_offset	(x,	0,	0XBBE);
	op_plain_offset	(x,	128,	0XBBE);
	create_dword	(x=0XC54);
	op_plain_offset	(x,	0,	0XBC0);
	op_plain_offset	(x,	128,	0XBC0);
	create_dword	(x=0XC58);
	op_plain_offset	(x,	0,	0XBD8);
	op_plain_offset	(x,	128,	0XBD8);
	create_dword	(x=0XC5C);
	op_plain_offset	(x,	0,	0XBDA);
	op_plain_offset	(x,	128,	0XBDA);
	create_dword	(x=0XC60);
	op_plain_offset	(x,	0,	0XBF8);
	op_plain_offset	(x,	128,	0XBF8);
	create_dword	(x=0XC64);
	op_plain_offset	(x,	0,	0XBFA);
	op_plain_offset	(x,	128,	0XBFA);
	create_dword	(x=0XC68);
	op_plain_offset	(x,	0,	0XC24);
	op_plain_offset	(x,	128,	0XC24);
	create_dword	(x=0XC6C);
	op_plain_offset	(x,	0,	0XC26);
	op_plain_offset	(x,	128,	0XC26);
	create_insn	(0XC70);
	set_name	(0XC70,	"dji_image_decrypt_scram_key");
	create_insn	(x=0XC80);
	op_stkvar	(x,	1);
	set_cmt	(0XC88,	"void *",	0);
	set_cmt	(0XC8A,	"int",	0);
	set_cmt	(0XC8C,	"size_t",	0);
	create_insn	(x=0XC8E);
	op_stkvar	(x,	1);
	create_insn	(x=0XC90);
	op_stkvar	(x,	1);
	set_cmt	(0XC96,	"a1",	0);
	set_cmt	(0XC98,	"a2",	0);
	create_insn	(x=0XC98);
	op_stkvar	(x,	1);
	create_insn	(x=0XCB6);
	op_stkvar	(x,	1);
	set_cmt	(0XCB8,	"ctx",	0);
	create_insn	(x=0XCB8);
	op_stkvar	(x,	1);
	set_cmt	(0XCD8,	"enclen",	0);
	create_insn	(0XCD8);
	set_cmt	(0XCDA,	"aesctx",	0);
	set_cmt	(0XCDE,	"encbuf",	0);
	set_cmt	(0XCE2,	"outbuf",	0);
	create_insn	(x=0XCE2);
	op_stkvar	(x,	1);
	set_cmt	(0XCE4,	"iv",	0);
	create_insn	(x=0XCE4);
	op_stkvar	(x,	1);
	set_cmt	(0XCE6,	"a6",	0);
	create_insn	(x=0XCE6);
	op_stkvar	(x,	1);
	set_cmt	(0XCEC,	"enc_key_bits",	0);
	set_cmt	(0XCEE,	"enc_key",	0);
	create_insn	(x=0XCEE);
	op_stkvar	(x,	1);
	set_cmt	(0XCF0,	"ctx",	0);
	create_insn	(x=0XD12);
	op_stkvar	(x,	1);
	create_insn	(0XD1E);
	create_dword	(x=0XD24);
	op_plain_offset	(x,	0,	0XC7C);
	op_plain_offset	(x,	128,	0XC7C);
	create_dword	(x=0XD28);
	op_plain_offset	(x,	0,	0X7FA4);
	op_plain_offset	(x,	128,	0X7FA4);
	create_dword	(x=0XD2C);
	op_plain_offset	(x,	0,	0XCA8);
	op_plain_offset	(x,	128,	0XCA8);
	create_dword	(x=0XD30);
	op_plain_offset	(x,	0,	0XCAA);
	op_plain_offset	(x,	128,	0XCAA);
	create_dword	(x=0XD34);
	op_plain_offset	(x,	0,	0XCCC);
	op_plain_offset	(x,	128,	0XCCC);
	create_dword	(x=0XD38);
	op_plain_offset	(x,	0,	0XCCE);
	op_plain_offset	(x,	128,	0XCCE);
	create_dword	(x=0XD3C);
	op_plain_offset	(x,	0,	0XD06);
	op_plain_offset	(x,	128,	0XD06);
	create_dword	(x=0XD40);
	op_plain_offset	(x,	0,	0XD08);
	op_plain_offset	(x,	128,	0XD08);
	create_insn	(0XD44);
	set_name	(0XD44,	"dji_image_verify_init");
	set_cmt	(0XD5C,	"void *",	0);
	create_insn	(x=0XD5C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XD62,	"int",	0);
	create_insn	(0XD62);
	set_cmt	(0XD64,	"size_t",	0);
	set_cmt	(0XD6C,	"ctx",	0);
	set_cmt	(0XD74,	"char *",	0);
	set_cmt	(0XD76,	"char *",	0);
	set_cmt	(0XD78,	"size_t",	0);
	create_dword	(x=0XD84);
	op_plain_offset	(x,	0,	0XD5A);
	op_plain_offset	(x,	128,	0XD5A);
	create_dword	(x=0XD88);
	op_plain_offset	(x,	0,	0XD58);
	op_plain_offset	(x,	128,	0XD58);
	create_insn	(0XD8C);
	set_name	(0XD8C,	"dji_image_verify_update");
	create_insn	(x=0XD90);
	op_hex		(x,	1);
	create_insn	(x=0XD9E);
	op_stkvar	(x,	1);
	create_insn	(0XDB6);
	set_cmt	(0XDC0,	"ihdr",	0);
	set_cmt	(0XDC2,	"buf_len",	0);
	set_cmt	(0XDC4,	"iname",	0);
	create_insn	(0XDE0);
	set_cmt	(0XDE4,	"void *",	0);
	set_cmt	(0XDE6,	"void *",	0);
	set_cmt	(0XDE8,	"size_t",	0);
	create_insn	(0XE08);
	create_insn	(0XE16);
	create_insn	(0XE2C);
	create_insn	(x=0XE2E);
	op_hex		(x,	1);
	set_cmt	(0XE4C,	"void *",	0);
	create_insn	(0XE4C);
	set_cmt	(0XE4E,	"void *",	0);
	set_cmt	(0XE50,	"size_t",	0);
	create_insn	(0XE5E);
	create_insn	(0XE7E);
	set_cmt	(0XE8A,	"ctx",	0);
	set_cmt	(0XE8E,	"data",	0);
	set_cmt	(0XE90,	"len",	0);
	create_insn	(0XEBA);
	create_insn	(x=0XEBE);
	op_stkvar	(x,	1);
	create_insn	(x=0XED0);
	op_hex		(x,	1);
	set_cmt	(0XED4,	"int",	0);
	create_insn	(x=0XED8);
	op_hex		(x,	1);
	create_insn	(x=0XEE0);
	op_hex		(x,	1);
	create_insn	(x=0XEE6);
	op_stkvar	(x,	1);
	set_cmt	(0XEF2,	"void *",	0);
	create_insn	(x=0XEF2);
	op_stkvar	(x,	1);
	set_cmt	(0XEF4,	"size_t",	0);
	create_insn	(0XEFC);
	set_cmt	(0XEFE,	"void *",	0);
	set_cmt	(0XF00,	"void *",	0);
	set_cmt	(0XF02,	"size_t",	0);
	create_insn	(x=0XF0A);
	op_stkvar	(x,	1);
	set_cmt	(0XF0E,	"iv",	0);
	create_insn	(x=0XF0E);
	op_stkvar	(x,	1);
	set_cmt	(0XF10,	"a6",	0);
	create_insn	(x=0XF10);
	op_stkvar	(x,	1);
	set_cmt	(0XF12,	"outbuf",	0);
	set_cmt	(0XF14,	"encbuf",	0);
	set_cmt	(0XF16,	"enclen",	0);
	set_cmt	(0XF18,	"aesctx",	0);
	create_insn	(x=0XF18);
	op_stkvar	(x,	1);
	create_insn	(x=0XF1E);
	op_stkvar	(x,	1);
	create_insn	(0XF42);
	create_insn	(0XF68);
	create_insn	(0XF74);
	create_insn	(x=0XF80);
	op_stkvar	(x,	1);
	create_insn	(x=0XF82);
	op_stkvar	(x,	1);
	create_insn	(x=0XF84);
	op_stkvar	(x,	1);
	create_insn	(0XF8C);
	create_insn	(0XF90);
	create_insn	(0XF94);
	set_cmt	(0XF9A,	"imghdr",	0);
	set_cmt	(0XF9C,	"par2",	0);
	create_insn	(0XFAC);
	create_dword	(x=0XFB4);
	op_plain_offset	(x,	0,	0XDB2);
	op_plain_offset	(x,	128,	0XDB2);
	create_dword	(x=0XFB8);
	op_plain_offset	(x,	0,	0XDAE);
	op_plain_offset	(x,	128,	0XDAE);
	create_dword	(x=0XFBC);
	op_plain_offset	(x,	0,	0XDDC);
	op_plain_offset	(x,	128,	0XDDC);
	create_dword	(x=0XFC0);
	op_plain_offset	(x,	0,	0XDDA);
	op_plain_offset	(x,	128,	0XDDA);
	create_dword	(x=0XFC4);
	op_plain_offset	(x,	0,	0XE40);
	op_plain_offset	(x,	128,	0XE40);
	create_dword	(x=0XFC8);
	op_plain_offset	(x,	0,	0XE42);
	op_plain_offset	(x,	128,	0XE42);
	create_dword	(x=0XFCC);
	op_plain_offset	(x,	0,	0XE72);
	op_plain_offset	(x,	128,	0XE72);
	create_dword	(x=0XFD0);
	op_plain_offset	(x,	0,	0XE74);
	op_plain_offset	(x,	128,	0XE74);
	create_dword	(x=0XFD4);
	op_plain_offset	(x,	0,	0XEB6);
	op_plain_offset	(x,	128,	0XEB6);
	create_dword	(x=0XFD8);
	op_plain_offset	(x,	0,	0XEB8);
	op_plain_offset	(x,	128,	0XEB8);
	create_dword	(x=0XFDC);
	op_plain_offset	(x,	0,	0XF5E);
	op_plain_offset	(x,	128,	0XF5E);
	create_dword	(x=0XFE0);
	op_plain_offset	(x,	0,	0XF60);
	op_plain_offset	(x,	128,	0XF60);
	create_insn	(0XFE4);
	set_name	(0XFE4,	"dji_image_verify_final");
	create_insn	(0X1002);
	set_cmt	(0X1022,	"ctx",	0);
	create_insn	(0X1022);
	set_cmt	(0X102A,	"void *",	0);
	set_cmt	(0X102E,	"size_t",	0);
	create_dword	(x=0X104C);
	op_plain_offset	(x,	0,	0XFFA);
	op_plain_offset	(x,	128,	0XFFA);
	create_dword	(x=0X1050);
	op_plain_offset	(x,	0,	0XFF8);
	op_plain_offset	(x,	128,	0XFF8);
	create_dword	(x=0X1054);
	op_plain_offset	(x,	0,	0X101A);
	op_plain_offset	(x,	128,	0X101A);
	create_dword	(x=0X1058);
	op_plain_offset	(x,	0,	0X1018);
	op_plain_offset	(x,	128,	0X1018);
	create_dword	(x=0X105C);
	op_plain_offset	(x,	0,	0X103E);
	op_plain_offset	(x,	128,	0X103E);
	create_dword	(x=0X1060);
	op_plain_offset	(x,	0,	0X1040);
	op_plain_offset	(x,	128,	0X1040);
	create_insn	(0X1064);
	set_name	(0X1064,	"dji_image_verify_file");
	set_cmt	(0X1082,	"char *",	0);
	create_insn	(x=0X1086);
	op_stkvar	(x,	1);
	create_insn	(x=0X108A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1092);
	op_stkvar	(x,	1);
	create_insn	(0X10AE);
	set_cmt	(0X10B0,	"char *",	0);
	set_cmt	(0X10B2,	"char *",	0);
	create_insn	(0X10D0);
	set_cmt	(0X10D6,	"char *",	0);
	create_insn	(0X10FA);
	set_cmt	(0X1106,	"size_t",	0);
	create_insn	(x=0X1126);
	op_stkvar	(x,	1);
	set_cmt	(0X112A,	"vstate",	0);
	set_cmt	(0X112C,	"ifname",	0);
	set_cmt	(0X112E,	"a3",	0);
	create_insn	(0X113C);
	set_cmt	(0X113E,	"size_t",	0);
	set_cmt	(0X1140,	"void *",	0);
	set_cmt	(0X1142,	"size_t",	0);
	set_cmt	(0X1144,	"FILE *",	0);
	set_cmt	(0X114A,	"inbuf_len",	0);
	set_cmt	(0X114E,	"outbuf",	0);
	set_cmt	(0X1150,	"outbuf_len",	0);
	create_insn	(x=0X1150);
	op_stkvar	(x,	1);
	set_cmt	(0X1154,	"vstate",	0);
	set_cmt	(0X1156,	"inbuf",	0);
	create_insn	(0X1164);
	set_cmt	(0X1168,	"size_t",	0);
	set_cmt	(0X116A,	"void *",	0);
	set_cmt	(0X116C,	"size_t",	0);
	set_cmt	(0X116E,	"FILE *",	0);
	set_cmt	(0X1184,	"void *",	0);
	set_cmt	(0X1186,	"int",	0);
	set_cmt	(0X1190,	"outbuf_len",	0);
	create_insn	(x=0X1190);
	op_stkvar	(x,	1);
	set_cmt	(0X1192,	"vstate",	0);
	create_insn	(x=0X1192);
	op_stkvar	(x,	1);
	set_cmt	(0X1194,	"inbuf",	0);
	set_cmt	(0X1196,	"inbuf_len",	0);
	set_cmt	(0X1198,	"outbuf",	0);
	set_cmt	(0X11A6,	"void *",	0);
	set_cmt	(0X11A8,	"size_t",	0);
	set_cmt	(0X11AA,	"size_t",	0);
	set_cmt	(0X11AC,	"FILE *",	0);
	set_cmt	(0X11B6,	"vstate",	0);
	create_insn	(x=0X11B6);
	op_stkvar	(x,	1);
	set_cmt	(0X11C0,	"FILE *",	0);
	set_cmt	(0X11C6,	"FILE *",	0);
	set_cmt	(0X11CE,	"FILE *",	0);
	set_cmt	(0X11D6,	"void *",	0);
	create_insn	(x=0X11DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X11DE);
	op_stkvar	(x,	1);
	create_insn	(0X11EE);
	create_dword	(x=0X11F8);
	op_plain_offset	(x,	0,	0X1074);
	op_plain_offset	(x,	128,	0X1074);
	create_dword	(x=0X11FC);
	op_plain_offset	(x,	0,	0X7FA4);
	op_plain_offset	(x,	128,	0X7FA4);
	create_dword	(x=0X1200);
	op_plain_offset	(x,	0,	0X107E);
	op_plain_offset	(x,	128,	0X107E);
	create_dword	(x=0X1204);
	op_plain_offset	(x,	0,	0X10A2);
	op_plain_offset	(x,	128,	0X10A2);
	create_dword	(x=0X1208);
	op_plain_offset	(x,	0,	0X10A4);
	op_plain_offset	(x,	128,	0X10A4);
	create_dword	(x=0X120C);
	op_plain_offset	(x,	0,	0X10C4);
	op_plain_offset	(x,	128,	0X10C4);
	create_dword	(x=0X1210);
	op_plain_offset	(x,	0,	0X10DC);
	op_plain_offset	(x,	128,	0X10DC);
	create_dword	(x=0X1214);
	op_plain_offset	(x,	0,	0X10EC);
	op_plain_offset	(x,	128,	0X10EC);
	create_dword	(x=0X1218);
	op_plain_offset	(x,	0,	0X10EE);
	op_plain_offset	(x,	128,	0X10EE);
	create_dword	(x=0X121C);
	op_plain_offset	(x,	0,	0X1118);
	op_plain_offset	(x,	128,	0X1118);
	create_dword	(x=0X1220);
	op_plain_offset	(x,	0,	0X111A);
	op_plain_offset	(x,	128,	0X111A);
	create_insn	(0X1224);
	set_name	(0X1224,	"dji_keymgr_init");
	set_cmt	(0X122E,	"size_t",	0);
	set_cmt	(0X1230,	"void *",	0);
	set_cmt	(0X1232,	"void *",	0);
	set_cmt	(0X123C,	"size_t",	0);
	set_cmt	(0X123E,	"void *",	0);
	set_cmt	(0X1240,	"void *",	0);
	set_cmt	(0X124A,	"size_t",	0);
	set_cmt	(0X124C,	"void *",	0);
	set_cmt	(0X124E,	"void *",	0);
	create_dword	(x=0X1258);
	op_plain_offset	(x,	0,	0X1236);
	op_plain_offset	(x,	128,	0X1236);
	create_dword	(x=0X125C);
	op_plain_offset	(x,	0,	0X1234);
	op_plain_offset	(x,	128,	0X1234);
	create_dword	(x=0X1260);
	op_plain_offset	(x,	0,	0X1244);
	op_plain_offset	(x,	128,	0X1244);
	create_dword	(x=0X1264);
	op_plain_offset	(x,	0,	0X1242);
	op_plain_offset	(x,	128,	0X1242);
	create_dword	(x=0X1268);
	op_plain_offset	(x,	0,	0X1252);
	op_plain_offset	(x,	128,	0X1252);
	create_dword	(x=0X126C);
	op_plain_offset	(x,	0,	0X1250);
	op_plain_offset	(x,	128,	0X1250);
	create_insn	(0X1270);
	set_name	(0X1270,	"dji_image_verify_auth_key");
	create_insn	(0X1286);
	create_insn	(0X12A0);
	create_insn	(0X12AA);
	create_insn	(0X12B2);
	create_insn	(0X12BC);
	create_insn	(0X12C4);
	create_insn	(0X12CC);
	make_array	(0X12DA,	0X2);
	create_dword	(0X12DC);
	create_dword	(0X12E0);
	create_dword	(0X12E4);
	create_dword	(0X12E8);
	create_dword	(x=0X12EC);
	op_plain_offset	(x,	0,	0X12AA);
	op_plain_offset	(x,	128,	0X12AA);
	create_dword	(x=0X12F0);
	op_plain_offset	(x,	0,	0X12B2);
	op_plain_offset	(x,	128,	0X12B2);
	create_dword	(x=0X12F4);
	op_plain_offset	(x,	0,	0X12BC);
	op_plain_offset	(x,	128,	0X12BC);
	create_dword	(x=0X12F8);
	op_plain_offset	(x,	0,	0X12C4);
	op_plain_offset	(x,	128,	0X12C4);
	create_dword	(x=0X12FC);
	op_plain_offset	(x,	0,	0X12CC);
	op_plain_offset	(x,	128,	0X12CC);
	create_dword	(x=0X1300);
	op_plain_offset	(x,	0,	0X12D6);
	op_plain_offset	(x,	128,	0X12D6);
	create_insn	(0X1304);
	set_name	(0X1304,	"SHA1_Transform");
	create_insn	(x=0X133A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1378);
	op_stkvar	(x,	1);
	create_insn	(0X1388);
	create_insn	(x=0X138E);
	op_stkvar	(x,	1);
	create_insn	(0X13AC);
	create_insn	(0X13BC);
	create_insn	(0X13D4);
	create_insn	(x=0X13F2);
	op_stkvar	(x,	1);
	make_array	(0X140E,	0X2);
	create_dword	(0X1410);
	create_dword	(0X1414);
	create_dword	(0X1418);
	create_dword	(0X141C);
	create_insn	(0X1420);
	set_name	(0X1420,	"SHA_init");
	create_dword	(0X1448);
	create_dword	(0X144C);
	create_dword	(0X1450);
	create_dword	(x=0X1454);
	op_plain_offset	(x,	0,	0X142C);
	op_plain_offset	(x,	128,	0X142C);
	create_insn	(0X1458);
	set_name	(0X1458,	"SHA_update");
	create_insn	(x=0X145E);
	op_hex		(x,	1);
	create_insn	(0X1474);
	set_cmt	(0X1482,	"ctx",	0);
	create_insn	(0X1490);
	set_name	(0X1490,	"SHA_final");
	set_cmt	(0X14A8,	"data",	0);
	set_cmt	(0X14AA,	"len",	0);
	set_cmt	(0X14C2,	"ctx",	0);
	create_insn	(0X14C2);
	set_cmt	(0X14C4,	"data",	0);
	set_cmt	(0X14C6,	"len",	0);
	create_insn	(x=0X14EE);
	op_stkvar	(x,	1);
	set_cmt	(0X14F2,	"len",	0);
	set_cmt	(0X14F4,	"ctx",	0);
	set_cmt	(0X14F6,	"data",	0);
	create_insn	(x=0X14F6);
	op_stkvar	(x,	1);
	make_array	(0X152E,	0X2);
	create_double	(0X1530);
	create_dword	(x=0X1538);
	op_plain_offset	(x,	0,	0X14AC);
	op_plain_offset	(x,	128,	0X14AC);
	create_dword	(x=0X153C);
	op_plain_offset	(x,	0,	0X14C2);
	op_plain_offset	(x,	128,	0X14C2);
	create_insn	(0X1540);
	set_name	(0X1540,	"SHA_hash");
	set_cmt	(0X1554,	"ctx",	0);
	create_insn	(x=0X1556);
	op_stkvar	(x,	1);
	set_cmt	(0X155C,	"data",	0);
	set_cmt	(0X155E,	"len",	0);
	set_cmt	(0X1560,	"ctx",	0);
	set_cmt	(0X1566,	"ctx",	0);
	create_insn	(x=0X1580);
	op_stkvar	(x,	1);
	create_insn	(0X158E);
	make_array	(0X1592,	0X2);
	create_dword	(x=0X1594);
	op_plain_offset	(x,	0,	0X154C);
	op_plain_offset	(x,	128,	0X154C);
	create_dword	(x=0X1598);
	op_plain_offset	(x,	0,	0X7FA4);
	op_plain_offset	(x,	128,	0X7FA4);
	create_insn	(0X159C);
	set_name	(0X159C,	"SHA256_init");
	create_dword	(0X15CC);
	create_dword	(0X15D0);
	create_dword	(0X15D4);
	create_dword	(0X15D8);
	create_dword	(0X15DC);
	create_dword	(0X15E0);
	create_dword	(0X15E4);
	create_dword	(0X15E8);
	create_dword	(x=0X15EC);
	op_plain_offset	(x,	0,	0X15A4);
	op_plain_offset	(x,	128,	0X15A4);
	create_insn	(0X15F0);
	set_name	(0X15F0,	"SHA256_update");
	create_insn	(x=0X15F8);
	op_hex		(x,	1);
	create_insn	(x=0X1606);
	op_stkvar	(x,	1);
	create_insn	(x=0X160A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1616);
	op_stkvar	(x,	1);
	create_insn	(x=0X1618);
	op_stkvar	(x,	1);
	create_insn	(x=0X161C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1628);
	op_stkvar	(x,	1);
	create_insn	(x=0X1632);
	op_stkvar	(x,	1);
	create_insn	(x=0X165C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1662);
	op_stkvar	(x,	1);
	create_insn	(x=0X16A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X16AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X16B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X16B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X16B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X16B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X16B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X16BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X16BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X16C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X16C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X16CA);
	op_stkvar	(x,	1);
	create_insn	(0X16D0);
	create_insn	(x=0X16FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X16FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X172A);
	op_stkvar	(x,	1);
	create_insn	(x=0X172C);
	op_stkvar	(x,	1);
	create_insn	(x=0X173E);
	op_stkvar	(x,	1);
	create_insn	(x=0X1742);
	op_stkvar	(x,	1);
	create_insn	(x=0X1746);
	op_stkvar	(x,	1);
	create_insn	(x=0X1748);
	op_stkvar	(x,	1);
	create_insn	(x=0X1750);
	op_stkvar	(x,	1);
	create_insn	(x=0X1752);
	op_stkvar	(x,	1);
	create_insn	(x=0X1758);
	op_stkvar	(x,	1);
	create_insn	(x=0X1766);
	op_stkvar	(x,	1);
	create_insn	(x=0X1768);
	op_stkvar	(x,	1);
	create_insn	(x=0X176A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1780);
	op_stkvar	(x,	1);
	create_insn	(x=0X1782);
	op_stkvar	(x,	1);
	create_dword	(x=0X1790);
	op_plain_offset	(x,	0,	0X1610);
	op_plain_offset	(x,	128,	0X1610);
	make_array	(0X1794,	0X4);
	create_insn	(0X1798);
	set_name	(0X1798,	"SHA256_final");
	set_cmt	(0X17B0,	"data",	0);
	set_cmt	(0X17B2,	"len",	0);
	set_cmt	(0X17CA,	"ctx",	0);
	create_insn	(0X17CA);
	set_cmt	(0X17CC,	"data",	0);
	set_cmt	(0X17CE,	"len",	0);
	create_insn	(x=0X17F6);
	op_stkvar	(x,	1);
	set_cmt	(0X17FA,	"len",	0);
	set_cmt	(0X17FC,	"ctx",	0);
	set_cmt	(0X17FE,	"data",	0);
	create_insn	(x=0X17FE);
	op_stkvar	(x,	1);
	create_dword	(0X1834);
	create_double	(0X1838);
	create_dword	(x=0X1840);
	op_plain_offset	(x,	0,	0X17B4);
	op_plain_offset	(x,	128,	0X17B4);
	create_dword	(x=0X1844);
	op_plain_offset	(x,	0,	0X17CA);
	op_plain_offset	(x,	128,	0X17CA);
	create_insn	(0X1848);
	set_name	(0X1848,	"SHA256_hash");
	set_cmt	(0X185C,	"ctx",	0);
	create_insn	(x=0X185E);
	op_stkvar	(x,	1);
	set_cmt	(0X1864,	"data",	0);
	set_cmt	(0X1866,	"len",	0);
	set_cmt	(0X1868,	"ctx",	0);
	set_cmt	(0X186E,	"ctx",	0);
	create_insn	(x=0X1888);
	op_stkvar	(x,	1);
	create_insn	(0X1896);
	make_array	(0X189A,	0X2);
	create_dword	(x=0X189C);
	op_plain_offset	(x,	0,	0X1854);
	op_plain_offset	(x,	128,	0X1854);
	create_dword	(x=0X18A0);
	op_plain_offset	(x,	0,	0X7FA4);
	op_plain_offset	(x,	128,	0X7FA4);
	create_insn	(0X18A4);
	set_name	(0X18A4,	"RSA_subM");
	create_insn	(0X18AE);
	make_array	(0X18D4,	0X4);
	create_insn	(0X18D8);
	set_name	(0X18D8,	"RSA_montMul");
	create_insn	(x=0X18E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X18EA);
	op_stkvar	(x,	1);
	create_insn	(0X18F0);
	create_insn	(x=0X18FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1906);
	op_stkvar	(x,	1);
	create_insn	(x=0X1908);
	op_stkvar	(x,	1);
	create_insn	(x=0X190A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1936);
	op_stkvar	(x,	1);
	create_insn	(0X1940);
	create_insn	(x=0X1944);
	op_stkvar	(x,	1);
	create_insn	(x=0X1946);
	op_stkvar	(x,	1);
	create_insn	(x=0X1966);
	op_stkvar	(x,	1);
	create_insn	(x=0X1970);
	op_stkvar	(x,	1);
	create_insn	(x=0X1996);
	op_stkvar	(x,	1);
	create_insn	(x=0X1998);
	op_stkvar	(x,	1);
	create_insn	(x=0X199A);
	op_stkvar	(x,	1);
	create_insn	(x=0X199E);
	op_stkvar	(x,	1);
	create_insn	(x=0X19AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X19B4);
	op_stkvar	(x,	1);
	set_cmt	(0X19C4,	"key",	0);
	set_cmt	(0X19C6,	"a",	0);
	create_insn	(x=0X19CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X19D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X19D4);
	op_stkvar	(x,	1);
	create_dword	(0X19E4);
	create_double	(0X19E8);
	create_insn	(0X19F0);
	set_name	(0X19F0,	"RSA_verify");
	create_insn	(x=0X1A0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1A0E);
	op_stkvar	(x,	1);
	create_insn	(0X1A16);
	create_insn	(x=0X1A3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1A52);
	op_stkvar	(x,	1);
	create_insn	(x=0X1A86);
	op_stkvar	(x,	1);
	set_cmt	(0X1A8A,	"inarr1",	0);
	set_cmt	(0X1A8C,	"outarr",	0);
	set_cmt	(0X1A8E,	"inarr3",	0);
	set_cmt	(0X1A90,	"inarr4",	0);
	set_cmt	(0X1A9C,	"inarr1",	0);
	set_cmt	(0X1A9E,	"outarr",	0);
	create_insn	(x=0X1A9E);
	op_stkvar	(x,	1);
	set_cmt	(0X1AA0,	"inarr3",	0);
	set_cmt	(0X1AA2,	"inarr4",	0);
	set_cmt	(0X1AA8,	"inarr3",	0);
	create_insn	(x=0X1AA8);
	op_stkvar	(x,	1);
	set_cmt	(0X1AAA,	"inarr1",	0);
	set_cmt	(0X1AAC,	"outarr",	0);
	set_cmt	(0X1AAE,	"inarr4",	0);
	set_cmt	(0X1ABA,	"inarr4",	0);
	set_cmt	(0X1ABC,	"inarr1",	0);
	set_cmt	(0X1ABE,	"outarr",	0);
	create_insn	(x=0X1ABE);
	op_stkvar	(x,	1);
	set_cmt	(0X1AC0,	"inarr3",	0);
	create_insn	(x=0X1AC6);
	op_stkvar	(x,	1);
	create_insn	(0X1ACC);
	set_cmt	(0X1AD0,	"inarr3",	0);
	set_cmt	(0X1AD2,	"inarr1",	0);
	set_cmt	(0X1AD4,	"outarr",	0);
	create_insn	(x=0X1AD4);
	op_stkvar	(x,	1);
	set_cmt	(0X1AD6,	"inarr4",	0);
	set_cmt	(0X1ADE,	"inarr3",	0);
	create_insn	(x=0X1ADE);
	op_stkvar	(x,	1);
	set_cmt	(0X1AE0,	"inarr4",	0);
	set_cmt	(0X1AE2,	"inarr1",	0);
	set_cmt	(0X1AE4,	"outarr",	0);
	create_insn	(x=0X1AE4);
	op_stkvar	(x,	1);
	set_cmt	(0X1AEA,	"inarr4",	0);
	set_cmt	(0X1AEC,	"inarr1",	0);
	set_cmt	(0X1AEE,	"outarr",	0);
	create_insn	(x=0X1AEE);
	op_stkvar	(x,	1);
	set_cmt	(0X1AF0,	"inarr3",	0);
	create_insn	(x=0X1AF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1AF6);
	op_stkvar	(x,	1);
	create_insn	(0X1AFC);
	create_insn	(0X1B0E);
	create_insn	(0X1B30);
	create_insn	(x=0X1B32);
	op_stkvar	(x,	1);
	create_insn	(0X1B3C);
	create_insn	(x=0X1B62);
	op_stkvar	(x,	1);
	create_insn	(0X1B6A);
	set_cmt	(0X1B88,	"data",	0);
	create_insn	(x=0X1B88);
	op_stkvar	(x,	1);
	set_cmt	(0X1B8A,	"len",	0);
	set_cmt	(0X1B8E,	"digest",	0);
	set_cmt	(0X1B9A,	"data",	0);
	create_insn	(x=0X1B9A);
	op_stkvar	(x,	1);
	set_cmt	(0X1B9C,	"len",	0);
	set_cmt	(0X1BA0,	"digest",	0);
	create_insn	(x=0X1BAC);
	op_stkvar	(x,	1);
	create_insn	(0X1BB2);
	create_insn	(0X1BC8);
	create_insn	(x=0X1BCA);
	op_stkvar	(x,	1);
	set_cmt	(0X1BD6,	"key",	0);
	create_insn	(0X1BD6);
	set_cmt	(0X1BD8,	"a",	0);
	create_insn	(0X1BE0);
	create_insn	(0X1BE4);
	make_array	(0X1BEE,	0X2);
	create_dword	(x=0X1BF0);
	op_plain_offset	(x,	0,	0X1A00);
	op_plain_offset	(x,	128,	0X1A00);
	create_dword	(x=0X1BF4);
	op_plain_offset	(x,	0,	0X7FA4);
	op_plain_offset	(x,	128,	0X7FA4);
	create_dword	(x=0X1BF8);
	op_plain_offset	(x,	0,	0X1B9A);
	op_plain_offset	(x,	128,	0X1B9A);
	create_dword	(x=0X1BFC);
	op_plain_offset	(x,	0,	0X1BAC);
	op_plain_offset	(x,	128,	0X1BAC);
	create_insn	(0X1C00);
	set_name	(0X1C00,	"AES_setkey_enc");
	create_insn	(0X1C28);
	create_insn	(0X1C30);
	create_insn	(x=0X1CC0);
	op_hex		(x,	1);
	create_insn	(x=0X1CDC);
	op_hex		(x,	1);
	create_insn	(x=0X1CE6);
	op_hex		(x,	1);
	create_insn	(0X1D08);
	create_insn	(0X1D0C);
	create_insn	(x=0X1D62);
	op_hex		(x,	1);
	create_insn	(x=0X1D7E);
	op_hex		(x,	1);
	create_insn	(x=0X1D88);
	op_hex		(x,	1);
	create_insn	(0X1DBA);
	create_insn	(x=0X1E12);
	op_hex		(x,	1);
	create_insn	(x=0X1E2E);
	op_hex		(x,	1);
	create_insn	(x=0X1E3C);
	op_hex		(x,	1);
	create_insn	(x=0X1E6A);
	op_hex		(x,	1);
	create_insn	(x=0X1E86);
	op_hex		(x,	1);
	create_insn	(x=0X1E92);
	op_hex		(x,	1);
	create_insn	(0X1EB4);
	create_insn	(0X1EBA);
	create_dword	(x=0X1EC0);
	op_plain_offset	(x,	0,	0X1CAE);
	op_plain_offset	(x,	128,	0X1CAE);
	create_dword	(x=0X1EC4);
	op_plain_offset	(x,	0,	0X1CB0);
	op_plain_offset	(x,	128,	0X1CB0);
	create_dword	(x=0X1EC8);
	op_plain_offset	(x,	0,	0X1D50);
	op_plain_offset	(x,	128,	0X1D50);
	create_dword	(x=0X1ECC);
	op_plain_offset	(x,	0,	0X1D52);
	op_plain_offset	(x,	128,	0X1D52);
	create_dword	(x=0X1ED0);
	op_plain_offset	(x,	0,	0X1E00);
	op_plain_offset	(x,	128,	0X1E00);
	create_dword	(x=0X1ED4);
	op_plain_offset	(x,	0,	0X1E02);
	op_plain_offset	(x,	128,	0X1E02);
	create_insn	(0X1ED8);
	set_name	(0X1ED8,	"AES_key_set");
	create_insn	(0X1EFA);
	create_insn	(0X1F50);
	make_array	(0X2066,	0X2);
	create_dword	(x=0X2068);
	op_plain_offset	(x,	0,	0X1F48);
	op_plain_offset	(x,	128,	0X1F48);
	create_dword	(x=0X206C);
	op_plain_offset	(x,	0,	0X1F4A);
	op_plain_offset	(x,	128,	0X1F4A);
	create_dword	(x=0X2070);
	op_plain_offset	(x,	0,	0X1F4C);
	op_plain_offset	(x,	128,	0X1F4C);
	create_dword	(x=0X2074);
	op_plain_offset	(x,	0,	0X1F4E);
	op_plain_offset	(x,	128,	0X1F4E);
	create_dword	(x=0X2078);
	op_plain_offset	(x,	0,	0X1F50);
	op_plain_offset	(x,	128,	0X1F50);
	create_insn	(0X207C);
	set_name	(0X207C,	"AES_sub_22FC");
	create_insn	(x=0X20DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X20F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X2118);
	op_stkvar	(x,	1);
	create_insn	(x=0X211A);
	op_stkvar	(x,	1);
	create_insn	(x=0X2126);
	op_stkvar	(x,	1);
	create_insn	(x=0X213C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2156);
	op_stkvar	(x,	1);
	create_insn	(x=0X2158);
	op_stkvar	(x,	1);
	create_insn	(x=0X2186);
	op_stkvar	(x,	1);
	create_insn	(x=0X21A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X21AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X21B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X21CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X21D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X21E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X21EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X2222);
	op_stkvar	(x,	1);
	create_insn	(x=0X2256);
	op_stkvar	(x,	1);
	create_insn	(0X22B6);
	create_insn	(x=0X22B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X22C6);
	op_hex		(x,	1);
	create_insn	(x=0X22E8);
	op_hex		(x,	1);
	create_insn	(x=0X22F8);
	op_hex		(x,	1);
	create_insn	(x=0X231C);
	op_hex		(x,	1);
	create_insn	(x=0X2330);
	op_hex		(x,	1);
	create_insn	(x=0X2340);
	op_hex		(x,	1);
	create_insn	(x=0X2364);
	op_hex		(x,	1);
	create_insn	(x=0X237C);
	op_hex		(x,	1);
	create_insn	(x=0X2390);
	op_hex		(x,	1);
	create_insn	(x=0X23AE);
	op_hex		(x,	1);
	create_insn	(x=0X23C8);
	op_hex		(x,	1);
	create_insn	(x=0X23D0);
	op_hex		(x,	1);
	create_dword	(x=0X23EC);
	op_plain_offset	(x,	0,	0X2122);
	op_plain_offset	(x,	128,	0X2122);
	create_dword	(x=0X23F0);
	op_plain_offset	(x,	0,	0X2124);
	op_plain_offset	(x,	128,	0X2124);
	create_dword	(x=0X23F4);
	op_plain_offset	(x,	0,	0X2126);
	op_plain_offset	(x,	128,	0X2126);
	create_dword	(x=0X23F8);
	op_plain_offset	(x,	0,	0X2128);
	op_plain_offset	(x,	128,	0X2128);
	create_dword	(x=0X23FC);
	op_plain_offset	(x,	0,	0X22C0);
	op_plain_offset	(x,	128,	0X22C0);
	create_insn	(0X2400);
	set_name	(0X2400,	"AES_dec_block");
	create_insn	(x=0X2432);
	op_stkvar	(x,	1);
	create_insn	(x=0X246C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2472);
	op_stkvar	(x,	1);
	create_insn	(x=0X249C);
	op_stkvar	(x,	1);
	create_insn	(x=0X249E);
	op_stkvar	(x,	1);
	create_insn	(x=0X24AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X24AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X24BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X24F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X251E);
	op_stkvar	(x,	1);
	create_insn	(x=0X252C);
	op_stkvar	(x,	1);
	create_insn	(x=0X253E);
	op_stkvar	(x,	1);
	create_insn	(x=0X2552);
	op_stkvar	(x,	1);
	create_insn	(x=0X2560);
	op_stkvar	(x,	1);
	create_insn	(x=0X2572);
	op_stkvar	(x,	1);
	create_insn	(x=0X2576);
	op_stkvar	(x,	1);
	create_insn	(x=0X25AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X25DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X261E);
	op_stkvar	(x,	1);
	create_insn	(0X2640);
	create_insn	(x=0X2642);
	op_stkvar	(x,	1);
	create_insn	(x=0X2650);
	op_hex		(x,	1);
	create_insn	(x=0X2672);
	op_hex		(x,	1);
	create_insn	(x=0X2682);
	op_hex		(x,	1);
	create_insn	(x=0X26A6);
	op_hex		(x,	1);
	create_insn	(x=0X26BA);
	op_hex		(x,	1);
	create_insn	(x=0X26CA);
	op_hex		(x,	1);
	create_insn	(x=0X26EE);
	op_hex		(x,	1);
	create_insn	(x=0X2708);
	op_hex		(x,	1);
	create_insn	(x=0X271C);
	op_hex		(x,	1);
	create_insn	(x=0X273A);
	op_hex		(x,	1);
	create_insn	(x=0X2754);
	op_hex		(x,	1);
	create_insn	(x=0X2758);
	op_hex		(x,	1);
	make_array	(0X2776,	0X2);
	create_dword	(x=0X2778);
	op_plain_offset	(x,	0,	0X24A6);
	op_plain_offset	(x,	128,	0X24A6);
	create_dword	(x=0X277C);
	op_plain_offset	(x,	0,	0X24A8);
	op_plain_offset	(x,	128,	0X24A8);
	create_dword	(x=0X2780);
	op_plain_offset	(x,	0,	0X24AA);
	op_plain_offset	(x,	128,	0X24AA);
	create_dword	(x=0X2784);
	op_plain_offset	(x,	0,	0X24AC);
	op_plain_offset	(x,	128,	0X24AC);
	create_dword	(x=0X2788);
	op_plain_offset	(x,	0,	0X264A);
	op_plain_offset	(x,	128,	0X264A);
	create_insn	(0X278C);
	set_name	(0X278C,	"AES_crypto");
	create_insn	(x=0X27A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X27A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X27A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X27AA);
	op_stkvar	(x,	1);
	create_insn	(0X27B4);
	create_insn	(x=0X27BE);
	op_stkvar	(x,	1);
	create_insn	(0X27C2);
	create_insn	(x=0X27DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X27DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X27E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X27EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X280E);
	op_hex		(x,	1);
	create_insn	(x=0X2812);
	op_hex		(x,	1);
	create_insn	(x=0X2820);
	op_stkvar	(x,	1);
	create_insn	(0X2878);
	create_insn	(x=0X287A);
	op_stkvar	(x,	1);
	create_insn	(x=0X2896);
	op_stkvar	(x,	1);
	create_insn	(x=0X289E);
	op_stkvar	(x,	1);
	create_insn	(x=0X28B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X28E4);
	op_hex		(x,	1);
	create_insn	(x=0X28E8);
	op_hex		(x,	1);
	create_insn	(x=0X28F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X2940);
	op_stkvar	(x,	1);
	create_insn	(x=0X2942);
	op_stkvar	(x,	1);
	create_insn	(0X294E);
	create_dword	(x=0X2954);
	op_plain_offset	(x,	0,	0X279C);
	op_plain_offset	(x,	128,	0X279C);
	create_dword	(x=0X2958);
	op_plain_offset	(x,	0,	0X7FA4);
	op_plain_offset	(x,	128,	0X7FA4);
	create_strlit	(0X2A4C,	0X2A56);
	set_name	(0X2A4C,	"aOHNCH");
	create_strlit	(0X2A56,	0X2BF9);
	set_name	(0X2A56,	"aVerifyImageSOp");
	create_strlit	(0X2BF9,	0X2C0E);
	set_name	(0X2BF9,	"aUnknowOptionC");
	create_strlit	(0X2C0E,	0X2C27);
	set_name	(0X2C0E,	"aMustInputSourc");
	create_strlit	(0X2C27,	0X2C3E);
	set_name	(0X2C27,	"aMustInputImage");
	create_strlit	(0X2C3E,	0X2C63);
	set_name	(0X2C3E,	"aFailedToInitia");
	create_strlit	(0X2C63,	0X2C88);
	set_name	(0X2C63,	"aFailedToVerify");
	create_strlit	(0X2C88,	0X2CA3);
	set_name	(0X2C88,	"aPassedToVerify");
	create_strlit	(0X2CA3,	0X2CA8);
	set_name	(0X2CA3,	"aHelp");
	create_strlit	(0X2CA8,	0X2CAD);
	set_name	(0X2CA8,	"aName");
	create_strlit	(0X2CAD,	0X2CB3);
	set_name	(0X2CAD,	"aChunk");
	create_strlit	(0X2CB3,	0X2CBA);
	set_name	(0X2CB3,	"aHeader");
	create_strlit	(0X2CBA,	0X2CC1);
	set_name	(0X2CBA,	"aOutput");
	create_strlit	(0X2CC1,	0X2CE9);
	set_name	(0X2CC1,	"aSDErrorTooShor");
	create_strlit	(0X2CE9,	0X2D09);
	set_name	(0X2CE9,	"aSDErrorWrongIm");
	create_strlit	(0X2D09,	0X2D31);
	set_name	(0X2D09,	"aSDErrorInvalid");
	create_strlit	(0X2D31,	0X2D5D);
	set_name	(0X2D31,	"aSDErrorFailedT");
	create_strlit	(0X2D5D,	0X2D8A);
	set_name	(0X2D5D,	"aSDErrorFailedT_2");
	create_strlit	(0X2D8A,	0X2DAF);
	set_name	(0X2D8A,	"aSDErrorFailedT_3");
	create_strlit	(0X2DAF,	0X2DD9);
	set_name	(0X2DAF,	"aSDErrorFailedT_4");
	create_strlit	(0X2DD9,	0X2E0D);
	set_name	(0X2DD9,	"aSDErrorMustSet");
	create_strlit	(0X2E0D,	0X2E35);
	set_name	(0X2E0D,	"aSDErrorInputMu");
	create_strlit	(0X2E35,	0X2E62);
	set_name	(0X2E35,	"aSDErrorFailedT_0");
	create_strlit	(0X2E62,	0X2E90);
	set_name	(0X2E62,	"aSDErrorTooShor_0");
	create_strlit	(0X2E90,	0X2EB0);
	set_name	(0X2E90,	"aSDWholeImageIs");
	create_strlit	(0X2EB0,	0X2EDF);
	set_name	(0X2EB0,	"aSDErrorTooShor_1");
	create_strlit	(0X2EDF,	0X2F05);
	set_name	(0X2EDF,	"aSDErrorFailedT_1");
	create_strlit	(0X2F05,	0X2F2A);
	set_name	(0X2F05,	"aSDErrorHavenTP");
	create_strlit	(0X2F2A,	0X2F5A);
	set_name	(0X2F2A,	"aSDErrorFailedI");
	create_strlit	(0X2F5A,	0X2F92);
	set_name	(0X2F5A,	"aSDErrorFailedP");
	create_strlit	(0X2F92,	0X2FC0);
	set_name	(0X2F92,	"aSDErrorFailedT_5");
	create_strlit	(0X2FC0,	0X2FF2);
	set_name	(0X2FC0,	"aSDErrorFailedT_6");
	create_strlit	(0X2FF2,	0X2FF5);
	set_name	(0X2FF2,	"aRb");
	create_strlit	(0X2FF5,	0X3019);
	set_name	(0X2FF5,	"aSDErrorFailToO");
	create_strlit	(0X3019,	0X302F);
	set_name	(0X3019,	"aFailToOpenFile");
	create_strlit	(0X302F,	0X3032);
	set_name	(0X302F,	"aWb");
	create_strlit	(0X3032,	0X3064);
	set_name	(0X3032,	"aSDErrorFailToA");
	create_strlit	(0X3064,	0X30A4);
	set_name	(0X3064,	"aSDErrorInvalid_0");
	create_strlit	(0X30A4,	0X30CD);
	set_name	(0X30A4,	"aSDErrorFailedT_7");
	create_strlit	(0X30CF,	0X30E6);
	set_name	(0X30CF,	"aDjiImageVerify_3");
	create_strlit	(0X30E6,	0X3102);
	set_name	(0X30E6,	"aDjiImageDecryp");
	create_strlit	(0X3102,	0X311A);
	set_name	(0X3102,	"aDjiImageVerify_2");
	create_strlit	(0X311A,	0X3132);
	set_name	(0X311A,	"aDjiImageVerify_1");
	create_strlit	(0X3132,	0X3148);
	set_name	(0X3132,	"aDjiImageVerify_0");
	create_strlit	(0X3148,	0X315E);
	set_name	(0X3148,	"aDjiImageVerify");
	create_byte	(0X315E);
	make_array	(0X315E,	0X10);
	set_name	(0X315E,	"RUEK");
	create_byte	(0X316E);
	make_array	(0X316E,	0X10);
	set_name	(0X316E,	"RIEK");
	create_byte	(0X317E);
	make_array	(0X317E,	0X20C);
	set_name	(0X317E,	"GFAK_src");
	create_byte	(0X338A);
	make_array	(0X338A,	0X20C);
	set_name	(0X338A,	"PRAK_src");
	create_byte	(0X3596);
	make_array	(0X3596,	0X20C);
	set_name	(0X3596,	"RRAK_src");
	create_dword	(x=0X7DEC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7DEC,	"long_options");
	create_dword	(x=0X7DFC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X7E0C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X7E1C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X7E2C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X7E64);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X7E68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X7E6C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X7E70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X7E78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X7E7C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X7E80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X7E84);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X7E8C,	"DT_PLTGOT ",	0);
	update_extra_cmt		(0X7E8C,	E_PREV + 0,	"; ELF Dynamic Information");
	MakeStruct	(0X7E8C,	"Elf32_Dyn");
	set_cmt	(0X7E94,	"DT_PLTRELSZ ",	0);
	MakeStruct	(0X7E94,	"Elf32_Dyn");
	set_cmt	(0X7E9C,	"DT_JMPREL ",	0);
	MakeStruct	(0X7E9C,	"Elf32_Dyn");
	set_cmt	(0X7EA4,	"DT_PLTREL ",	0);
	MakeStruct	(0X7EA4,	"Elf32_Dyn");
	set_cmt	(0X7EAC,	"DT_REL ",	0);
	MakeStruct	(0X7EAC,	"Elf32_Dyn");
	set_cmt	(0X7EB4,	"DT_RELSZ ",	0);
	MakeStruct	(0X7EB4,	"Elf32_Dyn");
	set_cmt	(0X7EBC,	"DT_RELENT ",	0);
	MakeStruct	(0X7EBC,	"Elf32_Dyn");
	set_cmt	(0X7EC4,	"DT_RELCOUNT ",	0);
	MakeStruct	(0X7EC4,	"Elf32_Dyn");
	set_cmt	(0X7ECC,	"DT_DEBUG ",	0);
	MakeStruct	(0X7ECC,	"Elf32_Dyn");
	set_cmt	(0X7ED4,	"DT_SYMTAB ",	0);
	MakeStruct	(0X7ED4,	"Elf32_Dyn");
	set_cmt	(0X7EDC,	"DT_SYMENT ",	0);
	MakeStruct	(0X7EDC,	"Elf32_Dyn");
	set_cmt	(0X7EE4,	"DT_STRTAB ",	0);
	MakeStruct	(0X7EE4,	"Elf32_Dyn");
	set_cmt	(0X7EEC,	"DT_STRSZ ",	0);
	MakeStruct	(0X7EEC,	"Elf32_Dyn");
	set_cmt	(0X7EF4,	"DT_HASH ",	0);
	MakeStruct	(0X7EF4,	"Elf32_Dyn");
	set_cmt	(0X7EFC,	"DT_NEEDED libc.so",	0);
	MakeStruct	(0X7EFC,	"Elf32_Dyn");
	set_cmt	(0X7F04,	"DT_NEEDED libstdc++.so",	0);
	MakeStruct	(0X7F04,	"Elf32_Dyn");
	set_cmt	(0X7F0C,	"DT_NEEDED libm.so",	0);
	MakeStruct	(0X7F0C,	"Elf32_Dyn");
	set_cmt	(0X7F14,	"DT_PREINIT_ARRAY ",	0);
	MakeStruct	(0X7F14,	"Elf32_Dyn");
	set_cmt	(0X7F1C,	"DT_PREINIT_ARRAYSZ ",	0);
	MakeStruct	(0X7F1C,	"Elf32_Dyn");
	set_cmt	(0X7F24,	"DT_INIT_ARRAY ",	0);
	MakeStruct	(0X7F24,	"Elf32_Dyn");
	set_cmt	(0X7F2C,	"DT_INIT_ARRAYSZ ",	0);
	MakeStruct	(0X7F2C,	"Elf32_Dyn");
	set_cmt	(0X7F34,	"DT_FINI_ARRAY ",	0);
	MakeStruct	(0X7F34,	"Elf32_Dyn");
	set_cmt	(0X7F3C,	"DT_FINI_ARRAYSZ ",	0);
	MakeStruct	(0X7F3C,	"Elf32_Dyn");
	set_cmt	(0X7F44,	"DT_FLAGS ",	0);
	MakeStruct	(0X7F44,	"Elf32_Dyn");
	set_cmt	(0X7F4C,	"DT_FLAGS_1 ",	0);
	MakeStruct	(0X7F4C,	"Elf32_Dyn");
	set_cmt	(0X7F54,	"DT_NULL ",	0);
	MakeStruct	(0X7F54,	"Elf32_Dyn");
	make_array	(0X7F5C,	0X4);
	create_dword	(x=0X7F84);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X7F88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X7F8C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X7F90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X7F94);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7F94,	"optarg_ptr");
	create_dword	(x=0X7F98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7F98,	"__sF_ptr");
	create_dword	(x=0X7F9C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7F9C,	"optind_ptr");
	create_dword	(x=0X7FA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FA0,	"__stack_chk_guard_ptr");
	create_dword	(0X7FA4);
	set_name	(0X7FA4,	"_GLOBAL_OFFSET_TABLE_");
	create_dword	(0X7FA8);
	create_dword	(x=0X7FAC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X7FB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FB0,	"__libc_init_ptr");
	create_dword	(x=0X7FB4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FB4,	"__cxa_atexit_ptr");
	create_dword	(x=0X7FB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FB8,	"getopt_long_ptr");
	create_dword	(x=0X7FBC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FBC,	"printf_ptr");
	create_dword	(x=0X7FC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FC0,	"fprintf_ptr");
	create_dword	(x=0X7FC4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FC4,	"exit_ptr");
	create_dword	(x=0X7FC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FC8,	"fputs_ptr");
	create_dword	(x=0X7FCC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FCC,	"strcmp_ptr");
	create_dword	(x=0X7FD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FD0,	"__stack_chk_fail_ptr");
	create_dword	(x=0X7FD4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FD4,	"memset_ptr");
	create_dword	(x=0X7FD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FD8,	"strncpy_ptr");
	create_dword	(x=0X7FDC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FDC,	"memcpy_ptr");
	create_dword	(x=0X7FE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FE0,	"memcmp_ptr");
	create_dword	(x=0X7FE4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FE4,	"fopen_ptr");
	create_dword	(x=0X7FE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FE8,	"malloc_ptr");
	create_dword	(x=0X7FEC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FEC,	"fread_ptr");
	create_dword	(x=0X7FF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FF0,	"fwrite_ptr");
	create_dword	(x=0X7FF4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FF4,	"fclose_ptr");
	create_dword	(x=0X7FF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FF8,	"free_ptr");
	create_dword	(x=0X7FFC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FFC,	"__aeabi_llsr_ptr");
	create_dword	(0X8004);
	set_name	(0X8004,	"cmdarg_chunk_id");
	create_dword	(0X8008);
	set_name	(0X8008,	"cmdarg_inp_name");
	create_dword	(0X800C);
	set_name	(0X800C,	"cmdarg_inp_fname");
	create_dword	(0X8010);
	set_name	(0X8010,	"cmdarg_output_fname");
	create_dword	(0X8014);
	set_name	(0X8014,	"cmdarg_head_fname");
	create_byte	(0X8018);
	make_array	(0X8018,	0X20C);
	set_name	(0X8018,	"PRAK");
	create_byte	(0X8224);
	make_array	(0X8224,	0X20C);
	set_name	(0X8224,	"GFAK");
	create_byte	(0X8430);
	make_array	(0X8430,	0X20C);
	set_name	(0X8430,	"RRAK");
	create_byte	(0X863C);
	make_array	(0X863C,	0X10);
	set_name	(0X863C,	"PUEK");
	set_name	(0X864C,	"_end_0");
	create_insn	(0X8650);
	set_name	(0X8650,	"__imp___libc_init");
	create_insn	(0X8654);
	set_name	(0X8654,	"__imp___cxa_atexit");
	create_insn	(0X8658);
	set_name	(0X8658,	"__imp_getopt_long");
	create_insn	(0X865C);
	set_name	(0X865C,	"__imp_printf");
	create_insn	(0X8660);
	set_name	(0X8660,	"__imp_fprintf");
	create_insn	(0X8664);
	set_name	(0X8664,	"__imp_exit");
	create_insn	(0X8668);
	set_name	(0X8668,	"__imp_fputs");
	create_dword	(0X866C);
	set_name	(0X866C,	"optarg");
	set_name	(0X8670,	"__sF");
	create_dword	(0X8674);
	set_name	(0X8674,	"optind");
	create_insn	(0X8678);
	set_name	(0X8678,	"__aeabi_unwind_cpp_pr0");
	create_insn	(0X867C);
	set_name	(0X867C,	"__imp_fopen");
	create_insn	(0X8680);
	set_name	(0X8680,	"fseek");
	create_insn	(0X8684);
	set_name	(0X8684,	"ftell");
	create_insn	(0X8688);
	set_name	(0X8688,	"__imp_fclose");
	create_insn	(0X868C);
	set_name	(0X868C,	"__imp_fwrite");
	create_insn	(0X8690);
	set_name	(0X8690,	"__imp_fread");
	create_insn	(0X8694);
	set_name	(0X8694,	"puts");
	create_insn	(0X8698);
	set_name	(0X8698,	"__imp_malloc");
	create_insn	(0X869C);
	set_name	(0X869C,	"time");
	create_insn	(0X86A0);
	set_name	(0X86A0,	"localtime");
	create_insn	(0X86A4);
	set_name	(0X86A4,	"__sprintf_chk");
	create_insn	(0X86A8);
	set_name	(0X86A8,	"sscanf");
	create_insn	(0X86AC);
	set_name	(0X86AC,	"__imp___stack_chk_fail");
	create_dword	(0X86B0);
	set_name	(0X86B0,	"__stack_chk_guard");
	create_insn	(0X86B4);
	set_name	(0X86B4,	"strtoll");
	create_insn	(0X86B8);
	set_name	(0X86B8,	"__aeabi_unwind_cpp_pr1");
	create_insn	(0X86BC);
	set_name	(0X86BC,	"sprintf");
	create_insn	(0X86C0);
	set_name	(0X86C0,	"putchar");
	create_insn	(0X86C4);
	set_name	(0X86C4,	"strlen");
	create_insn	(0X86C8);
	set_name	(0X86C8,	"__imp_strcmp");
	create_insn	(0X86CC);
	set_name	(0X86CC,	"__imp_memset");
	create_insn	(0X86D0);
	set_name	(0X86D0,	"__imp_strncpy");
	create_insn	(0X86D4);
	set_name	(0X86D4,	"__imp_memcpy");
	create_insn	(0X86D8);
	set_name	(0X86D8,	"__imp_memcmp");
	create_insn	(0X86DC);
	set_name	(0X86DC,	"__imp_free");
	create_insn	(0X86E0);
	set_name	(0X86E0,	"__memcpy_chk");
	create_insn	(0X86E4);
	set_name	(0X86E4,	"__imp___aeabi_llsr");
	create_dword	(0X86E8);
	set_name	(0X86E8,	"_edata");
	create_dword	(0X86EC);
	set_name	(0X86EC,	"__bss_start");
	create_dword	(0X86F0);
	set_name	(0X86F0,	"_end");
}

static Functions_0(void) {

	add_func    (0X81C,0X828);
	set_func_flags(0X81C,0x4c1);
	SetType(0X81C, "void __noreturn _libc_init(void *raw_args, void (*onexit)(void), int (*slingshot)(int, char **, char **), const structors_array_t *const structors);");
	add_func    (0X828,0X834);
	set_func_flags(0X828,0x4c0);
	add_func    (0X834,0X840);
	set_func_flags(0X834,0x4c0);
	add_func    (0X840,0X84C);
	set_func_flags(0X840,0x4c0);
	SetType(0X840, "int printf(const char *, ...);");
	add_func    (0X84C,0X858);
	set_func_flags(0X84C,0x4c0);
	SetType(0X84C, "int fprintf(FILE *, const char *, ...);");
	add_func    (0X858,0X864);
	set_func_flags(0X858,0x4c1);
	SetType(0X858, "void exit(int);");
	add_func    (0X864,0X870);
	set_func_flags(0X864,0x4c0);
	SetType(0X864, "int fputs(const char *, FILE *);");
	add_func    (0X870,0X87C);
	set_func_flags(0X870,0x4c0);
	SetType(0X870, "int strcmp(const char *, const char *);");
	add_func    (0X87C,0X888);
	set_func_flags(0X87C,0x4c1);
	add_func    (0X888,0X894);
	set_func_flags(0X888,0x4c0);
	SetType(0X888, "void *memset(void *, int, size_t);");
	add_func    (0X894,0X8A0);
	set_func_flags(0X894,0x4c0);
	SetType(0X894, "char *strncpy(char *, const char *, size_t);");
	add_func    (0X8A0,0X8AC);
	set_func_flags(0X8A0,0x4c0);
	SetType(0X8A0, "void *memcpy(void *, const void *, size_t);");
	add_func    (0X8AC,0X8B8);
	set_func_flags(0X8AC,0x4c0);
	SetType(0X8AC, "int memcmp(const void *, const void *, size_t);");
	add_func    (0X8B8,0X8C4);
	set_func_flags(0X8B8,0x4c0);
	SetType(0X8B8, "FILE *fopen(const char *, const char *);");
	add_func    (0X8C4,0X8D0);
	set_func_flags(0X8C4,0x4c0);
	SetType(0X8C4, "void *malloc(size_t);");
	add_func    (0X8D0,0X8DC);
	set_func_flags(0X8D0,0x4c0);
	SetType(0X8D0, "size_t fread(void *, size_t, size_t, FILE *);");
	add_func    (0X8DC,0X8E8);
	set_func_flags(0X8DC,0x4c0);
	SetType(0X8DC, "size_t fwrite(const void *, size_t, size_t, FILE *);");
	add_func    (0X8E8,0X8F4);
	set_func_flags(0X8E8,0x4c0);
	SetType(0X8E8, "int fclose(FILE *);");
	add_func    (0X8F4,0X900);
	set_func_flags(0X8F4,0x4c0);
	SetType(0X8F4, "void free(void *);");
	add_func    (0X900,0X90C);
	set_func_flags(0X900,0x4c0);
	add_func    (0X910,0X974);
	set_func_flags(0X910,0x415);
	set_frame_size(0X910, 0X14, 4, 0);
	define_local_var(0X910, 0X974, "[bp-0X14]", "structors");
	define_local_var(0X910, 0X974, "[bp-0X8]", "raw_args");
	add_func    (0X988,0X9C0);
	set_func_flags(0X988,0x410);
	set_frame_size(0X988, 0XC, 4, 0);
	add_func    (0X9C4,0XAFE);
	set_func_flags(0X9C4,0x400);
	SetType(0X9C4, "int __cdecl main(int argc, const char **argv, const char **envp);");
	set_frame_size(0X9C4, 0X28, 0, 0);
	define_local_var(0X9C4, 0XAFE, "[bp-0X28]", "a5");
	add_func    (0XB64,0XB84);
	set_func_flags(0XB64,0x400);
	SetType(0XB64, "uint32_t __cdecl chunk_id_select(const char *chunk_str);");
	set_frame_size(0XB64, 0X8, 0, 0);
	add_func    (0XB84,0XC46);
	set_func_flags(0XB84,0x400);
	SetType(0XB84, "int __fastcall dji_image_verify_header(struct ImageHeader *ihdr, unsigned int buf_len, const char *iname);");
	set_frame_size(0XB84, 0X48, 0, 0);
	define_local_var(0XB84, 0XC46, "[bp-0X48]", "hash_len");
	define_local_var(0XB84, 0XC46, "[bp-0X40]", "key_len");
	define_local_var(0XB84, 0XC46, "[bp-0X3C]", "header_digest");
	add_func    (0XC70,0XD24);
	set_func_flags(0XC70,0x400);
	SetType(0XC70, "signed int __fastcall dji_image_decrypt_scram_key(struct ImageHeader *imghdr, void *par2);");
	set_frame_size(0XC70, 0X140, 0, 0);
	define_local_var(0XC70, 0XD24, "[bp-0X140]", "iv");
	define_local_var(0XC70, 0XD24, "[bp-0X13C]", "a6");
	define_local_var(0XC70, 0XD24, "[bp-0X134]", "enc_key_len");
	define_local_var(0XC70, 0XD24, "[bp-0X130]", "key_aesctx");
	define_local_var(0XC70, 0XD24, "[bp-0X2C]", "real_key");
	add_func    (0XD44,0XD84);
	set_func_flags(0XD44,0x400);
	SetType(0XD44, "signed int __fastcall dji_image_verify_init(struct ImageVerifyState *vstate, const char *ifname, int a3);");
	set_frame_size(0XD44, 0X10, 0, 0);
	add_func    (0XD8C,0XFB4);
	set_func_flags(0XD8C,0x400);
	SetType(0XD8C, "signed int __cdecl dji_image_verify_update(struct ImageVerifyState *vstate, uint8_t *inbuf, unsigned int inbuf_len, uint8_t *outbuf, unsigned int outbuf_len);");
	set_frame_size(0XD8C, 0X40, 0, 0);
	define_local_var(0XD8C, 0XFB4, "[bp-0X40]", "iv");
	define_local_var(0XD8C, 0XFB4, "[bp-0X3C]", "a6");
	define_local_var(0XD8C, 0XFB4, "[bp-0X2C]", "aesctx");
	define_local_var(0XD8C, 0XFB4, "[bp+0]", "outbuf_len");
	add_func    (0XFE4,0X104C);
	set_func_flags(0XFE4,0x400);
	SetType(0XFE4, "signed int __fastcall dji_image_verify_final(struct ImageVerifyState *vstate);");
	set_frame_size(0XFE4, 0X8, 0, 0);
	add_func    (0X1064,0X11F8);
	set_func_flags(0X1064,0x400);
	SetType(0X1064, "signed int __fastcall dji_image_verify_file(const char *ifname, const char *hfname, const char *name, size_t buffer_len, const char *ofname);");
	set_frame_size(0X1064, 0X4B0, 0, 0);
	define_local_var(0X1064, 0X11F8, "[bp-0X4B0]", "outbuf_len");
	define_local_var(0X1064, 0X11F8, "[bp-0X4A0]", "vstate");
	define_local_var(0X1064, 0X11F8, "[bp+0]", "a5");
	add_func    (0X1224,0X1258);
	set_func_flags(0X1224,0x400);
	SetType(0X1224, "signed int dji_keymgr_init(void);");
	set_frame_size(0X1224, 0X8, 0, 0);
	add_func    (0X1270,0X12DA);
	set_func_flags(0X1270,0x400);
	SetType(0X1270, "void *__fastcall dji_image_verify_auth_key(unsigned int a1, signed int *a2);");
	add_func    (0X1304,0X140E);
	set_func_flags(0X1304,0x400);
	SetType(0X1304, "void __cdecl SHA1_Transform(struct SHA_CTX *ctx);");
	set_frame_size(0X1304, 0X170, 0, 0);
	add_func    (0X1420,0X1448);
	set_func_flags(0X1420,0x400);
	SetType(0X1420, "void __cdecl SHA_init(struct SHA_CTX *ctx);");
	add_func    (0X1458,0X1490);
	set_func_flags(0X1458,0x400);
	SetType(0X1458, "void __cdecl SHA_update(struct SHA_CTX *ctx, const void *data, int len);");
	set_frame_size(0X1458, 0X10, 0, 0);
	add_func    (0X1490,0X152E);
	set_func_flags(0X1490,0x400);
	SetType(0X1490, "const uint8_t *__cdecl SHA_final(struct SHA_CTX *ctx);");
	set_frame_size(0X1490, 0X28, 0, 0);
	define_local_var(0X1490, 0X152E, "[bp-0X21]", "data");
	add_func    (0X1540,0X1592);
	set_func_flags(0X1540,0x400);
	SetType(0X1540, "const uint8_t *__cdecl SHA_hash(const void *data, int len, uint8_t *digest);");
	set_frame_size(0X1540, 0X90, 0, 0);
	add_func    (0X159C,0X15CC);
	set_func_flags(0X159C,0x400);
	SetType(0X159C, "void __cdecl SHA256_init(struct SHA256_CTX *ctx);");
	add_func    (0X15F0,0X1790);
	set_func_flags(0X15F0,0x400);
	SetType(0X15F0, "void __cdecl SHA256_update(struct SHA256_CTX *ctx, const void *data, int len);");
	set_frame_size(0X15F0, 0X168, 0, 0);
	add_func    (0X1798,0X1834);
	set_func_flags(0X1798,0x400);
	SetType(0X1798, "const uint8_t *__cdecl SHA256_final(struct SHA256_CTX *ctx);");
	set_frame_size(0X1798, 0X28, 0, 0);
	define_local_var(0X1798, 0X1834, "[bp-0X21]", "data");
	add_func    (0X1848,0X189A);
	set_func_flags(0X1848,0x400);
	SetType(0X1848, "const uint8_t *__cdecl SHA256_hash(const void *data, int len, uint8_t *digest);");
	set_frame_size(0X1848, 0X90, 0, 0);
	add_func    (0X18A4,0X18D4);
	set_func_flags(0X18A4,0x400);
	SetType(0X18A4, "void __cdecl RSA_subM(const uint32_t *key, uint32_t *a);");
	set_frame_size(0X18A4, 0X14, 0, 0);
	add_func    (0X18D8,0X19E4);
	set_func_flags(0X18D8,0x400);
	SetType(0X18D8, "void __cdecl RSA_montMul(const uint32_t *inarr1, uint32_t *outarr, const uint32_t *inarr3, const uint32_t *inarr4);");
	set_frame_size(0X18D8, 0X70, 0, 0);
	add_func    (0X19F0,0X1BEE);
	set_func_flags(0X19F0,0x400);
	SetType(0X19F0, "signed int __cdecl RSA_verify(uint32_t *key, uint8_t *signatr, int sig_len, uint8_t *hash, int hash_len);");
	set_frame_size(0X19F0, 0X428, 0, 0);
	define_local_var(0X19F0, 0X1BEE, "[bp-0X424]", "inarr3");
	define_local_var(0X19F0, 0X1BEE, "[bp-0X324]", "outarr");
	define_local_var(0X19F0, 0X1BEE, "[bp-0X224]", "inarr4");
	define_local_var(0X19F0, 0X1BEE, "[bp-0X124]", "digest");
	define_local_var(0X19F0, 0X1BEE, "[bp+0]", "hash_len");
	add_func    (0X1C00,0X1EC0);
	set_func_flags(0X1C00,0x400);
	SetType(0X1C00, "signed int __cdecl AES_setkey_enc(uint8_t *key, int key_bits, struct AES_CTX *ctx);");
	set_frame_size(0X1C00, 0X14, 0, 0);
	add_func    (0X1ED8,0X2066);
	set_func_flags(0X1ED8,0x400);
	SetType(0X1ED8, "signed int __cdecl AES_key_set(uint8_t *enc_key, int enc_key_bits, AES_CTX *ctx);");
	set_frame_size(0X1ED8, 0X20, 0, 0);
	add_func    (0X207C,0X23EC);
	set_func_flags(0X207C,0x400);
	set_frame_size(0X207C, 0X40, 0, 0);
	add_func    (0X2400,0X2776);
	set_func_flags(0X2400,0x400);
	set_frame_size(0X2400, 0X40, 0, 0);
	add_func    (0X278C,0X2954);
	set_func_flags(0X278C,0x400);
	SetType(0X278C, "void __cdecl AES_crypto(const uint8_t *encbuf, uint8_t *outbuf, unsigned int enclen, AES_CTX *aesctx, uint8_t *iv, int a6);");
	set_frame_size(0X278C, 0X50, 0, 0);
	define_local_var(0X278C, 0X2954, "[bp+0]", "iv");
	define_local_var(0X278C, 0X2954, "[bp+0X4]", "a6");
	add_func    (0X8650,0X8654);
	set_func_flags(0X8650,0x401);
	SetType(0X8650, "void __noreturn __libc_init(void *raw_args, void (*onexit)(void), int (*slingshot)(int, char **, char **), const structors_array_t *const structors);");
	add_func    (0X8654,0X8658);
	set_func_flags(0X8654,0x400);
	add_func    (0X8658,0X865C);
	set_func_flags(0X8658,0x400);
	add_func    (0X865C,0X8660);
	set_func_flags(0X865C,0x400);
	SetType(0X865C, "int printf(const char *, ...);");
	add_func    (0X8660,0X8664);
	set_func_flags(0X8660,0x400);
	SetType(0X8660, "int fprintf(FILE *, const char *, ...);");
	add_func    (0X8664,0X8668);
	set_func_flags(0X8664,0x401);
	SetType(0X8664, "void exit(int);");
	add_func    (0X8668,0X866C);
	set_func_flags(0X8668,0x400);
	SetType(0X8668, "int fputs(const char *, FILE *);");
	add_func    (0X8678,0X867C);
	set_func_flags(0X8678,0x400);
	add_func    (0X867C,0X8680);
	set_func_flags(0X867C,0x400);
	SetType(0X867C, "FILE *fopen(const char *, const char *);");
	add_func    (0X8680,0X8684);
	set_func_flags(0X8680,0x400);
	SetType(0X8680, "int fseek(FILE *, int, int);");
	add_func    (0X8684,0X8688);
	set_func_flags(0X8684,0x400);
	SetType(0X8684, "int ftell(FILE *);");
	add_func    (0X8688,0X868C);
	set_func_flags(0X8688,0x400);
	SetType(0X8688, "int fclose(FILE *);");
	add_func    (0X868C,0X8690);
	set_func_flags(0X868C,0x400);
	SetType(0X868C, "size_t fwrite(const void *, size_t, size_t, FILE *);");
	add_func    (0X8690,0X8694);
	set_func_flags(0X8690,0x400);
	SetType(0X8690, "size_t fread(void *, size_t, size_t, FILE *);");
	add_func    (0X8694,0X8698);
	set_func_flags(0X8694,0x400);
	SetType(0X8694, "int puts(const char *);");
	add_func    (0X8698,0X869C);
	set_func_flags(0X8698,0x400);
	SetType(0X8698, "void *malloc(size_t);");
	add_func    (0X869C,0X86A0);
	set_func_flags(0X869C,0x400);
	SetType(0X869C, "time_t time(time_t *);");
	add_func    (0X86A0,0X86A4);
	set_func_flags(0X86A0,0x400);
	SetType(0X86A0, "struct tm *localtime(const time_t *);");
	add_func    (0X86A4,0X86A8);
	set_func_flags(0X86A4,0x400);
	add_func    (0X86A8,0X86AC);
	set_func_flags(0X86A8,0x400);
	SetType(0X86A8, "int sscanf(const char *, const char *, ...);");
	add_func    (0X86AC,0X86B0);
	set_func_flags(0X86AC,0x401);
	add_func    (0X86B4,0X86B8);
	set_func_flags(0X86B4,0x400);
	SetType(0X86B4, "__int64 strtoll(const char *, char **, int);");
	add_func    (0X86B8,0X86BC);
	set_func_flags(0X86B8,0x400);
	add_func    (0X86BC,0X86C0);
	set_func_flags(0X86BC,0x400);
	SetType(0X86BC, "int sprintf(char *, const char *, ...);");
	add_func    (0X86C0,0X86C4);
	set_func_flags(0X86C0,0x400);
	SetType(0X86C0, "int putchar(int);");
	add_func    (0X86C4,0X86C8);
	set_func_flags(0X86C4,0x400);
	SetType(0X86C4, "size_t strlen(const char *);");
	add_func    (0X86C8,0X86CC);
	set_func_flags(0X86C8,0x400);
	SetType(0X86C8, "int strcmp(const char *, const char *);");
	add_func    (0X86CC,0X86D0);
	set_func_flags(0X86CC,0x400);
	SetType(0X86CC, "void *memset(void *, int, size_t);");
	add_func    (0X86D0,0X86D4);
	set_func_flags(0X86D0,0x400);
	SetType(0X86D0, "char *strncpy(char *, const char *, size_t);");
	add_func    (0X86D4,0X86D8);
	set_func_flags(0X86D4,0x400);
	SetType(0X86D4, "void *memcpy(void *, const void *, size_t);");
	add_func    (0X86D8,0X86DC);
	set_func_flags(0X86D8,0x400);
	SetType(0X86D8, "int memcmp(const void *, const void *, size_t);");
	add_func    (0X86DC,0X86E0);
	set_func_flags(0X86DC,0x400);
	SetType(0X86DC, "void free(void *);");
	add_func    (0X86E0,0X86E4);
	set_func_flags(0X86E0,0x400);
	add_func    (0X86E4,0X86E8);
	set_func_flags(0X86E4,0x400);
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	split_sreg_range(0,"T",0,3);
	split_sreg_range(0X808,"T",0,3);
	split_sreg_range(0X81C,"T",0,3);
	split_sreg_range(0X828,"T",0,3);
	split_sreg_range(0X834,"T",0,3);
	split_sreg_range(0X840,"T",0,3);
	split_sreg_range(0X84C,"T",0,3);
	split_sreg_range(0X858,"T",0,3);
	split_sreg_range(0X864,"T",0,3);
	split_sreg_range(0X870,"T",0,3);
	split_sreg_range(0X87C,"T",0,3);
	split_sreg_range(0X888,"T",0,3);
	split_sreg_range(0X894,"T",0,3);
	split_sreg_range(0X8A0,"T",0,3);
	split_sreg_range(0X8AC,"T",0,3);
	split_sreg_range(0X8B8,"T",0,3);
	split_sreg_range(0X8C4,"T",0,3);
	split_sreg_range(0X8D0,"T",0,3);
	split_sreg_range(0X8DC,"T",0,3);
	split_sreg_range(0X8E8,"T",0,3);
	split_sreg_range(0X8F4,"T",0,3);
	split_sreg_range(0X900,"T",0,3);
	split_sreg_range(0X90C,"T",0,3);
	split_sreg_range(0X910,"T",0,3);
	split_sreg_range(0X988,"T",0,3);
	split_sreg_range(0X9C4,"T",0X1,3);
	split_sreg_range(0X9E2,"T",0X1,3);
	split_sreg_range(0XA0A,"T",0X1,3);
	split_sreg_range(0XA14,"T",0X1,3);
	split_sreg_range(0XA22,"T",0X1,3);
	split_sreg_range(0XA2A,"T",0X1,3);
	split_sreg_range(0XA32,"T",0X1,3);
	split_sreg_range(0XA3A,"T",0X1,3);
	split_sreg_range(0XA40,"T",0X1,3);
	split_sreg_range(0XA44,"T",0X1,3);
	split_sreg_range(0XA56,"T",0X1,3);
	split_sreg_range(0XA60,"T",0X1,3);
	split_sreg_range(0XA64,"T",0X1,3);
	split_sreg_range(0XA82,"T",0X1,3);
	split_sreg_range(0XAA8,"T",0X1,3);
	split_sreg_range(0XAC2,"T",0X1,3);
	split_sreg_range(0XAEE,"T",0X1,3);
	split_sreg_range(0XAF4,"T",0X1,3);
	split_sreg_range(0XAF8,"T",0X1,3);
	split_sreg_range(0XB64,"T",0X1,3);
	split_sreg_range(0XB6C,"T",0X1,3);
	split_sreg_range(0XB70,"T",0X1,3);
	split_sreg_range(0XB74,"T",0X1,3);
	split_sreg_range(0XB80,"T",0X1,3);
	split_sreg_range(0XB84,"T",0X1,3);
	split_sreg_range(0XBB6,"T",0X1,3);
	split_sreg_range(0XBC2,"T",0X1,3);
	split_sreg_range(0XBD0,"T",0X1,3);
	split_sreg_range(0XBDE,"T",0X1,3);
	split_sreg_range(0XBE4,"T",0X1,3);
	split_sreg_range(0XBFE,"T",0X1,3);
	split_sreg_range(0XC28,"T",0X1,3);
	split_sreg_range(0XC2E,"T",0X1,3);
	split_sreg_range(0XC34,"T",0X1,3);
	split_sreg_range(0XC40,"T",0X1,3);
	split_sreg_range(0XC70,"T",0X1,3);
	split_sreg_range(0XCB6,"T",0X1,3);
	split_sreg_range(0XCD8,"T",0X1,3);
	split_sreg_range(0XD12,"T",0X1,3);
	split_sreg_range(0XD1E,"T",0X1,3);
	split_sreg_range(0XD44,"T",0X1,3);
	split_sreg_range(0XD62,"T",0X1,3);
	split_sreg_range(0XD8C,"T",0X1,3);
	split_sreg_range(0XDB6,"T",0X1,3);
	split_sreg_range(0XDE0,"T",0X1,3);
	split_sreg_range(0XE02,"T",0X1,3);
	split_sreg_range(0XE08,"T",0X1,3);
	split_sreg_range(0XE16,"T",0X1,3);
	split_sreg_range(0XE26,"T",0X1,3);
	split_sreg_range(0XE2C,"T",0X1,3);
	split_sreg_range(0XE42,"T",0X1,3);
	split_sreg_range(0XE46,"T",0X1,3);
	split_sreg_range(0XE4C,"T",0X1,3);
	split_sreg_range(0XE5E,"T",0X1,3);
	split_sreg_range(0XE60,"T",0X1,3);
	split_sreg_range(0XE7E,"T",0X1,3);
	split_sreg_range(0XEBA,"T",0X1,3);
	split_sreg_range(0XEFC,"T",0X1,3);
	split_sreg_range(0XEFE,"T",0X1,3);
	split_sreg_range(0XF0A,"T",0X1,3);
	split_sreg_range(0XF1E,"T",0X1,3);
	split_sreg_range(0XF42,"T",0X1,3);
	split_sreg_range(0XF50,"T",0X1,3);
	split_sreg_range(0XF68,"T",0X1,3);
	split_sreg_range(0XF74,"T",0X1,3);
	split_sreg_range(0XF86,"T",0X1,3);
	split_sreg_range(0XF8C,"T",0X1,3);
	split_sreg_range(0XF90,"T",0X1,3);
	split_sreg_range(0XF94,"T",0X1,3);
	split_sreg_range(0XFAC,"T",0X1,3);
	split_sreg_range(0XFE4,"T",0X1,3);
	split_sreg_range(0X1002,"T",0X1,3);
	split_sreg_range(0X1022,"T",0X1,3);
	split_sreg_range(0X104A,"T",0X1,3);
	split_sreg_range(0X1064,"T",0X1,3);
	split_sreg_range(0X10AE,"T",0X1,3);
	split_sreg_range(0X10D0,"T",0X1,3);
	split_sreg_range(0X10D2,"T",0X1,3);
	split_sreg_range(0X10FA,"T",0X1,3);
	split_sreg_range(0X10FC,"T",0X1,3);
	split_sreg_range(0X1126,"T",0X1,3);
	split_sreg_range(0X113C,"T",0X1,3);
	split_sreg_range(0X113E,"T",0X1,3);
	split_sreg_range(0X1164,"T",0X1,3);
	split_sreg_range(0X1168,"T",0X1,3);
	split_sreg_range(0X1190,"T",0X1,3);
	split_sreg_range(0X11B2,"T",0X1,3);
	split_sreg_range(0X11BE,"T",0X1,3);
	split_sreg_range(0X11C0,"T",0X1,3);
	split_sreg_range(0X11C6,"T",0X1,3);
	split_sreg_range(0X11D4,"T",0X1,3);
	split_sreg_range(0X11DC,"T",0X1,3);
	split_sreg_range(0X11EE,"T",0X1,3);
	split_sreg_range(0X1224,"T",0X1,3);
	split_sreg_range(0X1270,"T",0X1,3);
	split_sreg_range(0X1286,"T",0X1,3);
	split_sreg_range(0X129A,"T",0X1,3);
	split_sreg_range(0X12A0,"T",0X1,3);
	split_sreg_range(0X12AA,"T",0X1,3);
	split_sreg_range(0X12B2,"T",0X1,3);
	split_sreg_range(0X12BC,"T",0X1,3);
	split_sreg_range(0X12C4,"T",0X1,3);
	split_sreg_range(0X12CC,"T",0X1,3);
	split_sreg_range(0X12D4,"T",0X1,3);
	split_sreg_range(0X12D8,"T",0X1,3);
	split_sreg_range(0X1304,"T",0X1,3);
	split_sreg_range(0X1310,"T",0X1,3);
	split_sreg_range(0X1340,"T",0X1,3);
	split_sreg_range(0X1388,"T",0X1,3);
	split_sreg_range(0X138E,"T",0X1,3);
	split_sreg_range(0X13AC,"T",0X1,3);
	split_sreg_range(0X13BC,"T",0X1,3);
	split_sreg_range(0X13D4,"T",0X1,3);
	split_sreg_range(0X13DE,"T",0X1,3);
	split_sreg_range(0X1420,"T",0X1,3);
	split_sreg_range(0X1458,"T",0X1,3);
	split_sreg_range(0X1474,"T",0X1,3);
	split_sreg_range(0X148A,"T",0X1,3);
	split_sreg_range(0X1490,"T",0X1,3);
	split_sreg_range(0X14C2,"T",0X1,3);
	split_sreg_range(0X14CC,"T",0X1,3);
	split_sreg_range(0X14E2,"T",0X1,3);
	split_sreg_range(0X1508,"T",0X1,3);
	split_sreg_range(0X1540,"T",0X1,3);
	split_sreg_range(0X1574,"T",0X1,3);
	split_sreg_range(0X158E,"T",0X1,3);
	split_sreg_range(0X159C,"T",0X1,3);
	split_sreg_range(0X15F0,"T",0X1,3);
	split_sreg_range(0X161C,"T",0X1,3);
	split_sreg_range(0X1632,"T",0X1,3);
	split_sreg_range(0X1660,"T",0X1,3);
	split_sreg_range(0X16D0,"T",0X1,3);
	split_sreg_range(0X16DC,"T",0X1,3);
	split_sreg_range(0X1780,"T",0X1,3);
	split_sreg_range(0X1798,"T",0X1,3);
	split_sreg_range(0X17CA,"T",0X1,3);
	split_sreg_range(0X17D4,"T",0X1,3);
	split_sreg_range(0X17EA,"T",0X1,3);
	split_sreg_range(0X180E,"T",0X1,3);
	split_sreg_range(0X1848,"T",0X1,3);
	split_sreg_range(0X187C,"T",0X1,3);
	split_sreg_range(0X1896,"T",0X1,3);
	split_sreg_range(0X18A4,"T",0X1,3);
	split_sreg_range(0X18AE,"T",0X1,3);
	split_sreg_range(0X18CC,"T",0X1,3);
	split_sreg_range(0X18D8,"T",0X1,3);
	split_sreg_range(0X18F0,"T",0X1,3);
	split_sreg_range(0X18F6,"T",0X1,3);
	split_sreg_range(0X1906,"T",0X1,3);
	split_sreg_range(0X1940,"T",0X1,3);
	split_sreg_range(0X198C,"T",0X1,3);
	split_sreg_range(0X19CC,"T",0X1,3);
	split_sreg_range(0X19D2,"T",0X1,3);
	split_sreg_range(0X19F0,"T",0X1,3);
	split_sreg_range(0X1A16,"T",0X1,3);
	split_sreg_range(0X1A28,"T",0X1,3);
	split_sreg_range(0X1A38,"T",0X1,3);
	split_sreg_range(0X1A3E,"T",0X1,3);
	split_sreg_range(0X1A56,"T",0X1,3);
	split_sreg_range(0X1A9C,"T",0X1,3);
	split_sreg_range(0X1ACC,"T",0X1,3);
	split_sreg_range(0X1AFC,"T",0X1,3);
	split_sreg_range(0X1B00,"T",0X1,3);
	split_sreg_range(0X1B0E,"T",0X1,3);
	split_sreg_range(0X1B2A,"T",0X1,3);
	split_sreg_range(0X1B30,"T",0X1,3);
	split_sreg_range(0X1B3C,"T",0X1,3);
	split_sreg_range(0X1B58,"T",0X1,3);
	split_sreg_range(0X1B6A,"T",0X1,3);
	split_sreg_range(0X1B7A,"T",0X1,3);
	split_sreg_range(0X1B88,"T",0X1,3);
	split_sreg_range(0X1B9A,"T",0X1,3);
	split_sreg_range(0X1BAA,"T",0X1,3);
	split_sreg_range(0X1BB2,"T",0X1,3);
	split_sreg_range(0X1BC0,"T",0X1,3);
	split_sreg_range(0X1BC8,"T",0X1,3);
	split_sreg_range(0X1BCA,"T",0X1,3);
	split_sreg_range(0X1BD6,"T",0X1,3);
	split_sreg_range(0X1BE0,"T",0X1,3);
	split_sreg_range(0X1BE4,"T",0X1,3);
	split_sreg_range(0X1C00,"T",0X1,3);
	split_sreg_range(0X1C1E,"T",0X1,3);
	split_sreg_range(0X1C28,"T",0X1,3);
	split_sreg_range(0X1C30,"T",0X1,3);
	split_sreg_range(0X1C32,"T",0X1,3);
	split_sreg_range(0X1CAE,"T",0X1,3);
	split_sreg_range(0X1D04,"T",0X1,3);
	split_sreg_range(0X1D08,"T",0X1,3);
	split_sreg_range(0X1D0C,"T",0X1,3);
	split_sreg_range(0X1D50,"T",0X1,3);
	split_sreg_range(0X1DBA,"T",0X1,3);
	split_sreg_range(0X1E00,"T",0X1,3);
	split_sreg_range(0X1EB4,"T",0X1,3);
	split_sreg_range(0X1EBA,"T",0X1,3);
	split_sreg_range(0X1ED8,"T",0X1,3);
	split_sreg_range(0X1EFA,"T",0X1,3);
	split_sreg_range(0X1F2C,"T",0X1,3);
	split_sreg_range(0X1F50,"T",0X1,3);
	split_sreg_range(0X2056,"T",0X1,3);
	split_sreg_range(0X2062,"T",0X1,3);
	split_sreg_range(0X207C,"T",0X1,3);
	split_sreg_range(0X2126,"T",0X1,3);
	split_sreg_range(0X22B6,"T",0X1,3);
	split_sreg_range(0X2400,"T",0X1,3);
	split_sreg_range(0X24AA,"T",0X1,3);
	split_sreg_range(0X2640,"T",0X1,3);
	split_sreg_range(0X278C,"T",0X1,3);
	split_sreg_range(0X27B4,"T",0X1,3);
	split_sreg_range(0X27C2,"T",0X1,3);
	split_sreg_range(0X27C4,"T",0X1,3);
	split_sreg_range(0X27F4,"T",0X1,3);
	split_sreg_range(0X2802,"T",0X1,3);
	split_sreg_range(0X2822,"T",0X1,3);
	split_sreg_range(0X2834,"T",0X1,3);
	split_sreg_range(0X2850,"T",0X1,3);
	split_sreg_range(0X2866,"T",0X1,3);
	split_sreg_range(0X2878,"T",0X1,3);
	split_sreg_range(0X2880,"T",0X1,3);
	split_sreg_range(0X28A4,"T",0X1,3);
	split_sreg_range(0X28C0,"T",0X1,3);
	split_sreg_range(0X28D6,"T",0X1,3);
	split_sreg_range(0X28FC,"T",0X1,3);
	split_sreg_range(0X2918,"T",0X1,3);
	split_sreg_range(0X292E,"T",0X1,3);
	split_sreg_range(0X2940,"T",0X1,3);
	split_sreg_range(0X294E,"T",0X1,3);
	split_sreg_range(0X295C,"T",0,3);
	split_sreg_range(0X2974,"T",0,3);
	split_sreg_range(0X2A4C,"T",0,3);
	split_sreg_range(0X6104,"T",0,3);
	split_sreg_range(0X7DEC,"T",0,3);
	split_sreg_range(0X7E4C,"T",0,3);
	split_sreg_range(0X7E54,"T",0,3);
	split_sreg_range(0X7E5C,"T",0,3);
	split_sreg_range(0X7E64,"T",0,3);
	split_sreg_range(0X7E8C,"T",0,3);
	split_sreg_range(0X7F84,"T",0,3);
	split_sreg_range(0X8000,"T",0,3);
	split_sreg_range(0X864C,"T",0,3);
	split_sreg_range(0X8650,"T",0,3);
	split_sreg_range(0X8654,"T",0,3);
	split_sreg_range(0X8658,"T",0,3);
	split_sreg_range(0X865C,"T",0,3);
	split_sreg_range(0X8660,"T",0,3);
	split_sreg_range(0X8664,"T",0,3);
	split_sreg_range(0X8668,"T",0,3);
	split_sreg_range(0X867C,"T",0,3);
	split_sreg_range(0X8688,"T",0,3);
	split_sreg_range(0X868C,"T",0,3);
	split_sreg_range(0X8690,"T",0,3);
	split_sreg_range(0X8698,"T",0,3);
	split_sreg_range(0X86AC,"T",0,3);
	split_sreg_range(0X86C8,"T",0,3);
	split_sreg_range(0X86CC,"T",0,3);
	split_sreg_range(0X86D0,"T",0,3);
	split_sreg_range(0X86D4,"T",0,3);
	split_sreg_range(0X86D8,"T",0,3);
	split_sreg_range(0X86DC,"T",0,3);
	split_sreg_range(0X86E4,"T",0,3);
	split_sreg_range(0X86E8,"T",0,3);
	split_sreg_range(0,"DS",0X1,3);
	split_sreg_range(0X808,"DS",0X1,3);
	split_sreg_range(0X90C,"DS",0X1,3);
	split_sreg_range(0X910,"DS",0X1,3);
	split_sreg_range(0X295C,"DS",0X1,3);
	split_sreg_range(0X2974,"DS",0X1,3);
	split_sreg_range(0X2A4C,"DS",0X1,3);
	split_sreg_range(0X6104,"DS",0X1,3);
	split_sreg_range(0X7DEC,"DS",0X1,3);
	split_sreg_range(0X7E4C,"DS",0X1,3);
	split_sreg_range(0X7E54,"DS",0X1,3);
	split_sreg_range(0X7E5C,"DS",0X1,3);
	split_sreg_range(0X7E64,"DS",0X1,3);
	split_sreg_range(0X7E8C,"DS",0X1,3);
	split_sreg_range(0X7F84,"DS",0X1,3);
	split_sreg_range(0X8000,"DS",0X1,3);
	split_sreg_range(0X864C,"DS",0X11,3);
	split_sreg_range(0X8650,"DS",0X12,3);
	split_sreg_range(0X86E8,"DS",0X13,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
        end_type_updating(UTP_STRUCT);
}

// End of file.

//
// +-------------------------------------------------------------------------+
// |   This file has been generated by The Interactive Disassembler (IDA)    |
// |           Copyright (c) 2017 Hex-Rays, <support@hex-rays.com>           |
// +-------------------------------------------------------------------------+
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
  // set 'loading idc file' mode
  set_inf_attr(INF_GENFLAGS, INFFL_LOADIDC|get_inf_attr(INF_GENFLAGS));
  GenInfo();            // various settings
  Segments();           // segmentation
  Enums();              // enumerations
  Structures();         // structure types
  ApplyStrucTInfos();   // structure type infos
  Patches();            // manual patches
  SegRegs();            // segment register values
  Bytes();              // individual bytes (code,data)
  Functions();          // function definitions
  // clear 'loading idc file' mode
  set_inf_attr(INF_GENFLAGS, ~INFFL_LOADIDC&get_inf_attr(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        delete_all_segments();    // purge database
	set_processor_type("ARM", SETPROC_USER);
	set_inf_attr(INF_COMPILER, 6);
	set_inf_attr(INF_STRLIT_BREAK, 0xA);
	set_flag(INF_CMTFLAG, SW_ALLCMT, 0);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_VOID, 0);
	set_inf_attr(INF_XREFNUM, 2);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_AUTO, 1);
	set_inf_attr(INF_INDENT, 16);
	set_inf_attr(INF_COMMENT, 40);
	set_inf_attr(INF_MAXREF, 0x10);
	add_default_til("armv12");
	add_default_til("android_arm");
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	set_selector(0X1,0);
	set_selector(0X2,0);
	set_selector(0X3,0);
	set_selector(0X4,0);
	set_selector(0X5,0);
	set_selector(0X6,0);
	set_selector(0X7,0);
	set_selector(0X8,0);
	set_selector(0X9,0);
	set_selector(0XA,0);
	set_selector(0XB,0);
	set_selector(0XC,0);
	set_selector(0XD,0);
	set_selector(0XE,0);
	set_selector(0XF,0);
	set_selector(0X10,0);
	set_selector(0X11,0);
	set_selector(0X12,0);
	set_selector(0X13,0);
	set_selector(0X14,0);
	;
	add_segm_ex(0,0X870,0X1,1,6,2,ADDSEG_NOSREG);
	SegRename(0,"LOAD");
	SegClass (0,"CODE");
	SegDefReg(0x0,"T",0x0);
	SegDefReg(0x0,"DS",0x10);
	set_segm_type(0,2);
	add_segm_ex(0X870,0X9A4,0X4,1,5,2,ADDSEG_NOSREG);
	SegRename(0X870,".plt");
	SegClass (0X870,"CODE");
	SegDefReg(0x870,"T",0x0);
	SegDefReg(0x870,"DS",0x10);
	set_segm_type(0X870,2);
	add_segm_ex(0X9A4,0X9A8,0X1,1,6,2,ADDSEG_NOSREG);
	SegRename(0X9A4,"LOAD");
	SegClass (0X9A4,"CODE");
	SegDefReg(0x9A4,"T",0x0);
	SegDefReg(0x9A4,"DS",0x10);
	set_segm_type(0X9A4,2);
	add_segm_ex(0X9A8,0X2BDC,0X5,1,10,2,ADDSEG_NOSREG);
	SegRename(0X9A8,".text");
	SegClass (0X9A8,"CODE");
	SegDefReg(0x9A8,"T",0x0);
	SegDefReg(0x9A8,"DS",0x10);
	set_segm_type(0X9A8,2);
	add_segm_ex(0X2BDC,0X2BF4,0X6,1,5,2,ADDSEG_NOSREG);
	SegRename(0X2BDC,".note.android.ident");
	SegClass (0X2BDC,"CONST");
	SegDefReg(0x2BDC,"T",0x0);
	SegDefReg(0x2BDC,"DS",0x10);
	set_segm_type(0X2BDC,3);
	add_segm_ex(0X2BF4,0X2CEC,0X7,1,5,2,ADDSEG_NOSREG);
	SegRename(0X2BF4,".ARM.exidx");
	SegClass (0X2BF4,"CONST");
	SegDefReg(0x2BF4,"T",0x0);
	SegDefReg(0x2BF4,"DS",0x10);
	set_segm_type(0X2BF4,3);
	add_segm_ex(0X2CEC,0X62A8,0X8,1,5,2,ADDSEG_NOSREG);
	SegRename(0X2CEC,".rodata");
	SegClass (0X2CEC,"CONST");
	SegDefReg(0x2CEC,"T",0x0);
	SegDefReg(0x2CEC,"DS",0x10);
	set_segm_type(0X2CEC,3);
	add_segm_ex(0X62A8,0X62E4,0X9,1,5,2,ADDSEG_NOSREG);
	SegRename(0X62A8,".ARM.extab");
	SegClass (0X62A8,"CONST");
	SegDefReg(0x62A8,"T",0x0);
	SegDefReg(0x62A8,"DS",0x10);
	set_segm_type(0X62A8,3);
	add_segm_ex(0X7DEC,0X7E3C,0XA,1,5,2,ADDSEG_NOSREG);
	SegRename(0X7DEC,".data.rel.ro.local");
	SegClass (0X7DEC,"DATA");
	SegDefReg(0x7DEC,"T",0x0);
	SegDefReg(0x7DEC,"DS",0x10);
	set_segm_type(0X7DEC,3);
	add_segm_ex(0X7E3C,0X7E44,0XB,1,5,2,ADDSEG_NOSREG);
	SegRename(0X7E3C,".preinit_array");
	SegClass (0X7E3C,"DATA");
	SegDefReg(0x7E3C,"T",0x0);
	SegDefReg(0x7E3C,"DS",0x10);
	set_segm_type(0X7E3C,3);
	add_segm_ex(0X7E44,0X7E4C,0XC,1,5,2,ADDSEG_NOSREG);
	SegRename(0X7E44,".init_array");
	SegClass (0X7E44,"DATA");
	SegDefReg(0x7E44,"T",0x0);
	SegDefReg(0x7E44,"DS",0x10);
	set_segm_type(0X7E44,3);
	add_segm_ex(0X7E4C,0X7E54,0XD,1,5,2,ADDSEG_NOSREG);
	SegRename(0X7E4C,".fini_array");
	SegClass (0X7E4C,"DATA");
	SegDefReg(0x7E4C,"T",0x0);
	SegDefReg(0x7E4C,"DS",0x10);
	set_segm_type(0X7E4C,3);
	add_segm_ex(0X7E54,0X7E7C,0XE,1,5,2,ADDSEG_NOSREG);
	SegRename(0X7E54,".data.rel.ro");
	SegClass (0X7E54,"DATA");
	SegDefReg(0x7E54,"T",0x0);
	SegDefReg(0x7E54,"DS",0x10);
	set_segm_type(0X7E54,3);
	add_segm_ex(0X7E7C,0X7F74,0X2,1,6,2,ADDSEG_NOSREG);
	SegRename(0X7E7C,"LOAD");
	SegClass (0X7E7C,"DATA");
	SegDefReg(0x7E7C,"T",0x0);
	SegDefReg(0x7E7C,"DS",0x10);
	set_segm_type(0X7E7C,3);
	add_segm_ex(0X7F74,0X8000,0XF,1,5,2,ADDSEG_NOSREG);
	SegRename(0X7F74,".got");
	SegClass (0X7F74,"DATA");
	SegDefReg(0x7F74,"T",0x0);
	SegDefReg(0x7F74,"DS",0x10);
	set_segm_type(0X7F74,3);
	add_segm_ex(0X8000,0X8020,0X10,1,1,2,ADDSEG_NOSREG);
	SegRename(0X8000,".data");
	SegClass (0X8000,"DATA");
	SegDefReg(0x8000,"T",0x0);
	SegDefReg(0x8000,"DS",0x10);
	set_segm_type(0X8000,3);
	add_segm_ex(0X8020,0X945C,0X11,1,5,2,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X8020,".bss");
	SegClass (0X8020,"BSS");
	SegDefReg(0x8020,"T",0x0);
	SegDefReg(0x8020,"DS",0x10);
	set_segm_type(0X8020,9);
	add_segm_ex(0X945C,0X945D,0X12,1,1,2,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X945C,".prgend");
	SegClass (0X945C,".prgend");
	SegDefReg(0x945C,"T",0x0);
	SegDefReg(0x945C,"DS",0x12);
	set_segm_type(0X945C,7);
	add_segm_ex(0X9460,0X9504,0X13,1,5,2,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X9460,"extern");
	SegClass (0X9460,"extern");
	SegDefReg(0x9460,"T",0x0);
	SegDefReg(0x9460,"DS",0x13);
	set_segm_type(0X9460,1);
	add_segm_ex(0X9504,0X9510,0X14,1,5,2,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X9504,"abs");
	SegClass (0X9504,"abs");
	SegDefReg(0x9504,"T",0x0);
	SegDefReg(0x9504,"DS",0x14);
	set_segm_type(0X9504,10);
	set_inf_attr(INF_LOW_OFF, 0x20);
	set_inf_attr(INF_HIGH_OFF, 0x9510);
}

static Enums_0(id) {

	id = add_enum(-1,"SHA256_defines",0x1100000);
	add_enum_member(id,"SHA256_DIGEST_SIZE",	0X20,	-1);
	return id;
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        begin_type_updating(UTP_ENUM);
	id = Enums_0(id);
        end_type_updating(UTP_ENUM);
}

static ApplyStrucTInfos_0(void) {
        auto id;
	id = get_struc_id("Elf32_Sym");
	SetType(get_member_id(id, 0x0), "unsigned __int32");
	SetType(get_member_id(id, 0x4), "unsigned __int32");
	SetType(get_member_id(id, 0x8), "unsigned __int32");
	SetType(get_member_id(id, 0xC), "unsigned __int8");
	SetType(get_member_id(id, 0xD), "unsigned __int8");
	SetType(get_member_id(id, 0xE), "unsigned __int16");
	id = get_struc_id("Elf32_Rel");
	SetType(get_member_id(id, 0x0), "unsigned __int32");
	SetType(get_member_id(id, 0x4), "unsigned __int32");
	id = get_struc_id("Elf32_Dyn");
	SetType(get_member_id(id, 0x0), "__int32");
	SetType(get_member_id(id, 0x4), "union Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249");
	id = get_struc_id("Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249");
	SetType(get_member_id(id, 0x0), "unsigned __int32");
	SetType(get_member_id(id, 0x1), "unsigned __int32");
	id = get_struc_id("structors_array_t");
	SetType(get_member_id(id, 0x0), "void (**)(void)");
	SetType(get_member_id(id, 0x4), "void (**)(void)");
	SetType(get_member_id(id, 0x8), "void (**)(void)");
	id = get_struc_id("option");
	SetType(get_member_id(id, 0x0), "char *");
	SetType(get_member_id(id, 0x8), "int *");
	id = get_struc_id("ImageVerifyState");
	SetType(get_member_id(id, 0x24), "struct ImageHeader");
	SetType(get_member_id(id, 0xE4), "uint8_t[512]");
	SetType(get_member_id(id, 0x2F8), "struct SHA256_CTX");
	SetType(get_member_id(id, 0x368), "struct AES_CTX[]");
	id = get_struc_id("SHA_CTX");
	SetType(get_member_id(id, 0x0), "void *");
	SetType(get_member_id(id, 0x8), "uint64_t");
	id = get_struc_id("SHA256_CTX");
	SetType(get_member_id(id, 0x0), "void *");
	SetType(get_member_id(id, 0x8), "uint64_t");
	id = get_struc_id("ImageHeader");
	SetType(get_member_id(id, 0x90), "uint64_t");
	id = get_struc_id("AES_CTX");
	SetType(get_member_id(id, 0x0), "uint32_t[60]");
	SetType(get_member_id(id, 0xF0), "uint32_t");
	return id;
}

//------------------------------------------------------------------------
// Information about type information for structure members

static ApplyStrucTInfos() {
	ApplyStrucTInfos_0();
}

static Structures_0(id) {
        auto mid;

	id = add_struc(-1,"Elf32_Sym",0);
	id = add_struc(-1,"Elf32_Rel",0);
	id = add_struc(-1,"Elf32_Dyn",0);
	id = add_struc(-1,"Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249",1);
	id = add_struc(-1,"structors_array_t",0);
	id = add_struc(-1,"option",0);
	id = add_struc(-1,"ImageVerifyState",0);
	id = add_struc(-1,"SHA_CTX",0);
	id = add_struc(-1,"SHA256_CTX",0);
	id = add_struc(-1,"ImageHeader",0);
	id = add_struc(-1,"AES_CTX",0);
	
	id = get_struc_id("Elf32_Sym");
	mid = add_struc_member(id,"st_name",	0,	0x20500400,	0X418,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"st_value",	0X4,	0x20500400,	0,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"st_size",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"st_info",	0XC,	0x000400,	-1,	1);
	mid = add_struc_member(id,"st_other",	0XD,	0x000400,	-1,	1);
	mid = add_struc_member(id,"st_shndx",	0XE,	0x10000400,	-1,	2);
	set_struc_align(id,2);
	
	id = get_struc_id("Elf32_Rel");
	mid = add_struc_member(id,"r_offset",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"r_info",	0X4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249");
	mid = add_struc_member(id,"d_val",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"d_ptr",	0,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("Elf32_Dyn");
	mid = add_struc_member(id,"d_tag",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"d_un",	0X4,	0x60000400,	get_struc_id("Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("structors_array_t");
	mid = add_struc_member(id,"preinit_array",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"init_array",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"fini_array",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("option");
	mid = add_struc_member(id,"name",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"has_arg",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"flag",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"val",	0XC,	0x20200400,	-1,	4);
	
	id = get_struc_id("SHA256_CTX");
	mid = add_struc_member(id,"f",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"f_pad",	0X4,	0x000400,	-1,	4);
	mid = add_struc_member(id,"count",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"buf",	0X10,	0x000400,	-1,	64);
	mid = add_struc_member(id,"state",	0X50,	0x20000400,	-1,	32);
	
	id = get_struc_id("ImageHeader");
	mid = add_struc_member(id,"magic_num",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"header_version",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"size",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"reserved",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"header_size",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"signature_size",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"payload_size",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"target_size",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"os",	0X20,	0x000400,	-1,	1);
	mid = add_struc_member(id,"arch",	0X21,	0x200400,	-1,	1);
	mid = add_struc_member(id,"compression",	0X22,	0x000400,	-1,	1);
	mid = add_struc_member(id,"anti_version",	0X23,	0x000400,	-1,	1);
	mid = add_struc_member(id,"auth_alg",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"auth_key",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"enc_key",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"scram_key",	0X30,	0x000400,	-1,	16);
	mid = add_struc_member(id,"name",	0X40,	0x000400,	-1,	32);
	mid = add_struc_member(id,"type",	0X60,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"version",	0X64,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"date",	0X68,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"reserved2",	0X6C,	0x20000400,	-1,	20);
	mid = add_struc_member(id,"userdata",	0X80,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"entry",	0X90,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"reserved3",	0X98,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"chunk_num",	0X9C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"payload_digest",	0XA0,	0x000400,	-1,	32);
	
	id = get_struc_id("AES_CTX");
	mid = add_struc_member(id,"Ek",	0,	0x20000400,	-1,	240);
	mid = add_struc_member(id,"Nr",	0XF0,	0x20000400,	-1,	4);
	
	id = get_struc_id("ImageVerifyState");
	mid = add_struc_member(id,"ifname",	0,	0x000400,	-1,	32);
	mid = add_struc_member(id,"field_20",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"imghdr",	0X24,	0x60000400,	get_struc_id("ImageHeader"),	192);
	mid = add_struc_member(id,"field_E4",	0XE4,	0x000400,	-1,	512);
	mid = add_struc_member(id,"parsed_payload_size",	0X2E4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_2E8",	0X2E8,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_2E9",	0X2E9,	0x000400,	-1,	1);
	mid = add_struc_member(id,"field_2EA",	0X2EA,	0x000400,	-1,	2);
	mid = add_struc_member(id,"field_2EC",	0X2EC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_2F0",	0X2F0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"field_2F4",	0X2F4,	0x000400,	-1,	4);
	mid = add_struc_member(id,"payload_digest_ctx",	0X2F8,	0x60000400,	get_struc_id("SHA256_CTX"),	112);
	mid = add_struc_member(id,"aes_ctx",	0X368,	0x60000400,	get_struc_id("AES_CTX"),	244);
	mid = add_struc_member(id,"iv",	0X45C,	0x000400,	-1,	16);
	mid = add_struc_member(id,"field_46C",	0X46C,	0x20000400,	-1,	4);
	
	id = get_struc_id("SHA_CTX");
	mid = add_struc_member(id,"f",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"f_pad",	0X4,	0x000400,	-1,	4);
	mid = add_struc_member(id,"count",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"buf",	0X10,	0x000400,	-1,	64);
	mid = add_struc_member(id,"state",	0X50,	0x20000400,	-1,	32);
	return id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        begin_type_updating(UTP_STRUCT);
	id = Structures_0(id);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	set_cmt	(0,	"File format: \\x7FELF",	0);
	update_extra_cmt		(0,	E_PREV + 0,	"; File Name   : wm220_0801_v01.04.17.03_20170120-dji_verify.elf");
	update_extra_cmt		(0,	E_PREV + 1,	"; Format      : ELF for ARM (Shared object)");
	update_extra_cmt		(0,	E_PREV + 2,	"; Interpreter '/system/bin/linker'");
	update_extra_cmt		(0,	E_PREV + 3,	"; Needed Library 'libc.so'");
	update_extra_cmt		(0,	E_PREV + 4,	"; Needed Library 'libstdc++.so'");
	update_extra_cmt		(0,	E_PREV + 5,	"; Needed Library 'libm.so'");
	update_extra_cmt		(0,	E_PREV + 6,	"; ");
	update_extra_cmt		(0,	E_PREV + 7,	"; EABI version: 5");
	update_extra_cmt		(0,	E_PREV + 8,	"; ");
	update_extra_cmt		(0,	E_PREV + 9,	"; Application type:  Executable 32bit");
	create_dword	(x=0);
	op_hex		(x,	0);
	set_cmt	(0X4,	"File class: 32-bit",	0);
	create_byte	(x=0X4);
	op_hex		(x,	0);
	set_cmt	(0X5,	"Data encoding: little-endian",	0);
	create_byte	(x=0X5);
	op_hex		(x,	0);
	set_cmt	(0X6,	"File version",	0);
	create_byte	(x=0X6);
	op_hex		(x,	0);
	set_cmt	(0X7,	"OS/ABI: UNIX System V ABI",	0);
	create_byte	(x=0X7);
	op_hex		(x,	0);
	set_cmt	(0X8,	"ABI Version",	0);
	create_byte	(x=0X8);
	op_hex		(x,	0);
	set_cmt	(0X9,	"Padding",	0);
	create_byte	(x=0X9);
	make_array	(x,	0X7);
	op_hex		(x,	0);
	set_cmt	(0X10,	"File type: Shared object",	0);
	create_word	(x=0X10);
	op_hex		(x,	0);
	set_cmt	(0X12,	"Machine: ARM",	0);
	create_word	(x=0X12);
	op_hex		(x,	0);
	set_cmt	(0X14,	"File version",	0);
	create_dword	(x=0X14);
	op_hex		(x,	0);
	set_cmt	(0X18,	"Entry point",	0);
	create_dword	(x=0X18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X1C,	"PHT file offset",	0);
	create_dword	(x=0X1C);
	op_hex		(x,	0);
	set_cmt	(0X20,	"SHT file offset",	0);
	create_dword	(x=0X20);
	op_hex		(x,	0);
	set_cmt	(0X24,	"Processor-specific flags",	0);
	create_dword	(x=0X24);
	op_hex		(x,	0);
	set_cmt	(0X28,	"ELF header size",	0);
	create_word	(x=0X28);
	op_hex		(x,	0);
	set_cmt	(0X2A,	"PHT entry size",	0);
	create_word	(x=0X2A);
	op_hex		(x,	0);
	set_cmt	(0X2C,	"Number of entries in PHT",	0);
	create_word	(x=0X2C);
	op_hex		(x,	0);
	set_cmt	(0X2E,	"SHT entry size",	0);
	create_word	(x=0X2E);
	op_hex		(x,	0);
	set_cmt	(0X30,	"Number of entries in SHT",	0);
	create_word	(x=0X30);
	op_hex		(x,	0);
	set_cmt	(0X32,	"SHT entry index for string table",	0);
	create_word	(x=0X32);
	op_hex		(x,	0);
	set_cmt	(0X34,	"Type: PHDR",	0);
	update_extra_cmt		(0X34,	E_PREV + 0,	"; ELF32 Program Header");
	update_extra_cmt		(0X34,	E_PREV + 1,	"; PHT Entry 0");
	create_dword	(x=0X34);
	op_hex		(x,	0);
	set_cmt	(0X38,	"File offset",	0);
	create_dword	(x=0X38);
	op_hex		(x,	0);
	set_cmt	(0X3C,	"Virtual address",	0);
	create_dword	(x=0X3C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X40,	"Physical address",	0);
	create_dword	(x=0X40);
	op_hex		(x,	0);
	set_cmt	(0X44,	"Size in file image",	0);
	create_dword	(x=0X44);
	op_hex		(x,	0);
	set_cmt	(0X48,	"Size in memory image",	0);
	create_dword	(x=0X48);
	op_hex		(x,	0);
	set_cmt	(0X4C,	"Flags",	0);
	create_dword	(x=0X4C);
	op_hex		(x,	0);
	set_cmt	(0X50,	"Alignment",	0);
	create_dword	(x=0X50);
	op_hex		(x,	0);
	set_cmt	(0X54,	"Type: INTERP",	0);
	update_extra_cmt		(0X54,	E_PREV + 0,	"; PHT Entry 1");
	create_dword	(x=0X54);
	op_hex		(x,	0);
	set_cmt	(0X58,	"File offset",	0);
	create_dword	(x=0X58);
	op_hex		(x,	0);
	set_cmt	(0X5C,	"Virtual address",	0);
	create_dword	(x=0X5C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X60,	"Physical address",	0);
	create_dword	(x=0X60);
	op_hex		(x,	0);
	set_cmt	(0X64,	"Size in file image",	0);
	create_dword	(x=0X64);
	op_hex		(x,	0);
	set_cmt	(0X68,	"Size in memory image",	0);
	create_dword	(x=0X68);
	op_hex		(x,	0);
	set_cmt	(0X6C,	"Flags",	0);
	create_dword	(x=0X6C);
	op_hex		(x,	0);
	set_cmt	(0X70,	"Alignment",	0);
	create_dword	(x=0X70);
	op_hex		(x,	0);
	set_cmt	(0X74,	"Type: LOAD",	0);
	update_extra_cmt		(0X74,	E_PREV + 0,	"; PHT Entry 2");
	create_dword	(x=0X74);
	op_hex		(x,	0);
	set_cmt	(0X78,	"File offset",	0);
	create_dword	(x=0X78);
	op_hex		(x,	0);
	set_cmt	(0X7C,	"Virtual address",	0);
	create_dword	(0X7C);
	set_cmt	(0X80,	"Physical address",	0);
	create_dword	(x=0X80);
	op_hex		(x,	0);
	set_cmt	(0X84,	"Size in file image",	0);
	create_dword	(x=0X84);
	op_hex		(x,	0);
	set_cmt	(0X88,	"Size in memory image",	0);
	create_dword	(x=0X88);
	op_hex		(x,	0);
	set_cmt	(0X8C,	"Flags",	0);
	create_dword	(x=0X8C);
	op_hex		(x,	0);
	set_cmt	(0X90,	"Alignment",	0);
	create_dword	(x=0X90);
	op_hex		(x,	0);
	set_cmt	(0X94,	"Type: LOAD",	0);
	update_extra_cmt		(0X94,	E_PREV + 0,	"; PHT Entry 3");
	create_dword	(x=0X94);
	op_hex		(x,	0);
	set_cmt	(0X98,	"File offset",	0);
	create_dword	(x=0X98);
	op_hex		(x,	0);
	set_cmt	(0X9C,	"Virtual address",	0);
	create_dword	(x=0X9C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XA0,	"Physical address",	0);
	create_dword	(x=0XA0);
	op_hex		(x,	0);
	set_cmt	(0XA4,	"Size in file image",	0);
	create_dword	(x=0XA4);
	op_hex		(x,	0);
	set_cmt	(0XA8,	"Size in memory image",	0);
	create_dword	(x=0XA8);
	op_hex		(x,	0);
	set_cmt	(0XAC,	"Flags",	0);
	create_dword	(x=0XAC);
	op_hex		(x,	0);
	set_cmt	(0XB0,	"Alignment",	0);
	create_dword	(x=0XB0);
	op_hex		(x,	0);
	set_cmt	(0XB4,	"Type: DYNAMIC",	0);
	update_extra_cmt		(0XB4,	E_PREV + 0,	"; PHT Entry 4");
	create_dword	(x=0XB4);
	op_hex		(x,	0);
	set_cmt	(0XB8,	"File offset",	0);
	create_dword	(x=0XB8);
	op_hex		(x,	0);
	set_cmt	(0XBC,	"Virtual address",	0);
	create_dword	(x=0XBC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0XC0,	"Physical address",	0);
	create_dword	(x=0XC0);
	op_hex		(x,	0);
	set_cmt	(0XC4,	"Size in file image",	0);
	create_dword	(x=0XC4);
	op_hex		(x,	0);
	set_cmt	(0XC8,	"Size in memory image",	0);
	create_dword	(x=0XC8);
	op_hex		(x,	0);
	set_cmt	(0XCC,	"Flags",	0);
	create_dword	(x=0XCC);
	op_hex		(x,	0);
	set_cmt	(0XD0,	"Alignment",	0);
	create_dword	(x=0XD0);
	op_hex		(x,	0);
	set_cmt	(0XD4,	"Type: STACK",	0);
	update_extra_cmt		(0XD4,	E_PREV + 0,	"; PHT Entry 5");
	create_dword	(x=0XD4);
	op_hex		(x,	0);
	set_cmt	(0XD8,	"File offset",	0);
	create_dword	(x=0XD8);
	op_hex		(x,	0);
	set_cmt	(0XDC,	"Virtual address",	0);
	create_dword	(0XDC);
	set_cmt	(0XE0,	"Physical address",	0);
	create_dword	(x=0XE0);
	op_hex		(x,	0);
	set_cmt	(0XE4,	"Size in file image",	0);
	create_dword	(x=0XE4);
	op_hex		(x,	0);
	set_cmt	(0XE8,	"Size in memory image",	0);
	create_dword	(x=0XE8);
	op_hex		(x,	0);
	set_cmt	(0XEC,	"Flags",	0);
	create_dword	(x=0XEC);
	op_hex		(x,	0);
	set_cmt	(0XF0,	"Alignment",	0);
	create_dword	(x=0XF0);
	op_hex		(x,	0);
	set_cmt	(0XF4,	"Type: EXIDX",	0);
	update_extra_cmt		(0XF4,	E_PREV + 0,	"; PHT Entry 6");
	create_dword	(x=0XF4);
	op_hex		(x,	0);
	set_cmt	(0XF8,	"File offset",	0);
	create_dword	(x=0XF8);
	op_hex		(x,	0);
	set_cmt	(0XFC,	"Virtual address",	0);
	create_dword	(x=0XFC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X100,	"Physical address",	0);
	create_dword	(x=0X100);
	op_hex		(x,	0);
	set_cmt	(0X104,	"Size in file image",	0);
	create_dword	(x=0X104);
	op_hex		(x,	0);
	set_cmt	(0X108,	"Size in memory image",	0);
	create_dword	(x=0X108);
	op_hex		(x,	0);
	set_cmt	(0X10C,	"Flags",	0);
	create_dword	(x=0X10C);
	op_hex		(x,	0);
	set_cmt	(0X110,	"Alignment",	0);
	create_dword	(x=0X110);
	op_hex		(x,	0);
	set_cmt	(0X114,	"Type: RO-AFTER",	0);
	update_extra_cmt		(0X114,	E_PREV + 0,	"; PHT Entry 7");
	create_dword	(x=0X114);
	op_hex		(x,	0);
	set_cmt	(0X118,	"File offset",	0);
	create_dword	(x=0X118);
	op_hex		(x,	0);
	set_cmt	(0X11C,	"Virtual address",	0);
	create_dword	(x=0X11C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X120,	"Physical address",	0);
	create_dword	(x=0X120);
	op_hex		(x,	0);
	set_cmt	(0X124,	"Size in file image",	0);
	create_dword	(x=0X124);
	op_hex		(x,	0);
	set_cmt	(0X128,	"Size in memory image",	0);
	create_dword	(x=0X128);
	op_hex		(x,	0);
	set_cmt	(0X12C,	"Flags",	0);
	create_dword	(x=0X12C);
	op_hex		(x,	0);
	set_cmt	(0X130,	"Alignment",	0);
	create_dword	(x=0X130);
	op_hex		(x,	0);
	create_strlit	(0X134,	0X147);
	set_name	(0X134,	"aSystemBinLinke");
	create_byte	(0X147);
	update_extra_cmt		(0X148,	E_PREV + 0,	"; ELF Symbol Table");
	MakeStruct	(0X148,	"Elf32_Sym");
	MakeStruct	(0X158,	"Elf32_Sym");
	MakeStruct	(0X168,	"Elf32_Sym");
	MakeStruct	(0X178,	"Elf32_Sym");
	MakeStruct	(0X188,	"Elf32_Sym");
	MakeStruct	(0X198,	"Elf32_Sym");
	MakeStruct	(0X1A8,	"Elf32_Sym");
	MakeStruct	(0X1B8,	"Elf32_Sym");
	MakeStruct	(0X1C8,	"Elf32_Sym");
	MakeStruct	(0X1D8,	"Elf32_Sym");
	MakeStruct	(0X1E8,	"Elf32_Sym");
	MakeStruct	(0X1F8,	"Elf32_Sym");
	MakeStruct	(0X208,	"Elf32_Sym");
	MakeStruct	(0X218,	"Elf32_Sym");
	MakeStruct	(0X228,	"Elf32_Sym");
	MakeStruct	(0X238,	"Elf32_Sym");
	MakeStruct	(0X248,	"Elf32_Sym");
	MakeStruct	(0X258,	"Elf32_Sym");
	MakeStruct	(0X268,	"Elf32_Sym");
	MakeStruct	(0X278,	"Elf32_Sym");
	MakeStruct	(0X288,	"Elf32_Sym");
	MakeStruct	(0X298,	"Elf32_Sym");
	MakeStruct	(0X2A8,	"Elf32_Sym");
	MakeStruct	(0X2B8,	"Elf32_Sym");
	MakeStruct	(0X2C8,	"Elf32_Sym");
	MakeStruct	(0X2D8,	"Elf32_Sym");
	MakeStruct	(0X2E8,	"Elf32_Sym");
	MakeStruct	(0X2F8,	"Elf32_Sym");
	MakeStruct	(0X308,	"Elf32_Sym");
	MakeStruct	(0X318,	"Elf32_Sym");
	MakeStruct	(0X328,	"Elf32_Sym");
	MakeStruct	(0X338,	"Elf32_Sym");
	MakeStruct	(0X348,	"Elf32_Sym");
	MakeStruct	(0X358,	"Elf32_Sym");
	MakeStruct	(0X368,	"Elf32_Sym");
	MakeStruct	(0X378,	"Elf32_Sym");
	MakeStruct	(0X388,	"Elf32_Sym");
	MakeStruct	(0X398,	"Elf32_Sym");
	MakeStruct	(0X3A8,	"Elf32_Sym");
	MakeStruct	(0X3B8,	"Elf32_Sym");
	MakeStruct	(0X3C8,	"Elf32_Sym");
	MakeStruct	(0X3D8,	"Elf32_Sym");
	MakeStruct	(0X3E8,	"Elf32_Sym");
	MakeStruct	(0X3F8,	"Elf32_Sym");
	MakeStruct	(0X408,	"Elf32_Sym");
	update_extra_cmt		(0X418,	E_PREV + 0,	"; ELF String Table");
	create_byte	(0X418);
	create_strlit	(0X419,	0X425);
	set_name	(0X419,	"aLibcInit");
	create_strlit	(0X425,	0X432);
	set_name	(0X425,	"aCxaAtexit");
	create_strlit	(0X432,	0X43E);
	set_name	(0X432,	"aGetoptLong");
	create_strlit	(0X43E,	0X445);
	set_name	(0X43E,	"aPrintf");
	create_strlit	(0X445,	0X44D);
	set_name	(0X445,	"aFprintf");
	create_strlit	(0X44D,	0X452);
	set_name	(0X44D,	"aExit");
	create_strlit	(0X452,	0X458);
	set_name	(0X452,	"aFputs");
	create_strlit	(0X458,	0X45F);
	set_name	(0X458,	"aOptarg");
	create_strlit	(0X45F,	0X464);
	set_name	(0X45F,	"aSf");
	create_strlit	(0X464,	0X46B);
	set_name	(0X464,	"aOptind");
	create_strlit	(0X46B,	0X482);
	set_name	(0X46B,	"aAeabiUnwindCpp");
	create_strlit	(0X482,	0X488);
	set_name	(0X482,	"aFopen");
	create_strlit	(0X488,	0X48E);
	set_name	(0X488,	"aFseek");
	create_strlit	(0X48E,	0X494);
	set_name	(0X48E,	"aFtell");
	create_strlit	(0X494,	0X49B);
	set_name	(0X494,	"aFclose");
	create_strlit	(0X49B,	0X4A2);
	set_name	(0X49B,	"aFwrite");
	create_strlit	(0X4A2,	0X4A8);
	set_name	(0X4A2,	"aFread");
	create_strlit	(0X4A8,	0X4AD);
	set_name	(0X4A8,	"aPuts");
	create_strlit	(0X4AD,	0X4B4);
	set_name	(0X4AD,	"aMalloc");
	create_strlit	(0X4B4,	0X4B9);
	set_name	(0X4B4,	"aTime");
	create_strlit	(0X4B9,	0X4C3);
	set_name	(0X4B9,	"aLocaltime");
	create_strlit	(0X4C3,	0X4D1);
	set_name	(0X4C3,	"aSprintfChk");
	create_strlit	(0X4D1,	0X4D8);
	set_name	(0X4D1,	"aSscanf");
	create_strlit	(0X4D8,	0X4E9);
	set_name	(0X4D8,	"aStackChkFail");
	create_strlit	(0X4E9,	0X4FB);
	set_name	(0X4E9,	"aStackChkGuard");
	create_strlit	(0X4FB,	0X503);
	set_name	(0X4FB,	"aStrtoll");
	create_strlit	(0X503,	0X51A);
	set_name	(0X503,	"aAeabiUnwindCpp_0");
	create_strlit	(0X51A,	0X522);
	set_name	(0X51A,	"aSprintf");
	create_strlit	(0X522,	0X52A);
	set_name	(0X522,	"aPutchar");
	create_strlit	(0X52A,	0X531);
	set_name	(0X52A,	"aStrlen");
	create_strlit	(0X531,	0X538);
	set_name	(0X531,	"aStrcmp");
	create_strlit	(0X538,	0X53F);
	set_name	(0X538,	"aMemset");
	create_strlit	(0X53F,	0X547);
	set_name	(0X53F,	"aStrncpy");
	create_strlit	(0X547,	0X54E);
	set_name	(0X547,	"aMemcpy");
	create_strlit	(0X54E,	0X555);
	set_name	(0X54E,	"aMemcmp");
	create_strlit	(0X555,	0X55A);
	set_name	(0X555,	"aFree");
	create_strlit	(0X55A,	0X561);
	set_name	(0X55A,	"aSystem");
	create_strlit	(0X561,	0X56E);
	set_name	(0X561,	"aMemcpyChk");
	create_strlit	(0X56E,	0X575);
	set_name	(0X56E,	"aStrstr");
	create_strlit	(0X575,	0X57C);
	set_name	(0X575,	"aStrchr");
	create_strlit	(0X57C,	0X589);
	set_name	(0X57C,	"aAeabiLlsr");
	create_strlit	(0X589,	0X590);
	set_name	(0X589,	"aEdata");
	create_strlit	(0X590,	0X59C);
	set_name	(0X590,	"aBssStart");
	create_strlit	(0X59C,	0X5A1);
	set_name	(0X59C,	"aEnd");
	create_strlit	(0X5A1,	0X5A9);
	set_name	(0X5A1,	"aLibcSo");
	create_strlit	(0X5A9,	0X5B6);
	set_name	(0X5A9,	"aLibstdcSo");
	create_strlit	(0X5B6,	0X5BE);
	set_name	(0X5B6,	"aLibmSo");
	create_word	(0X5BE);
	update_extra_cmt		(0X5C0,	E_PREV + 0,	"; ELF Hash Table");
	create_dword	(x=0X5C0);
	op_hex		(x,	0);
	set_name	(0X5C0,	"elf_hash_nbucket");
	create_dword	(x=0X5C4);
	op_hex		(x,	0);
	set_name	(0X5C4,	"elf_hash_nchain");
	create_dword	(x=0X5C8);
	make_array	(x,	0X25);
	op_hex		(x,	0);
	set_name	(0X5C8,	"elf_hash_bucket");
	create_dword	(x=0X65C);
	make_array	(x,	0X2D);
	op_hex		(x,	0);
	set_name	(0X65C,	"elf_hash_chain");
	set_cmt	(0X710,	"R_ARM_RELATIVE",	0);
	update_extra_cmt		(0X710,	E_PREV + 0,	"; ELF REL Relocation Table");
	MakeStruct	(0X710,	"Elf32_Rel");
	set_cmt	(0X718,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X718,	"Elf32_Rel");
	set_cmt	(0X720,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X720,	"Elf32_Rel");
	set_cmt	(0X728,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X728,	"Elf32_Rel");
	set_cmt	(0X730,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X730,	"Elf32_Rel");
	set_cmt	(0X738,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X738,	"Elf32_Rel");
	set_cmt	(0X740,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X740,	"Elf32_Rel");
	set_cmt	(0X748,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X748,	"Elf32_Rel");
	set_cmt	(0X750,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X750,	"Elf32_Rel");
	set_cmt	(0X758,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X758,	"Elf32_Rel");
	set_cmt	(0X760,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X760,	"Elf32_Rel");
	set_cmt	(0X768,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X768,	"Elf32_Rel");
	set_cmt	(0X770,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X770,	"Elf32_Rel");
	set_cmt	(0X778,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X778,	"Elf32_Rel");
	set_cmt	(0X780,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X780,	"Elf32_Rel");
	set_cmt	(0X788,	"R_ARM_RELATIVE",	0);
	MakeStruct	(0X788,	"Elf32_Rel");
	set_cmt	(0X790,	"R_ARM_GLOB_DAT optarg",	0);
	MakeStruct	(0X790,	"Elf32_Rel");
	set_cmt	(0X798,	"R_ARM_GLOB_DAT __sF",	0);
	MakeStruct	(0X798,	"Elf32_Rel");
	set_cmt	(0X7A0,	"R_ARM_GLOB_DAT optind",	0);
	MakeStruct	(0X7A0,	"Elf32_Rel");
	set_cmt	(0X7A8,	"R_ARM_GLOB_DAT __stack_chk_guard",	0);
	MakeStruct	(0X7A8,	"Elf32_Rel");
	set_cmt	(0X7B0,	"R_ARM_JUMP_SLOT __libc_init",	0);
	update_extra_cmt		(0X7B0,	E_PREV + 0,	"; ELF JMPREL Relocation Table");
	MakeStruct	(0X7B0,	"Elf32_Rel");
	set_cmt	(0X7B8,	"R_ARM_JUMP_SLOT __cxa_atexit",	0);
	MakeStruct	(0X7B8,	"Elf32_Rel");
	set_cmt	(0X7C0,	"R_ARM_JUMP_SLOT getopt_long",	0);
	MakeStruct	(0X7C0,	"Elf32_Rel");
	set_cmt	(0X7C8,	"R_ARM_JUMP_SLOT printf",	0);
	MakeStruct	(0X7C8,	"Elf32_Rel");
	set_cmt	(0X7D0,	"R_ARM_JUMP_SLOT fprintf",	0);
	MakeStruct	(0X7D0,	"Elf32_Rel");
	set_cmt	(0X7D8,	"R_ARM_JUMP_SLOT exit",	0);
	MakeStruct	(0X7D8,	"Elf32_Rel");
	set_cmt	(0X7E0,	"R_ARM_JUMP_SLOT fputs",	0);
	MakeStruct	(0X7E0,	"Elf32_Rel");
	set_cmt	(0X7E8,	"R_ARM_JUMP_SLOT fopen",	0);
	MakeStruct	(0X7E8,	"Elf32_Rel");
	set_cmt	(0X7F0,	"R_ARM_JUMP_SLOT fread",	0);
	MakeStruct	(0X7F0,	"Elf32_Rel");
	set_cmt	(0X7F8,	"R_ARM_JUMP_SLOT fclose",	0);
	MakeStruct	(0X7F8,	"Elf32_Rel");
	set_cmt	(0X800,	"R_ARM_JUMP_SLOT strcmp",	0);
	MakeStruct	(0X800,	"Elf32_Rel");
	set_cmt	(0X808,	"R_ARM_JUMP_SLOT __stack_chk_fail",	0);
	MakeStruct	(0X808,	"Elf32_Rel");
	set_cmt	(0X810,	"R_ARM_JUMP_SLOT memset",	0);
	MakeStruct	(0X810,	"Elf32_Rel");
	set_cmt	(0X818,	"R_ARM_JUMP_SLOT strncpy",	0);
	MakeStruct	(0X818,	"Elf32_Rel");
	set_cmt	(0X820,	"R_ARM_JUMP_SLOT memcpy",	0);
	MakeStruct	(0X820,	"Elf32_Rel");
	set_cmt	(0X828,	"R_ARM_JUMP_SLOT memcmp",	0);
	MakeStruct	(0X828,	"Elf32_Rel");
	set_cmt	(0X830,	"R_ARM_JUMP_SLOT malloc",	0);
	MakeStruct	(0X830,	"Elf32_Rel");
	set_cmt	(0X838,	"R_ARM_JUMP_SLOT fwrite",	0);
	MakeStruct	(0X838,	"Elf32_Rel");
	set_cmt	(0X840,	"R_ARM_JUMP_SLOT free",	0);
	MakeStruct	(0X840,	"Elf32_Rel");
	set_cmt	(0X848,	"R_ARM_JUMP_SLOT system",	0);
	MakeStruct	(0X848,	"Elf32_Rel");
	set_cmt	(0X850,	"R_ARM_JUMP_SLOT __memcpy_chk",	0);
	MakeStruct	(0X850,	"Elf32_Rel");
	set_cmt	(0X858,	"R_ARM_JUMP_SLOT strstr",	0);
	MakeStruct	(0X858,	"Elf32_Rel");
	set_cmt	(0X860,	"R_ARM_JUMP_SLOT strchr",	0);
	MakeStruct	(0X860,	"Elf32_Rel");
	set_cmt	(0X868,	"R_ARM_JUMP_SLOT __aeabi_llsr",	0);
	MakeStruct	(0X868,	"Elf32_Rel");
	create_insn	(0X870);
	create_dword	(x=0X880);
	op_plain_offset	(x,	0,	0X880);
	op_plain_offset	(x,	128,	0X880);
	create_insn	(x=0X884);
	op_hex		(x,	1);
	set_name	(0X884,	"__libc_init");
	create_insn	(x=0X888);
	op_hex		(x,	1);
	create_insn	(x=0X88C);
	op_plain_offset	(x,	1,	0X788C);
	op_plain_offset	(x,	129,	0X788C);
	create_insn	(x=0X890);
	op_hex		(x,	1);
	set_name	(0X890,	"__cxa_atexit");
	create_insn	(x=0X894);
	op_hex		(x,	1);
	create_insn	(x=0X898);
	op_plain_offset	(x,	1,	0X7898);
	op_plain_offset	(x,	129,	0X7898);
	create_insn	(x=0X89C);
	op_hex		(x,	1);
	set_name	(0X89C,	"getopt_long");
	create_insn	(x=0X8A0);
	op_hex		(x,	1);
	create_insn	(x=0X8A4);
	op_plain_offset	(x,	1,	0X78A4);
	op_plain_offset	(x,	129,	0X78A4);
	create_insn	(x=0X8A8);
	op_hex		(x,	1);
	set_name	(0X8A8,	"printf");
	create_insn	(x=0X8AC);
	op_hex		(x,	1);
	create_insn	(x=0X8B0);
	op_plain_offset	(x,	1,	0X78B0);
	op_plain_offset	(x,	129,	0X78B0);
	create_insn	(x=0X8B4);
	op_hex		(x,	1);
	set_name	(0X8B4,	"fprintf");
	create_insn	(x=0X8B8);
	op_hex		(x,	1);
	create_insn	(x=0X8BC);
	op_plain_offset	(x,	1,	0X78BC);
	op_plain_offset	(x,	129,	0X78BC);
	create_insn	(x=0X8C0);
	op_hex		(x,	1);
	set_name	(0X8C0,	"exit");
	create_insn	(x=0X8C4);
	op_hex		(x,	1);
	create_insn	(x=0X8C8);
	op_plain_offset	(x,	1,	0X78C8);
	op_plain_offset	(x,	129,	0X78C8);
	create_insn	(x=0X8CC);
	op_hex		(x,	1);
	set_name	(0X8CC,	"fputs");
	create_insn	(x=0X8D0);
	op_hex		(x,	1);
	create_insn	(x=0X8D4);
	op_plain_offset	(x,	1,	0X78D4);
	op_plain_offset	(x,	129,	0X78D4);
	create_insn	(x=0X8D8);
	op_hex		(x,	1);
	set_name	(0X8D8,	"fopen");
	create_insn	(x=0X8DC);
	op_hex		(x,	1);
	create_insn	(x=0X8E0);
	op_plain_offset	(x,	1,	0X78E0);
	op_plain_offset	(x,	129,	0X78E0);
	create_insn	(x=0X8E4);
	op_hex		(x,	1);
	set_name	(0X8E4,	"fread");
	create_insn	(x=0X8E8);
	op_hex		(x,	1);
	create_insn	(x=0X8EC);
	op_plain_offset	(x,	1,	0X78EC);
	op_plain_offset	(x,	129,	0X78EC);
	create_insn	(x=0X8F0);
	op_hex		(x,	1);
	set_name	(0X8F0,	"fclose");
	create_insn	(x=0X8F4);
	op_hex		(x,	1);
	create_insn	(x=0X8F8);
	op_plain_offset	(x,	1,	0X78F8);
	op_plain_offset	(x,	129,	0X78F8);
	create_insn	(x=0X8FC);
	op_hex		(x,	1);
	set_name	(0X8FC,	"strcmp");
	create_insn	(x=0X900);
	op_hex		(x,	1);
	create_insn	(x=0X904);
	op_plain_offset	(x,	1,	0X7904);
	op_plain_offset	(x,	129,	0X7904);
	create_insn	(x=0X908);
	op_hex		(x,	1);
	set_name	(0X908,	"__stack_chk_fail");
	create_insn	(x=0X90C);
	op_hex		(x,	1);
	create_insn	(x=0X910);
	op_plain_offset	(x,	1,	0X7910);
	op_plain_offset	(x,	129,	0X7910);
	create_insn	(x=0X914);
	op_hex		(x,	1);
	set_name	(0X914,	"memset");
	create_insn	(x=0X918);
	op_hex		(x,	1);
	create_insn	(x=0X91C);
	op_plain_offset	(x,	1,	0X791C);
	op_plain_offset	(x,	129,	0X791C);
	create_insn	(x=0X920);
	op_hex		(x,	1);
	set_name	(0X920,	"strncpy");
	create_insn	(x=0X924);
	op_hex		(x,	1);
	create_insn	(x=0X928);
	op_plain_offset	(x,	1,	0X7928);
	op_plain_offset	(x,	129,	0X7928);
	create_insn	(x=0X92C);
	op_hex		(x,	1);
	set_name	(0X92C,	"memcpy");
	create_insn	(x=0X930);
	op_hex		(x,	1);
	create_insn	(x=0X934);
	op_plain_offset	(x,	1,	0X7934);
	op_plain_offset	(x,	129,	0X7934);
	create_insn	(x=0X938);
	op_hex		(x,	1);
	set_name	(0X938,	"memcmp");
	create_insn	(x=0X93C);
	op_hex		(x,	1);
	create_insn	(x=0X940);
	op_plain_offset	(x,	1,	0X7940);
	op_plain_offset	(x,	129,	0X7940);
	create_insn	(x=0X944);
	op_hex		(x,	1);
	set_name	(0X944,	"malloc");
	create_insn	(x=0X948);
	op_hex		(x,	1);
	create_insn	(x=0X94C);
	op_plain_offset	(x,	1,	0X794C);
	op_plain_offset	(x,	129,	0X794C);
	create_insn	(x=0X950);
	op_hex		(x,	1);
	set_name	(0X950,	"fwrite");
	create_insn	(x=0X954);
	op_hex		(x,	1);
	create_insn	(x=0X958);
	op_plain_offset	(x,	1,	0X7958);
	op_plain_offset	(x,	129,	0X7958);
	create_insn	(x=0X95C);
	op_hex		(x,	1);
	set_name	(0X95C,	"free");
	create_insn	(x=0X960);
	op_hex		(x,	1);
	create_insn	(x=0X964);
	op_plain_offset	(x,	1,	0X7964);
	op_plain_offset	(x,	129,	0X7964);
	create_insn	(x=0X968);
	op_hex		(x,	1);
	set_name	(0X968,	"system");
	create_insn	(x=0X96C);
	op_hex		(x,	1);
	create_insn	(x=0X970);
	op_plain_offset	(x,	1,	0X7970);
	op_plain_offset	(x,	129,	0X7970);
	create_insn	(x=0X974);
	op_hex		(x,	1);
	set_name	(0X974,	"__memcpy_chk");
	create_insn	(x=0X978);
	op_hex		(x,	1);
	create_insn	(x=0X97C);
	op_plain_offset	(x,	1,	0X797C);
	op_plain_offset	(x,	129,	0X797C);
	create_insn	(x=0X980);
	op_hex		(x,	1);
	set_name	(0X980,	"strstr");
	create_insn	(x=0X984);
	op_hex		(x,	1);
	create_insn	(x=0X988);
	op_plain_offset	(x,	1,	0X7988);
	op_plain_offset	(x,	129,	0X7988);
	create_insn	(x=0X98C);
	op_hex		(x,	1);
	set_name	(0X98C,	"strchr");
	create_insn	(x=0X990);
	op_hex		(x,	1);
	create_insn	(x=0X994);
	op_plain_offset	(x,	1,	0X7994);
	op_plain_offset	(x,	129,	0X7994);
	create_insn	(x=0X998);
	op_hex		(x,	1);
	set_name	(0X998,	"__aeabi_llsr");
	create_insn	(x=0X99C);
	op_hex		(x,	1);
	create_insn	(x=0X9A0);
	op_plain_offset	(x,	1,	0X79A0);
	op_plain_offset	(x,	129,	0X79A0);
	make_array	(0X9A4,	0X4);
	create_insn	(0X9A8);
	set_name	(0X9A8,	"start");
	create_insn	(x=0X9C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X9D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X9DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X9E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X9EC);
	op_stkvar	(x,	1);
	set_cmt	(0X9F0,	"raw_args",	0);
	create_insn	(x=0X9F0);
	op_stkvar	(x,	1);
	set_cmt	(0X9F4,	"onexit",	0);
	set_cmt	(0XA00,	"slingshot",	0);
	set_cmt	(0XA04,	"structors",	0);
	create_dword	(x=0XA0C);
	op_plain_offset	(x,	0,	0X9C0);
	op_plain_offset	(x,	128,	0X9C0);
	create_dword	(x=0XA10);
	op_plain_offset	(x,	0,	0X7F94);
	op_plain_offset	(x,	128,	0X7F94);
	create_dword	(x=0XA14);
	op_plain_offset	(x,	0,	0X7F94);
	op_plain_offset	(x,	128,	0X7F94);
	create_dword	(x=0XA18);
	op_plain_offset	(x,	0,	0X7F94);
	op_plain_offset	(x,	128,	0X7F94);
	create_dword	(x=0XA1C);
	op_plain_offset	(x,	0,	0X7F94);
	op_plain_offset	(x,	128,	0X7F94);
	create_insn	(0XA20);
	create_dword	(x=0XA58);
	op_plain_offset	(x,	0,	0XA44);
	op_plain_offset	(x,	128,	0XA44);
	create_insn	(0XA5C);
	set_name	(0XA5C,	"main");
	create_insn	(x=0XA7A);
	op_stkvar	(x,	1);
	set_cmt	(0XA88,	"switch 13 cases ",	0);
	set_cmt	(0XA98,	"switch jump",	0);
	set_cmt	(0XA9C,	"jump table for switch statement",	0);
	create_byte	(0XA9C);
	set_name	(0XA9C,	"jpt_A98");
	create_byte	(0XA9D);
	create_byte	(0XA9E);
	create_byte	(0XA9F);
	create_byte	(0XAA0);
	create_byte	(0XAA1);
	create_byte	(0XAA2);
	create_byte	(0XAA3);
	create_byte	(0XAA4);
	create_byte	(0XAA5);
	create_byte	(0XAA6);
	create_byte	(0XAA7);
	create_byte	(0XAA8);
	set_cmt	(0XAAA,	"jumptable 00000A98 case 104",	1);
	create_insn	(0XAAA);
	set_cmt	(0XAB8,	"jumptable 00000A98 case 110",	1);
	create_insn	(0XAB8);
	set_cmt	(0XAC0,	"jumptable 00000A98 case 99",	1);
	create_insn	(0XAC0);
	set_cmt	(0XACA,	"jumptable 00000A98 case 111",	1);
	create_insn	(0XACA);
	set_cmt	(0XAD0,	"jumptable 00000A98 default case",	1);
	create_insn	(0XAD0);
	set_name	(0XAD0,	"def_A98");
	set_cmt	(0XAD8,	"FILE *",	0);
	set_cmt	(0XAE8,	"int",	0);
	create_insn	(0XAF0);
	set_cmt	(0XB02,	"FILE *",	0);
	create_insn	(0XB0E);
	set_cmt	(0XB28,	"FILE *",	0);
	create_insn	(0XB34);
	set_cmt	(0XB38,	"chunk_str",	0);
	create_insn	(0XB4E);
	set_cmt	(0XB50,	"a1",	0);
	set_cmt	(0XB54,	"ifname",	0);
	set_cmt	(0XB56,	"a3",	0);
	set_cmt	(0XB5A,	"ofname",	0);
	create_insn	(0XB72);
	make_array	(0XB82,	0X2);
	create_dword	(x=0XB84);
	op_plain_offset	(x,	0,	0XA74);
	op_plain_offset	(x,	128,	0XA74);
	create_dword	(x=0XB88);
	op_plain_offset	(x,	0,	0XA76);
	op_plain_offset	(x,	128,	0XA76);
	create_dword	(x=0XB8C);
	op_plain_offset	(x,	0,	0XA78);
	op_plain_offset	(x,	128,	0XA78);
	create_dword	(x=0XB90);
	op_plain_offset	(x,	0,	0XA7A);
	op_plain_offset	(x,	128,	0XA7A);
	create_dword	(x=0XB94);
	op_plain_offset	(x,	0,	0X7F94);
	op_plain_offset	(x,	128,	0X7F94);
	create_dword	(x=0XB98);
	op_plain_offset	(x,	0,	0XAB2);
	op_plain_offset	(x,	128,	0XAB2);
	create_dword	(x=0XB9C);
	op_plain_offset	(x,	0,	0XAC0);
	op_plain_offset	(x,	128,	0XAC0);
	create_dword	(x=0XBA0);
	op_plain_offset	(x,	0,	0XAC8);
	op_plain_offset	(x,	128,	0XAC8);
	create_dword	(x=0XBA4);
	op_plain_offset	(x,	0,	0X7F94);
	op_plain_offset	(x,	128,	0X7F94);
	create_dword	(x=0XBA8);
	op_plain_offset	(x,	0,	0XADA);
	op_plain_offset	(x,	128,	0XADA);
	create_dword	(x=0XBAC);
	op_plain_offset	(x,	0,	0XAE4);
	op_plain_offset	(x,	128,	0XAE4);
	create_dword	(x=0XBB0);
	op_plain_offset	(x,	0,	0X7F94);
	op_plain_offset	(x,	128,	0X7F94);
	create_dword	(x=0XBB4);
	op_plain_offset	(x,	0,	0XB04);
	op_plain_offset	(x,	128,	0XB04);
	create_dword	(x=0XBB8);
	op_plain_offset	(x,	0,	0XB0E);
	op_plain_offset	(x,	128,	0XB0E);
	create_dword	(x=0XBBC);
	op_plain_offset	(x,	0,	0XB16);
	op_plain_offset	(x,	128,	0XB16);
	create_dword	(x=0XBC0);
	op_plain_offset	(x,	0,	0XB1E);
	op_plain_offset	(x,	128,	0XB1E);
	create_dword	(x=0XBC4);
	op_plain_offset	(x,	0,	0XB2A);
	op_plain_offset	(x,	128,	0XB2A);
	create_dword	(x=0XBC8);
	op_plain_offset	(x,	0,	0XB34);
	op_plain_offset	(x,	128,	0XB34);
	create_dword	(x=0XBCC);
	op_plain_offset	(x,	0,	0XB3A);
	op_plain_offset	(x,	128,	0XB3A);
	create_dword	(x=0XBD0);
	op_plain_offset	(x,	0,	0XB4E);
	op_plain_offset	(x,	128,	0XB4E);
	create_dword	(x=0XBD4);
	op_plain_offset	(x,	0,	0XB56);
	op_plain_offset	(x,	128,	0XB56);
	create_dword	(x=0XBD8);
	op_plain_offset	(x,	0,	0XB6E);
	op_plain_offset	(x,	128,	0XB6E);
	create_dword	(x=0XBDC);
	op_plain_offset	(x,	0,	0XB7A);
	op_plain_offset	(x,	128,	0XB7A);
	create_insn	(0XBE0);
	set_name	(0XBE0,	"read_file_to_buf");
	set_cmt	(0XBE8,	"char *",	0);
	set_cmt	(0XBEA,	"char *",	0);
	set_cmt	(0XC04,	"ptr",	0);
	create_insn	(0XC04);
	set_cmt	(0XC06,	"size",	0);
	set_cmt	(0XC08,	"count",	0);
	set_cmt	(0XC0A,	"stream",	0);
	set_cmt	(0XC12,	"FILE *",	0);
	create_dword	(x=0XC1C);
	op_plain_offset	(x,	0,	0XBEC);
	op_plain_offset	(x,	128,	0XBEC);
	create_dword	(x=0XC20);
	op_plain_offset	(x,	0,	0XBFE);
	op_plain_offset	(x,	128,	0XBFE);
	create_insn	(0XC24);
	set_name	(0XC24,	"chunk_id_select");
	create_insn	(x=0XC2A);
	op_stkvar	(x,	1);
	create_insn	(x=0XC30);
	op_stkvar	(x,	1);
	create_insn	(x=0XC34);
	op_stkvar	(x,	1);
	create_insn	(0XC40);
	create_insn	(0XC44);
	set_name	(0XC44,	"hexatoi_char");
	create_insn	(0XC52);
	create_insn	(0XC5E);
	create_insn	(0XC6A);
	create_insn	(0XC70);
	set_name	(0XC70,	"str_to_bytes");
	create_insn	(0XC7E);
	set_cmt	(0XC84,	"hexchr",	0);
	set_cmt	(0XC9E,	"hexchr",	0);
	create_insn	(0XCB0);
	make_array	(0XCBA,	0X2);
	create_insn	(0XCBC);
	set_name	(0XCBC,	"dji_image_verify_header");
	create_insn	(x=0XCD4);
	op_stkvar	(x,	1);
	create_insn	(x=0XCDC);
	op_stkvar	(x,	1);
	create_insn	(0XCFA);
	set_cmt	(0XCFC,	"char *",	0);
	set_cmt	(0XD00,	"char *",	0);
	set_cmt	(0XD1C,	"a1",	0);
	create_insn	(0XD1C);
	set_cmt	(0XD1E,	"a2",	0);
	create_insn	(x=0XD1E);
	op_stkvar	(x,	1);
	set_cmt	(0XD36,	"len",	0);
	create_insn	(0XD36);
	set_cmt	(0XD38,	"digest",	0);
	create_insn	(x=0XD38);
	op_stkvar	(x,	1);
	set_cmt	(0XD3A,	"data",	0);
	set_cmt	(0XD42,	"hash_len",	0);
	create_insn	(x=0XD42);
	op_stkvar	(x,	1);
	set_cmt	(0XD44,	"key",	0);
	set_cmt	(0XD46,	"signatr",	0);
	set_cmt	(0XD48,	"sig_len",	0);
	set_cmt	(0XD4C,	"hash",	0);
	create_insn	(x=0XD4C);
	op_stkvar	(x,	1);
	create_insn	(0XD66);
	create_insn	(x=0XD6C);
	op_stkvar	(x,	1);
	create_insn	(0XD78);
	make_array	(0XD7E,	0X2);
	create_dword	(x=0XD80);
	op_plain_offset	(x,	0,	0XCCC);
	op_plain_offset	(x,	128,	0XCCC);
	create_dword	(x=0XD84);
	op_plain_offset	(x,	0,	0X7F94);
	op_plain_offset	(x,	128,	0X7F94);
	create_dword	(x=0XD88);
	op_plain_offset	(x,	0,	0XCF6);
	op_plain_offset	(x,	128,	0XCF6);
	create_dword	(x=0XD8C);
	op_plain_offset	(x,	0,	0XCF8);
	op_plain_offset	(x,	128,	0XCF8);
	create_dword	(x=0XD90);
	op_plain_offset	(x,	0,	0XD10);
	op_plain_offset	(x,	128,	0XD10);
	create_dword	(x=0XD94);
	op_plain_offset	(x,	0,	0XD12);
	op_plain_offset	(x,	128,	0XD12);
	create_dword	(x=0XD98);
	op_plain_offset	(x,	0,	0XD30);
	op_plain_offset	(x,	128,	0XD30);
	create_dword	(x=0XD9C);
	op_plain_offset	(x,	0,	0XD32);
	op_plain_offset	(x,	128,	0XD32);
	create_dword	(x=0XDA0);
	op_plain_offset	(x,	0,	0XD5C);
	op_plain_offset	(x,	128,	0XD5C);
	create_dword	(x=0XDA4);
	op_plain_offset	(x,	0,	0XD5E);
	op_plain_offset	(x,	128,	0XD5E);
	create_insn	(0XDA8);
	set_name	(0XDA8,	"dji_image_decrypt_scram_key");
	create_insn	(x=0XDB8);
	op_stkvar	(x,	1);
	set_cmt	(0XDC0,	"void *",	0);
	set_cmt	(0XDC2,	"int",	0);
	set_cmt	(0XDC4,	"size_t",	0);
	create_insn	(x=0XDC6);
	op_stkvar	(x,	1);
	create_insn	(x=0XDC8);
	op_stkvar	(x,	1);
	set_cmt	(0XDCE,	"a1",	0);
	set_cmt	(0XDD0,	"a2",	0);
	create_insn	(x=0XDD0);
	op_stkvar	(x,	1);
	create_insn	(x=0XDEE);
	op_stkvar	(x,	1);
	set_cmt	(0XDF0,	"ctx",	0);
	create_insn	(x=0XDF0);
	op_stkvar	(x,	1);
	set_cmt	(0XE10,	"enclen",	0);
	create_insn	(0XE10);
	set_cmt	(0XE12,	"aesctx",	0);
	set_cmt	(0XE16,	"encbuf",	0);
	set_cmt	(0XE1A,	"outbuf",	0);
	create_insn	(x=0XE1A);
	op_stkvar	(x,	1);
	set_cmt	(0XE1C,	"iv",	0);
	create_insn	(x=0XE1C);
	op_stkvar	(x,	1);
	set_cmt	(0XE1E,	"a6",	0);
	create_insn	(x=0XE1E);
	op_stkvar	(x,	1);
	set_cmt	(0XE24,	"enc_key_bits",	0);
	set_cmt	(0XE26,	"enc_key",	0);
	create_insn	(x=0XE26);
	op_stkvar	(x,	1);
	set_cmt	(0XE28,	"ctx",	0);
	create_insn	(x=0XE4A);
	op_stkvar	(x,	1);
	create_insn	(0XE56);
	create_dword	(x=0XE5C);
	op_plain_offset	(x,	0,	0XDB4);
	op_plain_offset	(x,	128,	0XDB4);
	create_dword	(x=0XE60);
	op_plain_offset	(x,	0,	0X7F94);
	op_plain_offset	(x,	128,	0X7F94);
	create_dword	(x=0XE64);
	op_plain_offset	(x,	0,	0XDE0);
	op_plain_offset	(x,	128,	0XDE0);
	create_dword	(x=0XE68);
	op_plain_offset	(x,	0,	0XDE2);
	op_plain_offset	(x,	128,	0XDE2);
	create_dword	(x=0XE6C);
	op_plain_offset	(x,	0,	0XE04);
	op_plain_offset	(x,	128,	0XE04);
	create_dword	(x=0XE70);
	op_plain_offset	(x,	0,	0XE06);
	op_plain_offset	(x,	128,	0XE06);
	create_dword	(x=0XE74);
	op_plain_offset	(x,	0,	0XE3E);
	op_plain_offset	(x,	128,	0XE3E);
	create_dword	(x=0XE78);
	op_plain_offset	(x,	0,	0XE40);
	op_plain_offset	(x,	128,	0XE40);
	create_insn	(0XE7C);
	set_name	(0XE7C,	"dji_image_verify_init");
	set_cmt	(0XE94,	"void *",	0);
	create_insn	(x=0XE94);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0XE9A,	"int",	0);
	create_insn	(0XE9A);
	set_cmt	(0XE9C,	"size_t",	0);
	create_insn	(x=0XE9C);
	op_stroff	(x,	1,	GetStrucIdByName("ImageVerifyState"),	0);
	set_cmt	(0XEA4,	"ctx",	0);
	create_insn	(x=0XEA4);
	op_stroff	(x,	1,	GetStrucIdByName("ImageVerifyState"),	0);
	set_cmt	(0XEAC,	"char *",	0);
	set_cmt	(0XEAE,	"char *",	0);
	set_cmt	(0XEB0,	"size_t",	0);
	create_dword	(x=0XEBC);
	op_plain_offset	(x,	0,	0XE92);
	op_plain_offset	(x,	128,	0XE92);
	create_dword	(x=0XEC0);
	op_plain_offset	(x,	0,	0XE90);
	op_plain_offset	(x,	128,	0XE90);
	create_insn	(0XEC4);
	set_name	(0XEC4,	"dji_image_verify_update");
	create_insn	(x=0XEC8);
	op_hex		(x,	1);
	create_insn	(x=0XED6);
	op_stkvar	(x,	1);
	create_insn	(0XEEE);
	set_cmt	(0XEF8,	"ihdr",	0);
	set_cmt	(0XEFA,	"buf_len",	0);
	set_cmt	(0XEFC,	"iname",	0);
	create_insn	(0XF18);
	set_cmt	(0XF1C,	"void *",	0);
	set_cmt	(0XF1E,	"void *",	0);
	set_cmt	(0XF20,	"size_t",	0);
	create_insn	(0XF40);
	create_insn	(0XF4E);
	create_insn	(0XF64);
	create_insn	(x=0XF66);
	op_hex		(x,	1);
	set_cmt	(0XF84,	"void *",	0);
	create_insn	(0XF84);
	set_cmt	(0XF86,	"void *",	0);
	set_cmt	(0XF88,	"size_t",	0);
	create_insn	(0XF96);
	create_insn	(0XFB6);
	set_cmt	(0XFC2,	"ctx",	0);
	set_cmt	(0XFC6,	"data",	0);
	set_cmt	(0XFC8,	"len",	0);
	create_insn	(0XFF2);
	create_insn	(x=0XFF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1008);
	op_hex		(x,	1);
	set_cmt	(0X100C,	"int",	0);
	create_insn	(x=0X1010);
	op_hex		(x,	1);
	create_insn	(x=0X1018);
	op_hex		(x,	1);
	create_insn	(x=0X101E);
	op_stkvar	(x,	1);
	set_cmt	(0X102A,	"void *",	0);
	create_insn	(x=0X102A);
	op_stkvar	(x,	1);
	set_cmt	(0X102C,	"size_t",	0);
	create_insn	(0X1034);
	set_cmt	(0X1036,	"void *",	0);
	set_cmt	(0X1038,	"void *",	0);
	set_cmt	(0X103A,	"size_t",	0);
	create_insn	(x=0X1042);
	op_stkvar	(x,	1);
	set_cmt	(0X1046,	"iv",	0);
	create_insn	(x=0X1046);
	op_stkvar	(x,	1);
	set_cmt	(0X1048,	"a6",	0);
	create_insn	(x=0X1048);
	op_stkvar	(x,	1);
	set_cmt	(0X104A,	"outbuf",	0);
	set_cmt	(0X104C,	"encbuf",	0);
	set_cmt	(0X104E,	"enclen",	0);
	set_cmt	(0X1050,	"aesctx",	0);
	create_insn	(x=0X1050);
	op_stkvar	(x,	1);
	create_insn	(x=0X1056);
	op_stkvar	(x,	1);
	create_insn	(0X107A);
	create_insn	(0X10A0);
	create_insn	(0X10AC);
	create_insn	(x=0X10B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X10BC);
	op_stkvar	(x,	1);
	create_insn	(0X10C4);
	create_insn	(0X10C8);
	create_insn	(0X10CC);
	set_cmt	(0X10D2,	"imghdr",	0);
	set_cmt	(0X10D4,	"par2",	0);
	create_insn	(0X10E4);
	create_dword	(x=0X10EC);
	op_plain_offset	(x,	0,	0XEEA);
	op_plain_offset	(x,	128,	0XEEA);
	create_dword	(x=0X10F0);
	op_plain_offset	(x,	0,	0XEE6);
	op_plain_offset	(x,	128,	0XEE6);
	create_dword	(x=0X10F4);
	op_plain_offset	(x,	0,	0XF14);
	op_plain_offset	(x,	128,	0XF14);
	create_dword	(x=0X10F8);
	op_plain_offset	(x,	0,	0XF12);
	op_plain_offset	(x,	128,	0XF12);
	create_dword	(x=0X10FC);
	op_plain_offset	(x,	0,	0XF78);
	op_plain_offset	(x,	128,	0XF78);
	create_dword	(x=0X1100);
	op_plain_offset	(x,	0,	0XF7A);
	op_plain_offset	(x,	128,	0XF7A);
	create_dword	(x=0X1104);
	op_plain_offset	(x,	0,	0XFAA);
	op_plain_offset	(x,	128,	0XFAA);
	create_dword	(x=0X1108);
	op_plain_offset	(x,	0,	0XFAC);
	op_plain_offset	(x,	128,	0XFAC);
	create_dword	(x=0X110C);
	op_plain_offset	(x,	0,	0XFEE);
	op_plain_offset	(x,	128,	0XFEE);
	create_dword	(x=0X1110);
	op_plain_offset	(x,	0,	0XFF0);
	op_plain_offset	(x,	128,	0XFF0);
	create_dword	(x=0X1114);
	op_plain_offset	(x,	0,	0X1096);
	op_plain_offset	(x,	128,	0X1096);
	create_dword	(x=0X1118);
	op_plain_offset	(x,	0,	0X1098);
	op_plain_offset	(x,	128,	0X1098);
	create_insn	(0X111C);
	set_name	(0X111C,	"dji_image_verify_final");
	create_insn	(0X113A);
	set_cmt	(0X115A,	"ctx",	0);
	create_insn	(x=0X115A);
	op_stroff	(x,	1,	GetStrucIdByName("ImageVerifyState"),	0);
	set_cmt	(0X1162,	"void *",	0);
	set_cmt	(0X1166,	"size_t",	0);
	create_dword	(x=0X1184);
	op_plain_offset	(x,	0,	0X1132);
	op_plain_offset	(x,	128,	0X1132);
	create_dword	(x=0X1188);
	op_plain_offset	(x,	0,	0X1130);
	op_plain_offset	(x,	128,	0X1130);
	create_dword	(x=0X118C);
	op_plain_offset	(x,	0,	0X1152);
	op_plain_offset	(x,	128,	0X1152);
	create_dword	(x=0X1190);
	op_plain_offset	(x,	0,	0X1150);
	op_plain_offset	(x,	128,	0X1150);
	create_dword	(x=0X1194);
	op_plain_offset	(x,	0,	0X1176);
	op_plain_offset	(x,	128,	0X1176);
	create_dword	(x=0X1198);
	op_plain_offset	(x,	0,	0X1178);
	op_plain_offset	(x,	128,	0X1178);
	create_insn	(0X119C);
	set_name	(0X119C,	"dji_image_verify_file");
	create_insn	(x=0X11B4);
	op_stkvar	(x,	1);
	set_cmt	(0X11BC,	"char *",	0);
	create_insn	(0X11DE);
	set_cmt	(0X11E2,	"char *",	0);
	create_insn	(0X1206);
	set_cmt	(0X1212,	"size_t",	0);
	create_insn	(x=0X1232);
	op_stkvar	(x,	1);
	set_cmt	(0X1236,	"vstate",	0);
	set_cmt	(0X1238,	"ifname",	0);
	set_cmt	(0X123A,	"a3",	0);
	set_cmt	(0X1250,	"count",	0);
	create_insn	(0X1250);
	set_cmt	(0X1252,	"ptr",	0);
	set_cmt	(0X1254,	"size",	0);
	set_cmt	(0X1256,	"stream",	0);
	set_cmt	(0X125C,	"inbuf_len",	0);
	set_cmt	(0X1260,	"outbuf_len",	0);
	create_insn	(x=0X1260);
	op_stkvar	(x,	1);
	set_cmt	(0X1262,	"inbuf",	0);
	set_cmt	(0X1264,	"vstate",	0);
	set_cmt	(0X1266,	"outbuf",	0);
	set_cmt	(0X1274,	"void *",	0);
	set_cmt	(0X1276,	"size_t",	0);
	set_cmt	(0X1278,	"size_t",	0);
	set_cmt	(0X127A,	"FILE *",	0);
	set_cmt	(0X1282,	"vstate",	0);
	create_insn	(0X1282);
	set_cmt	(0X128C,	"FILE *",	0);
	create_insn	(0X128C);
	set_cmt	(0X1294,	"void *",	0);
	create_insn	(x=0X129A);
	op_stkvar	(x,	1);
	set_cmt	(0X12AA,	"FILE *",	0);
	create_insn	(0X12AA);
	create_insn	(0X12B6);
	create_insn	(0X12BA);
	create_dword	(x=0X12C4);
	op_plain_offset	(x,	0,	0X11AC);
	op_plain_offset	(x,	128,	0X11AC);
	create_dword	(x=0X12C8);
	op_plain_offset	(x,	0,	0X7F94);
	op_plain_offset	(x,	128,	0X7F94);
	create_dword	(x=0X12CC);
	op_plain_offset	(x,	0,	0X11C0);
	op_plain_offset	(x,	128,	0X11C0);
	create_dword	(x=0X12D0);
	op_plain_offset	(x,	0,	0X11D0);
	op_plain_offset	(x,	128,	0X11D0);
	create_dword	(x=0X12D4);
	op_plain_offset	(x,	0,	0X11D2);
	op_plain_offset	(x,	128,	0X11D2);
	create_dword	(x=0X12D8);
	op_plain_offset	(x,	0,	0X11E8);
	op_plain_offset	(x,	128,	0X11E8);
	create_dword	(x=0X12DC);
	op_plain_offset	(x,	0,	0X11F8);
	op_plain_offset	(x,	128,	0X11F8);
	create_dword	(x=0X12E0);
	op_plain_offset	(x,	0,	0X11FA);
	op_plain_offset	(x,	128,	0X11FA);
	create_dword	(x=0X12E4);
	op_plain_offset	(x,	0,	0X1224);
	op_plain_offset	(x,	128,	0X1224);
	create_dword	(x=0X12E8);
	op_plain_offset	(x,	0,	0X1226);
	op_plain_offset	(x,	128,	0X1226);
	create_insn	(0X12EC);
	set_name	(0X12EC,	"dji_image_verify_auth_key");
	create_insn	(0X1318);
	create_insn	(0X1326);
	create_insn	(0X132E);
	create_insn	(0X1336);
	create_insn	(0X1342);
	create_insn	(0X134E);
	create_insn	(0X1358);
	make_array	(0X1366,	0X2);
	create_strlit	(0X1368,	0X136C);
	set_name	(0X1368,	"aRiek");
	create_strlit	(0X136C,	0X1370);
	set_name	(0X136C,	"aPrak");
	create_strlit	(0X1370,	0X1374);
	set_name	(0X1370,	"aPuek");
	create_dword	(x=0X1374);
	op_plain_offset	(x,	0,	0X12F8);
	op_plain_offset	(x,	128,	0X12F8);
	create_dword	(x=0X1378);
	op_plain_offset	(x,	0,	0X132E);
	op_plain_offset	(x,	128,	0X132E);
	create_dword	(x=0X137C);
	op_plain_offset	(x,	0,	0X1342);
	op_plain_offset	(x,	128,	0X1342);
	create_dword	(x=0X1380);
	op_plain_offset	(x,	0,	0X134E);
	op_plain_offset	(x,	128,	0X134E);
	create_dword	(x=0X1384);
	op_plain_offset	(x,	0,	0X1358);
	op_plain_offset	(x,	128,	0X1358);
	create_dword	(x=0X1388);
	op_plain_offset	(x,	0,	0X1362);
	op_plain_offset	(x,	128,	0X1362);
	create_insn	(0X138C);
	set_name	(0X138C,	"dji_derive_sym_key");
	create_insn	(x=0X13A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X13A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X13A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X13A8);
	op_stkvar	(x,	1);
	set_cmt	(0X13AA,	"int",	0);
	set_cmt	(0X13AC,	"size_t",	0);
	set_cmt	(0X13B0,	"void *",	0);
	create_insn	(x=0X13B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X13BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X13BC);
	op_stkvar	(x,	1);
	create_insn	(0X13D2);
	set_cmt	(0X13DC,	"data",	0);
	create_insn	(0X13DC);
	set_cmt	(0X13DE,	"len",	0);
	set_cmt	(0X13E0,	"digest",	0);
	set_cmt	(0X13E6,	"key",	0);
	set_cmt	(0X13E8,	"key_bits",	0);
	set_cmt	(0X13EA,	"ctx",	0);
	create_insn	(x=0X13EA);
	op_stkvar	(x,	1);
	create_insn	(0X1408);
	set_cmt	(0X140A,	"a6",	0);
	create_insn	(x=0X140A);
	op_stkvar	(x,	1);
	set_cmt	(0X140C,	"outbuf",	0);
	create_insn	(x=0X140C);
	op_stkvar	(x,	1);
	set_cmt	(0X140E,	"encbuf",	0);
	set_cmt	(0X1410,	"enclen",	0);
	set_cmt	(0X1412,	"aesctx",	0);
	create_insn	(x=0X1412);
	op_stkvar	(x,	1);
	set_cmt	(0X1414,	"iv",	0);
	create_insn	(x=0X1414);
	op_stkvar	(x,	1);
	set_cmt	(0X141C,	"void *",	0);
	set_cmt	(0X141E,	"void *",	0);
	create_insn	(x=0X141E);
	op_stkvar	(x,	1);
	create_insn	(x=0X142A);
	op_stkvar	(x,	1);
	create_insn	(0X1436);
	create_dword	(x=0X143C);
	op_plain_offset	(x,	0,	0X139C);
	op_plain_offset	(x,	128,	0X139C);
	create_dword	(x=0X1440);
	op_plain_offset	(x,	0,	0X7F94);
	op_plain_offset	(x,	128,	0X7F94);
	create_dword	(x=0X1444);
	op_plain_offset	(x,	0,	0X13FC);
	op_plain_offset	(x,	128,	0X13FC);
	create_dword	(x=0X1448);
	op_plain_offset	(x,	0,	0X13FE);
	op_plain_offset	(x,	128,	0X13FE);
	create_insn	(0X144C);
	set_name	(0X144C,	"derive_puek");
	set_cmt	(0X1460,	"size_t",	0);
	set_cmt	(0X1464,	"void *",	0);
	create_insn	(x=0X1466);
	op_stkvar	(x,	1);
	set_cmt	(0X1470,	"size_t",	0);
	set_cmt	(0X1476,	"void *",	0);
	create_insn	(x=0X1490);
	op_plain_offset	(x,	1,	0X845C);
	op_plain_offset	(x,	129,	0X845C);
	set_cmt	(0X1498,	"char *",	0);
	create_insn	(0X14B6);
	set_cmt	(0X14B8,	"int",	0);
	set_cmt	(0X14BA,	"char *",	0);
	set_cmt	(0X14C4,	"len",	0);
	set_cmt	(0X14C6,	"istr",	0);
	set_cmt	(0X14C8,	"obuf",	0);
	create_insn	(x=0X14C8);
	op_stkvar	(x,	1);
	create_insn	(0X14DE);
	create_insn	(x=0X14E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X14EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X14EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1508);
	op_stkvar	(x,	1);
	create_insn	(0X1514);
	set_cmt	(0X151A,	"outbuf",	0);
	set_cmt	(0X151C,	"max_len",	0);
	create_insn	(0X152E);
	create_insn	(0X1532);
	make_array	(0X1536,	0X2);
	create_dword	(x=0X1538);
	op_plain_offset	(x,	0,	0X1456);
	op_plain_offset	(x,	128,	0X1456);
	create_dword	(x=0X153C);
	op_plain_offset	(x,	0,	0X7F94);
	op_plain_offset	(x,	128,	0X7F94);
	create_dword	(x=0X1540);
	op_plain_offset	(x,	0,	0X1468);
	op_plain_offset	(x,	128,	0X1468);
	create_dword	(x=0X1544);
	op_plain_offset	(x,	0,	0X1462);
	op_plain_offset	(x,	128,	0X1462);
	create_dword	(x=0X1548);
	op_plain_offset	(x,	0,	0X147A);
	op_plain_offset	(x,	128,	0X147A);
	create_dword	(x=0X154C);
	op_plain_offset	(x,	0,	0X1478);
	op_plain_offset	(x,	128,	0X1478);
	create_dword	(x=0X1550);
	op_plain_offset	(x,	0,	0X1484);
	op_plain_offset	(x,	128,	0X1484);
	create_dword	(x=0X1554);
	op_plain_offset	(x,	0,	0X149C);
	op_plain_offset	(x,	128,	0X149C);
	create_dword	(x=0X1558);
	op_plain_offset	(x,	0,	0X149E);
	op_plain_offset	(x,	128,	0X149E);
	create_dword	(x=0X155C);
	op_plain_offset	(x,	0,	0X14AA);
	op_plain_offset	(x,	128,	0X14AA);
	create_dword	(x=0X1560);
	op_plain_offset	(x,	0,	0X14AC);
	op_plain_offset	(x,	128,	0X14AC);
	create_dword	(x=0X1564);
	op_plain_offset	(x,	0,	0X14DA);
	op_plain_offset	(x,	128,	0X14DA);
	create_dword	(x=0X1568);
	op_plain_offset	(x,	0,	0X14DC);
	op_plain_offset	(x,	128,	0X14DC);
	create_dword	(x=0X156C);
	op_plain_offset	(x,	0,	0X14E6);
	op_plain_offset	(x,	128,	0X14E6);
	create_dword	(x=0X1570);
	op_plain_offset	(x,	0,	0X14F0);
	op_plain_offset	(x,	128,	0X14F0);
	create_dword	(x=0X1574);
	op_plain_offset	(x,	0,	0X1502);
	op_plain_offset	(x,	128,	0X1502);
	create_dword	(x=0X1578);
	op_plain_offset	(x,	0,	0X1504);
	op_plain_offset	(x,	128,	0X1504);
	create_dword	(x=0X157C);
	op_plain_offset	(x,	0,	0X151C);
	op_plain_offset	(x,	128,	0X151C);
	create_dword	(x=0X1580);
	op_plain_offset	(x,	0,	0X1524);
	op_plain_offset	(x,	128,	0X1524);
	create_insn	(0X1584);
	set_name	(0X1584,	"SHA1_Transform");
	create_insn	(x=0X15BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X15F8);
	op_stkvar	(x,	1);
	create_insn	(0X1608);
	create_insn	(x=0X160E);
	op_stkvar	(x,	1);
	create_insn	(0X162C);
	create_insn	(0X163C);
	create_insn	(0X1654);
	create_insn	(x=0X1672);
	op_stkvar	(x,	1);
	make_array	(0X168E,	0X2);
	create_dword	(0X1690);
	create_dword	(0X1694);
	create_dword	(0X1698);
	create_dword	(0X169C);
	create_insn	(0X16A0);
	set_name	(0X16A0,	"SHA_init");
	create_dword	(0X16C8);
	create_dword	(0X16CC);
	create_dword	(0X16D0);
	create_dword	(x=0X16D4);
	op_plain_offset	(x,	0,	0X16AC);
	op_plain_offset	(x,	128,	0X16AC);
	create_insn	(0X16D8);
	set_name	(0X16D8,	"SHA_update");
	create_insn	(x=0X16DE);
	op_hex		(x,	1);
	create_insn	(0X16F4);
	set_cmt	(0X1702,	"ctx",	0);
	create_insn	(0X1710);
	set_name	(0X1710,	"SHA_final");
	set_cmt	(0X1728,	"data",	0);
	set_cmt	(0X172A,	"len",	0);
	set_cmt	(0X1742,	"ctx",	0);
	create_insn	(0X1742);
	set_cmt	(0X1744,	"data",	0);
	set_cmt	(0X1746,	"len",	0);
	create_insn	(x=0X176E);
	op_stkvar	(x,	1);
	set_cmt	(0X1772,	"len",	0);
	set_cmt	(0X1774,	"ctx",	0);
	set_cmt	(0X1776,	"data",	0);
	create_insn	(x=0X1776);
	op_stkvar	(x,	1);
	make_array	(0X17AE,	0X2);
	create_double	(0X17B0);
	create_dword	(x=0X17B8);
	op_plain_offset	(x,	0,	0X172C);
	op_plain_offset	(x,	128,	0X172C);
	create_dword	(x=0X17BC);
	op_plain_offset	(x,	0,	0X1742);
	op_plain_offset	(x,	128,	0X1742);
	create_insn	(0X17C0);
	set_name	(0X17C0,	"SHA_hash");
	set_cmt	(0X17D4,	"ctx",	0);
	create_insn	(x=0X17D6);
	op_stkvar	(x,	1);
	set_cmt	(0X17DC,	"data",	0);
	set_cmt	(0X17DE,	"len",	0);
	set_cmt	(0X17E0,	"ctx",	0);
	set_cmt	(0X17E6,	"ctx",	0);
	create_insn	(x=0X1800);
	op_stkvar	(x,	1);
	create_insn	(0X180E);
	make_array	(0X1812,	0X2);
	create_dword	(x=0X1814);
	op_plain_offset	(x,	0,	0X17CC);
	op_plain_offset	(x,	128,	0X17CC);
	create_dword	(x=0X1818);
	op_plain_offset	(x,	0,	0X7F94);
	op_plain_offset	(x,	128,	0X7F94);
	create_insn	(0X181C);
	set_name	(0X181C,	"SHA256_init");
	create_dword	(0X184C);
	create_dword	(0X1850);
	create_dword	(0X1854);
	create_dword	(0X1858);
	create_dword	(0X185C);
	create_dword	(0X1860);
	create_dword	(0X1864);
	create_dword	(0X1868);
	create_dword	(x=0X186C);
	op_plain_offset	(x,	0,	0X1824);
	op_plain_offset	(x,	128,	0X1824);
	create_insn	(0X1870);
	set_name	(0X1870,	"SHA256_update");
	create_insn	(x=0X1878);
	op_hex		(x,	1);
	create_insn	(x=0X1886);
	op_stkvar	(x,	1);
	create_insn	(x=0X188A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1896);
	op_stkvar	(x,	1);
	create_insn	(x=0X1898);
	op_stkvar	(x,	1);
	create_insn	(x=0X189C);
	op_stkvar	(x,	1);
	create_insn	(x=0X18A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X18B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X18DC);
	op_stkvar	(x,	1);
	create_insn	(x=0X18E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1928);
	op_stkvar	(x,	1);
	create_insn	(x=0X192E);
	op_stkvar	(x,	1);
	create_insn	(x=0X1930);
	op_stkvar	(x,	1);
	create_insn	(x=0X1932);
	op_stkvar	(x,	1);
	create_insn	(x=0X1934);
	op_stkvar	(x,	1);
	create_insn	(x=0X1936);
	op_stkvar	(x,	1);
	create_insn	(x=0X1938);
	op_stkvar	(x,	1);
	create_insn	(x=0X193A);
	op_stkvar	(x,	1);
	create_insn	(x=0X193C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1942);
	op_stkvar	(x,	1);
	create_insn	(x=0X1948);
	op_stkvar	(x,	1);
	create_insn	(x=0X194A);
	op_stkvar	(x,	1);
	create_insn	(0X1950);
	create_insn	(x=0X197A);
	op_stkvar	(x,	1);
	create_insn	(x=0X197C);
	op_stkvar	(x,	1);
	create_insn	(x=0X19AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X19AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X19BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X19C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X19C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X19C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X19D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X19D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X19D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X19E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X19E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X19EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1A00);
	op_stkvar	(x,	1);
	create_insn	(x=0X1A02);
	op_stkvar	(x,	1);
	create_dword	(x=0X1A10);
	op_plain_offset	(x,	0,	0X1890);
	op_plain_offset	(x,	128,	0X1890);
	make_array	(0X1A14,	0X4);
	create_insn	(0X1A18);
	set_name	(0X1A18,	"SHA256_final");
	set_cmt	(0X1A30,	"data",	0);
	set_cmt	(0X1A32,	"len",	0);
	set_cmt	(0X1A4A,	"ctx",	0);
	create_insn	(0X1A4A);
	set_cmt	(0X1A4C,	"data",	0);
	set_cmt	(0X1A4E,	"len",	0);
	create_insn	(x=0X1A76);
	op_stkvar	(x,	1);
	set_cmt	(0X1A7A,	"len",	0);
	set_cmt	(0X1A7C,	"ctx",	0);
	set_cmt	(0X1A7E,	"data",	0);
	create_insn	(x=0X1A7E);
	op_stkvar	(x,	1);
	create_dword	(0X1AB4);
	create_double	(0X1AB8);
	create_dword	(x=0X1AC0);
	op_plain_offset	(x,	0,	0X1A34);
	op_plain_offset	(x,	128,	0X1A34);
	create_dword	(x=0X1AC4);
	op_plain_offset	(x,	0,	0X1A4A);
	op_plain_offset	(x,	128,	0X1A4A);
	create_insn	(0X1AC8);
	set_name	(0X1AC8,	"SHA256_hash");
	set_cmt	(0X1ADC,	"ctx",	0);
	create_insn	(x=0X1ADE);
	op_stkvar	(x,	1);
	set_cmt	(0X1AE4,	"data",	0);
	set_cmt	(0X1AE6,	"len",	0);
	set_cmt	(0X1AE8,	"ctx",	0);
	set_cmt	(0X1AEE,	"ctx",	0);
	create_insn	(x=0X1B08);
	op_stkvar	(x,	1);
	create_insn	(0X1B16);
	make_array	(0X1B1A,	0X2);
	create_dword	(x=0X1B1C);
	op_plain_offset	(x,	0,	0X1AD4);
	op_plain_offset	(x,	128,	0X1AD4);
	create_dword	(x=0X1B20);
	op_plain_offset	(x,	0,	0X7F94);
	op_plain_offset	(x,	128,	0X7F94);
	create_insn	(0X1B24);
	set_name	(0X1B24,	"RSA_subM");
	create_insn	(0X1B2E);
	make_array	(0X1B54,	0X4);
	create_insn	(0X1B58);
	set_name	(0X1B58,	"RSA_montMul");
	create_insn	(x=0X1B62);
	op_stkvar	(x,	1);
	create_insn	(x=0X1B6A);
	op_stkvar	(x,	1);
	create_insn	(0X1B70);
	create_insn	(x=0X1B7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X1B86);
	op_stkvar	(x,	1);
	create_insn	(x=0X1B88);
	op_stkvar	(x,	1);
	create_insn	(x=0X1B8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1BB6);
	op_stkvar	(x,	1);
	create_insn	(0X1BC0);
	create_insn	(x=0X1BC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1BC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1BE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1BF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1C16);
	op_stkvar	(x,	1);
	create_insn	(x=0X1C18);
	op_stkvar	(x,	1);
	create_insn	(x=0X1C1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1C1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X1C2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X1C34);
	op_stkvar	(x,	1);
	set_cmt	(0X1C44,	"key",	0);
	set_cmt	(0X1C46,	"a",	0);
	create_insn	(x=0X1C4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1C50);
	op_stkvar	(x,	1);
	create_insn	(x=0X1C54);
	op_stkvar	(x,	1);
	create_dword	(0X1C64);
	create_double	(0X1C68);
	create_insn	(0X1C70);
	set_name	(0X1C70,	"RSA_verify");
	create_insn	(x=0X1C8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1C8E);
	op_stkvar	(x,	1);
	create_insn	(0X1C96);
	create_insn	(x=0X1CBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1CD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1D06);
	op_stkvar	(x,	1);
	set_cmt	(0X1D0A,	"inarr1",	0);
	set_cmt	(0X1D0C,	"outarr",	0);
	set_cmt	(0X1D0E,	"inarr3",	0);
	set_cmt	(0X1D10,	"inarr4",	0);
	set_cmt	(0X1D1C,	"inarr1",	0);
	set_cmt	(0X1D1E,	"outarr",	0);
	create_insn	(x=0X1D1E);
	op_stkvar	(x,	1);
	set_cmt	(0X1D20,	"inarr3",	0);
	set_cmt	(0X1D22,	"inarr4",	0);
	set_cmt	(0X1D28,	"inarr3",	0);
	create_insn	(x=0X1D28);
	op_stkvar	(x,	1);
	set_cmt	(0X1D2A,	"inarr1",	0);
	set_cmt	(0X1D2C,	"outarr",	0);
	set_cmt	(0X1D2E,	"inarr4",	0);
	set_cmt	(0X1D3A,	"inarr4",	0);
	set_cmt	(0X1D3C,	"inarr1",	0);
	set_cmt	(0X1D3E,	"outarr",	0);
	create_insn	(x=0X1D3E);
	op_stkvar	(x,	1);
	set_cmt	(0X1D40,	"inarr3",	0);
	create_insn	(x=0X1D46);
	op_stkvar	(x,	1);
	create_insn	(0X1D4C);
	set_cmt	(0X1D50,	"inarr3",	0);
	set_cmt	(0X1D52,	"inarr1",	0);
	set_cmt	(0X1D54,	"outarr",	0);
	create_insn	(x=0X1D54);
	op_stkvar	(x,	1);
	set_cmt	(0X1D56,	"inarr4",	0);
	set_cmt	(0X1D5E,	"inarr3",	0);
	create_insn	(x=0X1D5E);
	op_stkvar	(x,	1);
	set_cmt	(0X1D60,	"inarr4",	0);
	set_cmt	(0X1D62,	"inarr1",	0);
	set_cmt	(0X1D64,	"outarr",	0);
	create_insn	(x=0X1D64);
	op_stkvar	(x,	1);
	set_cmt	(0X1D6A,	"inarr4",	0);
	set_cmt	(0X1D6C,	"inarr1",	0);
	set_cmt	(0X1D6E,	"outarr",	0);
	create_insn	(x=0X1D6E);
	op_stkvar	(x,	1);
	set_cmt	(0X1D70,	"inarr3",	0);
	create_insn	(x=0X1D70);
	op_stkvar	(x,	1);
	create_insn	(x=0X1D76);
	op_stkvar	(x,	1);
	create_insn	(0X1D7C);
	create_insn	(0X1D8E);
	create_insn	(0X1DB0);
	create_insn	(x=0X1DB2);
	op_stkvar	(x,	1);
	create_insn	(0X1DBC);
	create_insn	(x=0X1DE2);
	op_stkvar	(x,	1);
	create_insn	(0X1DEA);
	set_cmt	(0X1E08,	"data",	0);
	create_insn	(x=0X1E08);
	op_stkvar	(x,	1);
	set_cmt	(0X1E0A,	"len",	0);
	set_cmt	(0X1E0E,	"digest",	0);
	set_cmt	(0X1E1A,	"data",	0);
	create_insn	(x=0X1E1A);
	op_stkvar	(x,	1);
	set_cmt	(0X1E1C,	"len",	0);
	set_cmt	(0X1E20,	"digest",	0);
	create_insn	(x=0X1E2C);
	op_stkvar	(x,	1);
	create_insn	(0X1E32);
	create_insn	(0X1E48);
	create_insn	(x=0X1E4A);
	op_stkvar	(x,	1);
	set_cmt	(0X1E56,	"key",	0);
	create_insn	(0X1E56);
	set_cmt	(0X1E58,	"a",	0);
	create_insn	(0X1E60);
	create_insn	(0X1E64);
	make_array	(0X1E6E,	0X2);
	create_dword	(x=0X1E70);
	op_plain_offset	(x,	0,	0X1C80);
	op_plain_offset	(x,	128,	0X1C80);
	create_dword	(x=0X1E74);
	op_plain_offset	(x,	0,	0X7F94);
	op_plain_offset	(x,	128,	0X7F94);
	create_dword	(x=0X1E78);
	op_plain_offset	(x,	0,	0X1E1A);
	op_plain_offset	(x,	128,	0X1E1A);
	create_dword	(x=0X1E7C);
	op_plain_offset	(x,	0,	0X1E2C);
	op_plain_offset	(x,	128,	0X1E2C);
	create_insn	(0X1E80);
	set_name	(0X1E80,	"AES_setkey_enc");
	create_insn	(0X1EA8);
	create_insn	(0X1EB0);
	create_insn	(x=0X1F40);
	op_hex		(x,	1);
	create_insn	(x=0X1F5C);
	op_hex		(x,	1);
	create_insn	(x=0X1F66);
	op_hex		(x,	1);
	create_insn	(0X1F88);
	create_insn	(0X1F8C);
	create_insn	(x=0X1FE2);
	op_hex		(x,	1);
	create_insn	(x=0X1FFE);
	op_hex		(x,	1);
	create_insn	(x=0X2008);
	op_hex		(x,	1);
	create_insn	(0X203A);
	create_insn	(x=0X2092);
	op_hex		(x,	1);
	create_insn	(x=0X20AE);
	op_hex		(x,	1);
	create_insn	(x=0X20BC);
	op_hex		(x,	1);
	create_insn	(x=0X20EA);
	op_hex		(x,	1);
	create_insn	(x=0X2106);
	op_hex		(x,	1);
	create_insn	(x=0X2112);
	op_hex		(x,	1);
	create_insn	(0X2134);
	create_insn	(0X213A);
	create_dword	(x=0X2140);
	op_plain_offset	(x,	0,	0X1F2E);
	op_plain_offset	(x,	128,	0X1F2E);
	create_dword	(x=0X2144);
	op_plain_offset	(x,	0,	0X1F30);
	op_plain_offset	(x,	128,	0X1F30);
	create_dword	(x=0X2148);
	op_plain_offset	(x,	0,	0X1FD0);
	op_plain_offset	(x,	128,	0X1FD0);
	create_dword	(x=0X214C);
	op_plain_offset	(x,	0,	0X1FD2);
	op_plain_offset	(x,	128,	0X1FD2);
	create_dword	(x=0X2150);
	op_plain_offset	(x,	0,	0X2080);
	op_plain_offset	(x,	128,	0X2080);
	create_dword	(x=0X2154);
	op_plain_offset	(x,	0,	0X2082);
	op_plain_offset	(x,	128,	0X2082);
	create_insn	(0X2158);
	set_name	(0X2158,	"AES_key_set");
	create_insn	(0X217A);
	create_insn	(0X21D0);
	make_array	(0X22E6,	0X2);
	create_dword	(x=0X22E8);
	op_plain_offset	(x,	0,	0X21C8);
	op_plain_offset	(x,	128,	0X21C8);
	create_dword	(x=0X22EC);
	op_plain_offset	(x,	0,	0X21CA);
	op_plain_offset	(x,	128,	0X21CA);
	create_dword	(x=0X22F0);
	op_plain_offset	(x,	0,	0X21CC);
	op_plain_offset	(x,	128,	0X21CC);
	create_dword	(x=0X22F4);
	op_plain_offset	(x,	0,	0X21CE);
	op_plain_offset	(x,	128,	0X21CE);
	create_dword	(x=0X22F8);
	op_plain_offset	(x,	0,	0X21D0);
	op_plain_offset	(x,	128,	0X21D0);
	create_insn	(0X22FC);
	set_name	(0X22FC,	"AES_sub_22FC");
	create_insn	(x=0X235E);
	op_stkvar	(x,	1);
	create_insn	(x=0X2374);
	op_stkvar	(x,	1);
	create_insn	(x=0X2398);
	op_stkvar	(x,	1);
	create_insn	(x=0X239A);
	op_stkvar	(x,	1);
	create_insn	(x=0X23A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X23BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X23D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X23D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X2406);
	op_stkvar	(x,	1);
	create_insn	(x=0X2428);
	op_stkvar	(x,	1);
	create_insn	(x=0X242A);
	op_stkvar	(x,	1);
	create_insn	(x=0X2434);
	op_stkvar	(x,	1);
	create_insn	(x=0X244C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2458);
	op_stkvar	(x,	1);
	create_insn	(x=0X2468);
	op_stkvar	(x,	1);
	create_insn	(x=0X246C);
	op_stkvar	(x,	1);
	create_insn	(x=0X24A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X24D6);
	op_stkvar	(x,	1);
	create_insn	(0X2536);
	create_insn	(x=0X2538);
	op_stkvar	(x,	1);
	create_insn	(x=0X2546);
	op_hex		(x,	1);
	create_insn	(x=0X2568);
	op_hex		(x,	1);
	create_insn	(x=0X2578);
	op_hex		(x,	1);
	create_insn	(x=0X259C);
	op_hex		(x,	1);
	create_insn	(x=0X25B0);
	op_hex		(x,	1);
	create_insn	(x=0X25C0);
	op_hex		(x,	1);
	create_insn	(x=0X25E4);
	op_hex		(x,	1);
	create_insn	(x=0X25FC);
	op_hex		(x,	1);
	create_insn	(x=0X2610);
	op_hex		(x,	1);
	create_insn	(x=0X262E);
	op_hex		(x,	1);
	create_insn	(x=0X2648);
	op_hex		(x,	1);
	create_insn	(x=0X2650);
	op_hex		(x,	1);
	create_dword	(x=0X266C);
	op_plain_offset	(x,	0,	0X23A2);
	op_plain_offset	(x,	128,	0X23A2);
	create_dword	(x=0X2670);
	op_plain_offset	(x,	0,	0X23A4);
	op_plain_offset	(x,	128,	0X23A4);
	create_dword	(x=0X2674);
	op_plain_offset	(x,	0,	0X23A6);
	op_plain_offset	(x,	128,	0X23A6);
	create_dword	(x=0X2678);
	op_plain_offset	(x,	0,	0X23A8);
	op_plain_offset	(x,	128,	0X23A8);
	create_dword	(x=0X267C);
	op_plain_offset	(x,	0,	0X2540);
	op_plain_offset	(x,	128,	0X2540);
	create_insn	(0X2680);
	set_name	(0X2680,	"AES_dec_block");
	create_insn	(x=0X26B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X26EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X26F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X271C);
	op_stkvar	(x,	1);
	create_insn	(x=0X271E);
	op_stkvar	(x,	1);
	create_insn	(x=0X272A);
	op_stkvar	(x,	1);
	create_insn	(x=0X272C);
	op_stkvar	(x,	1);
	create_insn	(x=0X273C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2772);
	op_stkvar	(x,	1);
	create_insn	(x=0X279E);
	op_stkvar	(x,	1);
	create_insn	(x=0X27AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X27BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X27D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X27E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X27F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X27F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X282C);
	op_stkvar	(x,	1);
	create_insn	(x=0X285E);
	op_stkvar	(x,	1);
	create_insn	(x=0X289E);
	op_stkvar	(x,	1);
	create_insn	(0X28C0);
	create_insn	(x=0X28C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X28D0);
	op_hex		(x,	1);
	create_insn	(x=0X28F2);
	op_hex		(x,	1);
	create_insn	(x=0X2902);
	op_hex		(x,	1);
	create_insn	(x=0X2926);
	op_hex		(x,	1);
	create_insn	(x=0X293A);
	op_hex		(x,	1);
	create_insn	(x=0X294A);
	op_hex		(x,	1);
	create_insn	(x=0X296E);
	op_hex		(x,	1);
	create_insn	(x=0X2988);
	op_hex		(x,	1);
	create_insn	(x=0X299C);
	op_hex		(x,	1);
	create_insn	(x=0X29BA);
	op_hex		(x,	1);
	create_insn	(x=0X29D4);
	op_hex		(x,	1);
	create_insn	(x=0X29D8);
	op_hex		(x,	1);
	make_array	(0X29F6,	0X2);
	create_dword	(x=0X29F8);
	op_plain_offset	(x,	0,	0X2726);
	op_plain_offset	(x,	128,	0X2726);
	create_dword	(x=0X29FC);
	op_plain_offset	(x,	0,	0X2728);
	op_plain_offset	(x,	128,	0X2728);
	create_dword	(x=0X2A00);
	op_plain_offset	(x,	0,	0X272A);
	op_plain_offset	(x,	128,	0X272A);
	create_dword	(x=0X2A04);
	op_plain_offset	(x,	0,	0X272C);
	op_plain_offset	(x,	128,	0X272C);
	create_dword	(x=0X2A08);
	op_plain_offset	(x,	0,	0X28CA);
	op_plain_offset	(x,	128,	0X28CA);
	create_insn	(0X2A0C);
	set_name	(0X2A0C,	"AES_crypto");
	create_insn	(x=0X2A24);
	op_stkvar	(x,	1);
	create_insn	(x=0X2A26);
	op_stkvar	(x,	1);
	create_insn	(x=0X2A28);
	op_stkvar	(x,	1);
	create_insn	(x=0X2A2A);
	op_stkvar	(x,	1);
	create_insn	(0X2A34);
	create_insn	(x=0X2A3E);
	op_stkvar	(x,	1);
	create_insn	(0X2A42);
	create_insn	(x=0X2A5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X2A5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X2A66);
	op_stkvar	(x,	1);
	create_insn	(x=0X2A6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X2A8E);
	op_hex		(x,	1);
	create_insn	(x=0X2A92);
	op_hex		(x,	1);
	create_insn	(x=0X2AA0);
	op_stkvar	(x,	1);
	create_insn	(0X2AF8);
	create_insn	(x=0X2AFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X2B16);
	op_stkvar	(x,	1);
	create_insn	(x=0X2B1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X2B38);
	op_stkvar	(x,	1);
	create_insn	(x=0X2B64);
	op_hex		(x,	1);
	create_insn	(x=0X2B68);
	op_hex		(x,	1);
	create_insn	(x=0X2B74);
	op_stkvar	(x,	1);
	create_insn	(x=0X2BC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X2BC2);
	op_stkvar	(x,	1);
	create_insn	(0X2BCE);
	create_dword	(x=0X2BD4);
	op_plain_offset	(x,	0,	0X2A1C);
	op_plain_offset	(x,	128,	0X2A1C);
	create_dword	(x=0X2BD8);
	op_plain_offset	(x,	0,	0X7F94);
	op_plain_offset	(x,	128,	0X7F94);
	create_strlit	(0X2CEC,	0X2CF4);
	set_name	(0X2CEC,	"aONCH");
	create_strlit	(0X2CF4,	0X2E1B);
	set_name	(0X2CF4,	"aVerifyImageSOp");
	create_strlit	(0X2E1B,	0X2E30);
	set_name	(0X2E1B,	"aUnknowOptionC");
	create_strlit	(0X2E30,	0X2E49);
	set_name	(0X2E30,	"aMustInputSourc");
	create_strlit	(0X2E49,	0X2E60);
	set_name	(0X2E49,	"aMustInputImage");
	create_strlit	(0X2E60,	0X2E85);
	set_name	(0X2E60,	"aFailedToInitia");
	create_strlit	(0X2E85,	0X2EAA);
	set_name	(0X2E85,	"aFailedToVerify");
	create_strlit	(0X2EAA,	0X2EC5);
	set_name	(0X2EAA,	"aPassedToVerify");
	create_strlit	(0X2EC5,	0X2ECA);
	set_name	(0X2EC5,	"aHelp");
	create_strlit	(0X2ECA,	0X2ECF);
	set_name	(0X2ECA,	"aName");
	create_strlit	(0X2ECF,	0X2ED5);
	set_name	(0X2ECF,	"aChunk");
	create_strlit	(0X2ED5,	0X2EDC);
	set_name	(0X2ED5,	"aOutput");
	create_strlit	(0X2EDC,	0X2EDE);
	set_name	(0X2EDC,	"aR");
	create_strlit	(0X2EDE,	0X2EF4);
	set_name	(0X2EDE,	"aFailToOpenFile");
	create_strlit	(0X2EF4,	0X2F16);
	set_name	(0X2EF4,	"aInvalidFileSFi");
	create_strlit	(0X2F16,	0X2F18);
	set_name	(0X2F16,	"aW");
	create_strlit	(0X2F18,	0X2F36);
	set_name	(0X2F18,	"aSizeOrPathMust");
	create_strlit	(0X2F36,	0X2F49);
	set_name	(0X2F36,	"aFileSSizeIs0");
	create_strlit	(0X2F49,	0X2F6C);
	set_name	(0X2F49,	"aFailToAllocate");
	create_strlit	(0X2F6C,	0X2F79);
	set_name	(0X2F6C,	"aDevUrandom");
	create_strlit	(0X2F79,	0X2F86);
	set_name	(0X2F79,	"a04d02d02d");
	create_strlit	(0X2F86,	0X2F89);
	set_name	(0X2F86,	"aX");
	create_strlit	(0X2F89,	0X2F90);
	set_name	(0X2F89,	"aLldC");
	create_strlit	(0X2F90,	0X2F94);
	set_name	(0X2F90,	"aS");
	create_strlit	(0X2F94,	0X2F97);
	create_strlit	(0X2F97,	0X2F9D);
	set_name	(0X2F97,	"a02x");
	create_strlit	(0X2F9D,	0X2FAB);
	set_name	(0X2F9D,	"aInvalidInput");
	create_strlit	(0X2FAB,	0X2FCF);
	set_name	(0X2FAB,	"aErrorHexlenD2B");
	create_strlit	(0X2FCF,	0X2FF7);
	set_name	(0X2FCF,	"aSDErrorTooShor");
	create_strlit	(0X2FF7,	0X3017);
	set_name	(0X2FF7,	"aSDErrorWrongIm");
	create_strlit	(0X3017,	0X303F);
	set_name	(0X3017,	"aSDErrorInvalid");
	create_strlit	(0X303F,	0X306B);
	set_name	(0X303F,	"aSDErrorFailedT");
	create_strlit	(0X306B,	0X3098);
	set_name	(0X306B,	"aSDErrorFailedT_2");
	create_strlit	(0X3098,	0X30BD);
	set_name	(0X3098,	"aSDErrorFailedT_3");
	create_strlit	(0X30BD,	0X30E7);
	set_name	(0X30BD,	"aSDErrorFailedT_4");
	create_strlit	(0X30E7,	0X311B);
	set_name	(0X30E7,	"aSDErrorMustSet");
	create_strlit	(0X311B,	0X3143);
	set_name	(0X311B,	"aSDErrorInputMu");
	create_strlit	(0X3143,	0X3170);
	set_name	(0X3143,	"aSDErrorFailedT_0");
	create_strlit	(0X3170,	0X319E);
	set_name	(0X3170,	"aSDErrorTooShor_0");
	create_strlit	(0X319E,	0X31BE);
	set_name	(0X319E,	"aSDWholeImageIs");
	create_strlit	(0X31BE,	0X31ED);
	set_name	(0X31BE,	"aSDErrorTooShor_1");
	create_strlit	(0X31ED,	0X3213);
	set_name	(0X31ED,	"aSDErrorFailedT_1");
	create_strlit	(0X3213,	0X3238);
	set_name	(0X3213,	"aSDErrorHavenTP");
	create_strlit	(0X3238,	0X3268);
	set_name	(0X3238,	"aSDErrorFailedI");
	create_strlit	(0X3268,	0X32A0);
	set_name	(0X3268,	"aSDErrorFailedP");
	create_strlit	(0X32A0,	0X32CE);
	set_name	(0X32A0,	"aSDErrorFailedT_8");
	create_strlit	(0X32CE,	0X3300);
	set_name	(0X32CE,	"aSDErrorFailedT_9");
	create_strlit	(0X3300,	0X3303);
	set_name	(0X3300,	"aRb");
	create_strlit	(0X3303,	0X3327);
	set_name	(0X3303,	"aSDErrorFailToO");
	create_strlit	(0X3327,	0X332A);
	set_name	(0X3327,	"aWb");
	create_strlit	(0X332A,	0X335C);
	set_name	(0X332A,	"aSDErrorFailToA");
	create_strlit	(0X335C,	0X339C);
	set_name	(0X335C,	"aSDErrorInvalid_0");
	create_strlit	(0X339C,	0X33C5);
	set_name	(0X339C,	"aSDErrorFailedT_10");
	create_strlit	(0X33C5,	0X33F5);
	set_name	(0X33C5,	"aCatProcCmdline");
	create_strlit	(0X33F5,	0X33FB);
	set_name	(0X33F5,	"aSaak");
	create_strlit	(0X33FB,	0X341D);
	set_name	(0X33FB,	"aSDErrorFailedT_5");
	create_strlit	(0X341D,	0X3443);
	set_name	(0X341D,	"aSDErrorFailedT_6");
	create_strlit	(0X3443,	0X344C);
	set_name	(0X3443,	"aDjiPuek");
	create_strlit	(0X344C,	0X3471);
	set_name	(0X344C,	"aSDErrorFailedT_7");
	create_strlit	(0X3471,	0X347F);
	set_name	(0X3471,	"aProcCmdline");
	create_byte	(0X347F);
	make_array	(0X347F,	0X2);
	create_strlit	(0X3481,	0X349D);
	set_name	(0X3481,	"aDjiImageDecryp");
	create_strlit	(0X349D,	0X34B5);
	set_name	(0X349D,	"aDjiImageVerify_2");
	create_strlit	(0X34B5,	0X34CD);
	set_name	(0X34B5,	"aDjiImageVerify_1");
	create_strlit	(0X34CD,	0X34E3);
	set_name	(0X34CD,	"aDjiImageVerify_0");
	create_strlit	(0X34E3,	0X34FA);
	set_name	(0X34E3,	"aDjiImageVerify_3");
	create_strlit	(0X34FA,	0X3510);
	set_name	(0X34FA,	"aDjiImageVerify");
	create_strlit	(0X3510,	0X3523);
	set_name	(0X3510,	"aDjiDeriveSymKe");
	create_byte	(0X3523);
	make_array	(0X3523,	0X20C);
	create_strlit	(0X372F,	0X373B);
	set_name	(0X372F,	"aDerivePuek");
	create_byte	(0X373B);
	make_array	(0X373B,	0X20C);
	create_byte	(0X3949);
	make_array	(0X3949,	0X2);
	create_dword	(0X394C);
	make_array	(0X394C,	0X40);
	set_name	(0X394C,	"K");
	create_byte	(0X3A4C);
	make_array	(0X3A4C,	0X14);
	set_name	(0X3A4C,	"kExpectedPadShaRsa2048");
	create_byte	(0X3A60);
	make_array	(0X3A60,	0X20);
	set_name	(0X3A60,	"kExpectedPadSha256Rsa2048");
	create_byte	(0X3A80);
	make_array	(0X3A80,	0X400);
	create_dword	(0X4680);
	make_array	(0X4680,	0XA);
	set_name	(0X4680,	"rcon");
	create_dword	(0X46A8);
	make_array	(0X46A8,	0X100);
	set_name	(0X46A8,	"Td3");
	create_dword	(0X5EA8);
	make_array	(0X5EA8,	0X100);
	set_name	(0X5EA8,	"Te4");
	MakeStruct	(0X7DEC,	"option");
	make_array	(0X7DEC,	0X5);
	set_name	(0X7DEC,	"long_options");
	create_dword	(x=0X7E54);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7E54,	"SHA_VTAB");
	create_dword	(x=0X7E58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X7E5C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X7E60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X7E68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7E68,	"SHA256_VTAB");
	create_dword	(x=0X7E6C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X7E70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X7E74);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X7E78);
	op_enum		(x,	0,	GetEnum("SHA256_defines"),0);
	set_cmt	(0X7E7C,	"DT_PLTGOT ",	0);
	update_extra_cmt		(0X7E7C,	E_PREV + 0,	"; ELF Dynamic Information");
	MakeStruct	(0X7E7C,	"Elf32_Dyn");
	set_cmt	(0X7E84,	"DT_PLTRELSZ ",	0);
	MakeStruct	(0X7E84,	"Elf32_Dyn");
	set_cmt	(0X7E8C,	"DT_JMPREL ",	0);
	MakeStruct	(0X7E8C,	"Elf32_Dyn");
	set_cmt	(0X7E94,	"DT_PLTREL ",	0);
	MakeStruct	(0X7E94,	"Elf32_Dyn");
	set_cmt	(0X7E9C,	"DT_REL ",	0);
	MakeStruct	(0X7E9C,	"Elf32_Dyn");
	set_cmt	(0X7EA4,	"DT_RELSZ ",	0);
	MakeStruct	(0X7EA4,	"Elf32_Dyn");
	set_cmt	(0X7EAC,	"DT_RELENT ",	0);
	MakeStruct	(0X7EAC,	"Elf32_Dyn");
	set_cmt	(0X7EB4,	"DT_RELCOUNT ",	0);
	MakeStruct	(0X7EB4,	"Elf32_Dyn");
	set_cmt	(0X7EBC,	"DT_DEBUG ",	0);
	MakeStruct	(0X7EBC,	"Elf32_Dyn");
	set_cmt	(0X7EC4,	"DT_SYMTAB ",	0);
	MakeStruct	(0X7EC4,	"Elf32_Dyn");
	set_cmt	(0X7ECC,	"DT_SYMENT ",	0);
	MakeStruct	(0X7ECC,	"Elf32_Dyn");
	set_cmt	(0X7ED4,	"DT_STRTAB ",	0);
	MakeStruct	(0X7ED4,	"Elf32_Dyn");
	set_cmt	(0X7EDC,	"DT_STRSZ ",	0);
	MakeStruct	(0X7EDC,	"Elf32_Dyn");
	set_cmt	(0X7EE4,	"DT_HASH ",	0);
	MakeStruct	(0X7EE4,	"Elf32_Dyn");
	set_cmt	(0X7EEC,	"DT_NEEDED libc.so",	0);
	MakeStruct	(0X7EEC,	"Elf32_Dyn");
	set_cmt	(0X7EF4,	"DT_NEEDED libstdc++.so",	0);
	MakeStruct	(0X7EF4,	"Elf32_Dyn");
	set_cmt	(0X7EFC,	"DT_NEEDED libm.so",	0);
	MakeStruct	(0X7EFC,	"Elf32_Dyn");
	set_cmt	(0X7F04,	"DT_PREINIT_ARRAY ",	0);
	MakeStruct	(0X7F04,	"Elf32_Dyn");
	set_cmt	(0X7F0C,	"DT_PREINIT_ARRAYSZ ",	0);
	MakeStruct	(0X7F0C,	"Elf32_Dyn");
	set_cmt	(0X7F14,	"DT_INIT_ARRAY ",	0);
	MakeStruct	(0X7F14,	"Elf32_Dyn");
	set_cmt	(0X7F1C,	"DT_INIT_ARRAYSZ ",	0);
	MakeStruct	(0X7F1C,	"Elf32_Dyn");
	set_cmt	(0X7F24,	"DT_FINI_ARRAY ",	0);
	MakeStruct	(0X7F24,	"Elf32_Dyn");
	set_cmt	(0X7F2C,	"DT_FINI_ARRAYSZ ",	0);
	MakeStruct	(0X7F2C,	"Elf32_Dyn");
	set_cmt	(0X7F34,	"DT_FLAGS ",	0);
	MakeStruct	(0X7F34,	"Elf32_Dyn");
	set_cmt	(0X7F3C,	"DT_FLAGS_1 ",	0);
	MakeStruct	(0X7F3C,	"Elf32_Dyn");
	set_cmt	(0X7F44,	"DT_NULL ",	0);
	MakeStruct	(0X7F44,	"Elf32_Dyn");
	make_array	(0X7F4C,	0X4);
	create_dword	(x=0X7F74);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X7F78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X7F7C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X7F80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X7F84);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7F84,	"optarg_ptr");
	create_dword	(x=0X7F88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7F88,	"__sF_ptr");
	create_dword	(x=0X7F8C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7F8C,	"optind_ptr");
	create_dword	(x=0X7F90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7F90,	"__stack_chk_guard_ptr");
	create_dword	(0X7F94);
	set_name	(0X7F94,	"_GLOBAL_OFFSET_TABLE_");
	create_dword	(0X7F98);
	create_dword	(x=0X7F9C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X7FA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FA0,	"__libc_init_ptr");
	create_dword	(x=0X7FA4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FA4,	"__cxa_atexit_ptr");
	create_dword	(x=0X7FA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FA8,	"getopt_long_ptr");
	create_dword	(x=0X7FAC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FAC,	"printf_ptr");
	create_dword	(x=0X7FB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FB0,	"fprintf_ptr");
	create_dword	(x=0X7FB4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FB4,	"exit_ptr");
	create_dword	(x=0X7FB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FB8,	"fputs_ptr");
	create_dword	(x=0X7FBC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FBC,	"fopen_ptr");
	create_dword	(x=0X7FC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FC0,	"fread_ptr");
	create_dword	(x=0X7FC4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FC4,	"fclose_ptr");
	create_dword	(x=0X7FC8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FC8,	"strcmp_ptr");
	create_dword	(x=0X7FCC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FCC,	"__stack_chk_fail_ptr");
	create_dword	(x=0X7FD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FD0,	"memset_ptr");
	create_dword	(x=0X7FD4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FD4,	"strncpy_ptr");
	create_dword	(x=0X7FD8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FD8,	"memcpy_ptr");
	create_dword	(x=0X7FDC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FDC,	"memcmp_ptr");
	create_dword	(x=0X7FE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FE0,	"malloc_ptr");
	create_dword	(x=0X7FE4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FE4,	"fwrite_ptr");
	create_dword	(x=0X7FE8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FE8,	"free_ptr");
	create_dword	(x=0X7FEC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FEC,	"system_ptr");
	create_dword	(x=0X7FF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FF0,	"__memcpy_chk_ptr");
	create_dword	(x=0X7FF4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FF4,	"strstr_ptr");
	create_dword	(x=0X7FF8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FF8,	"strchr_ptr");
	create_dword	(x=0X7FFC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X7FFC,	"__aeabi_llsr_ptr");
	create_byte	(0X8000);
	make_array	(0X8000,	0X10);
	set_name	(0X8000,	"key_unkn1");
	create_byte	(0X8010);
	make_array	(0X8010,	0X10);
	set_name	(0X8010,	"key_riek");
	create_dword	(0X8024);
	set_name	(0X8024,	"cmdarg_chunk_id");
	create_dword	(0X8028);
	set_name	(0X8028,	"cmdarg_inp_name");
	create_dword	(0X802C);
	set_name	(0X802C,	"cmdarg_inp_fname");
	create_dword	(0X8030);
	set_name	(0X8030,	"cmdarg_out_file");
	create_byte	(0X8034);
	make_array	(0X8034,	0X20C);
	set_name	(0X8034,	"key_prak");
	create_byte	(0X8240);
	make_array	(0X8240,	0X10);
	set_name	(0X8240,	"key_puek");
	create_byte	(0X8250);
	make_array	(0X8250,	0X20C);
	set_name	(0X8250,	"key_unkn2");
	create_byte	(0X845C);
	make_array	(0X845C,	0X1000);
	set_name	(0X845C,	"kernel_params");
	set_name	(0X945C,	"_end_0");
	create_insn	(0X9460);
	set_name	(0X9460,	"__imp___libc_init");
	create_insn	(0X9464);
	set_name	(0X9464,	"__imp___cxa_atexit");
	create_insn	(0X9468);
	set_name	(0X9468,	"__imp_getopt_long");
	create_insn	(0X946C);
	set_name	(0X946C,	"__imp_printf");
	create_insn	(0X9470);
	set_name	(0X9470,	"__imp_fprintf");
	create_insn	(0X9474);
	set_name	(0X9474,	"__imp_exit");
	create_insn	(0X9478);
	set_name	(0X9478,	"__imp_fputs");
	create_dword	(0X947C);
	set_name	(0X947C,	"optarg");
	set_name	(0X9480,	"__sF");
	create_dword	(0X9484);
	set_name	(0X9484,	"optind");
	create_insn	(0X9488);
	set_name	(0X9488,	"__aeabi_unwind_cpp_pr0");
	create_insn	(0X948C);
	set_name	(0X948C,	"__imp_fopen");
	create_insn	(0X9490);
	set_name	(0X9490,	"fseek");
	create_insn	(0X9494);
	set_name	(0X9494,	"ftell");
	create_insn	(0X9498);
	set_name	(0X9498,	"__imp_fclose");
	create_insn	(0X949C);
	set_name	(0X949C,	"__imp_fwrite");
	create_insn	(0X94A0);
	set_name	(0X94A0,	"__imp_fread");
	create_insn	(0X94A4);
	set_name	(0X94A4,	"puts");
	create_insn	(0X94A8);
	set_name	(0X94A8,	"__imp_malloc");
	create_insn	(0X94AC);
	set_name	(0X94AC,	"time");
	create_insn	(0X94B0);
	set_name	(0X94B0,	"localtime");
	create_insn	(0X94B4);
	set_name	(0X94B4,	"__sprintf_chk");
	create_insn	(0X94B8);
	set_name	(0X94B8,	"sscanf");
	create_insn	(0X94BC);
	set_name	(0X94BC,	"__imp___stack_chk_fail");
	create_dword	(0X94C0);
	set_name	(0X94C0,	"__stack_chk_guard");
	create_insn	(0X94C4);
	set_name	(0X94C4,	"strtoll");
	create_insn	(0X94C8);
	set_name	(0X94C8,	"__aeabi_unwind_cpp_pr1");
	create_insn	(0X94CC);
	set_name	(0X94CC,	"sprintf");
	create_insn	(0X94D0);
	set_name	(0X94D0,	"putchar");
	create_insn	(0X94D4);
	set_name	(0X94D4,	"strlen");
	create_insn	(0X94D8);
	set_name	(0X94D8,	"__imp_strcmp");
	create_insn	(0X94DC);
	set_name	(0X94DC,	"__imp_memset");
	create_insn	(0X94E0);
	set_name	(0X94E0,	"__imp_strncpy");
	create_insn	(0X94E4);
	set_name	(0X94E4,	"__imp_memcpy");
	create_insn	(0X94E8);
	set_name	(0X94E8,	"__imp_memcmp");
	create_insn	(0X94EC);
	set_name	(0X94EC,	"__imp_free");
	create_insn	(0X94F0);
	set_name	(0X94F0,	"__imp_system");
	create_insn	(0X94F4);
	set_name	(0X94F4,	"__imp___memcpy_chk");
	create_insn	(0X94F8);
	set_name	(0X94F8,	"__imp_strstr");
	create_insn	(0X94FC);
	set_name	(0X94FC,	"__imp_strchr");
	create_insn	(0X9500);
	set_name	(0X9500,	"__imp___aeabi_llsr");
	create_dword	(0X9504);
	set_name	(0X9504,	"_edata");
	create_dword	(0X9508);
	set_name	(0X9508,	"__bss_start");
	create_dword	(0X950C);
	set_name	(0X950C,	"_end");
}

static Functions_0(void) {

	add_func    (0X884,0X890);
	set_func_flags(0X884,0x4c1);
	SetType(0X884, "void __noreturn _libc_init(void *raw_args, void (*onexit)(void), int (*slingshot)(int, char **, char **), const structors_array_t *const structors);");
	add_func    (0X890,0X89C);
	set_func_flags(0X890,0x4c0);
	add_func    (0X89C,0X8A8);
	set_func_flags(0X89C,0x4c0);
	add_func    (0X8A8,0X8B4);
	set_func_flags(0X8A8,0x4c0);
	SetType(0X8A8, "int printf(const char *, ...);");
	add_func    (0X8B4,0X8C0);
	set_func_flags(0X8B4,0x4c0);
	SetType(0X8B4, "int fprintf(FILE *, const char *, ...);");
	add_func    (0X8C0,0X8CC);
	set_func_flags(0X8C0,0x4c1);
	SetType(0X8C0, "void exit(int);");
	add_func    (0X8CC,0X8D8);
	set_func_flags(0X8CC,0x4c0);
	SetType(0X8CC, "int fputs(const char *, FILE *);");
	add_func    (0X8D8,0X8E4);
	set_func_flags(0X8D8,0x4c0);
	SetType(0X8D8, "FILE *fopen(const char *, const char *);");
	add_func    (0X8E4,0X8F0);
	set_func_flags(0X8E4,0x4c0);
	SetType(0X8E4, "size_t __cdecl fread(void *ptr, size_t size, size_t count, FILE *stream);");
	add_func    (0X8F0,0X8FC);
	set_func_flags(0X8F0,0x4c0);
	SetType(0X8F0, "int fclose(FILE *);");
	add_func    (0X8FC,0X908);
	set_func_flags(0X8FC,0x4c0);
	SetType(0X8FC, "int strcmp(const char *, const char *);");
	add_func    (0X908,0X914);
	set_func_flags(0X908,0x4c1);
	add_func    (0X914,0X920);
	set_func_flags(0X914,0x4c0);
	SetType(0X914, "void *memset(void *, int, size_t);");
	add_func    (0X920,0X92C);
	set_func_flags(0X920,0x4c0);
	SetType(0X920, "char *strncpy(char *, const char *, size_t);");
	add_func    (0X92C,0X938);
	set_func_flags(0X92C,0x4c0);
	SetType(0X92C, "void *memcpy(void *, const void *, size_t);");
	add_func    (0X938,0X944);
	set_func_flags(0X938,0x4c0);
	SetType(0X938, "int memcmp(const void *, const void *, size_t);");
	add_func    (0X944,0X950);
	set_func_flags(0X944,0x4c0);
	SetType(0X944, "void *malloc(size_t);");
	add_func    (0X950,0X95C);
	set_func_flags(0X950,0x4c0);
	SetType(0X950, "size_t fwrite(const void *, size_t, size_t, FILE *);");
	add_func    (0X95C,0X968);
	set_func_flags(0X95C,0x4c0);
	SetType(0X95C, "void free(void *);");
	add_func    (0X968,0X974);
	set_func_flags(0X968,0x4c0);
	SetType(0X968, "int system(const char *);");
	add_func    (0X974,0X980);
	set_func_flags(0X974,0x4c0);
	add_func    (0X980,0X98C);
	set_func_flags(0X980,0x4c0);
	SetType(0X980, "char *strstr(const char *, const char *);");
	add_func    (0X98C,0X998);
	set_func_flags(0X98C,0x4c0);
	SetType(0X98C, "char *strchr(const char *, int);");
	add_func    (0X998,0X9A4);
	set_func_flags(0X998,0x4c0);
	add_func    (0X9A8,0XA0C);
	set_func_flags(0X9A8,0x455);
	set_frame_size(0X9A8, 0X14, 4, 0);
	define_local_var(0X9A8, 0XA0C, "[bp-0X14]", "structors");
	define_local_var(0X9A8, 0XA0C, "[bp-0X8]", "raw_args");
	add_func    (0XA5C,0XB82);
	set_func_flags(0XA5C,0x400);
	SetType(0XA5C, "int __cdecl main(int argc, const char **argv, const char **envp);");
	set_frame_size(0XA5C, 0X28, 0, 0);
	add_func    (0XBE0,0XC1C);
	set_func_flags(0XBE0,0x400);
	SetType(0XBE0, "size_t __cdecl read_file_to_buf(void *outbuf, size_t max_len, const char *fname);");
	set_frame_size(0XBE0, 0X18, 0, 0);
	add_func    (0XC24,0XC44);
	set_func_flags(0XC24,0x400);
	SetType(0XC24, "uint32_t __cdecl chunk_id_select(const char *chunk_str);");
	set_frame_size(0XC24, 0X8, 0, 0);
	add_func    (0XC44,0XC70);
	set_func_flags(0XC44,0x400);
	SetType(0XC44, "int __cdecl hexatoi_char(int hexchr);");
	add_func    (0XC70,0XCBA);
	set_func_flags(0XC70,0x400);
	SetType(0XC70, "signed int __cdecl str_to_bytes(const char *istr, uint8_t *obuf, int len);");
	set_frame_size(0XC70, 0X20, 0, 0);
	add_func    (0XCBC,0XD7E);
	set_func_flags(0XCBC,0x400);
	SetType(0XCBC, "int __fastcall dji_image_verify_header(struct ImageHeader *ihdr, unsigned int buf_len, const char *iname);");
	set_frame_size(0XCBC, 0X48, 0, 0);
	define_local_var(0XCBC, 0XD7E, "[bp-0X48]", "a5");
	define_local_var(0XCBC, 0XD7E, "[bp-0X40]", "a2");
	define_local_var(0XCBC, 0XD7E, "[bp-0X3C]", "digest");
	add_func    (0XDA8,0XE5C);
	set_func_flags(0XDA8,0x400);
	SetType(0XDA8, "signed int __fastcall dji_image_decrypt_scram_key(struct ImageHeader *imghdr, void *par2);");
	set_frame_size(0XDA8, 0X140, 0, 0);
	define_local_var(0XDA8, 0XE5C, "[bp-0X140]", "iv");
	define_local_var(0XDA8, 0XE5C, "[bp-0X13C]", "a6");
	define_local_var(0XDA8, 0XE5C, "[bp-0X134]", "a2");
	define_local_var(0XDA8, 0XE5C, "[bp-0X130]", "ctx");
	define_local_var(0XDA8, 0XE5C, "[bp-0X2C]", "outbuf");
	add_func    (0XE7C,0XEBC);
	set_func_flags(0XE7C,0x400);
	SetType(0XE7C, "signed int __fastcall dji_image_verify_init(struct ImageVerifyState *vstate, const char *ifname, int a3);");
	set_frame_size(0XE7C, 0X10, 0, 0);
	add_func    (0XEC4,0X10EC);
	set_func_flags(0XEC4,0x400);
	SetType(0XEC4, "signed int __cdecl dji_image_verify_update(struct ImageVerifyState *vstate, uint8_t *inbuf, unsigned int inbuf_len, uint8_t *outbuf, unsigned int outbuf_len);");
	set_frame_size(0XEC4, 0X40, 0, 0);
	define_local_var(0XEC4, 0X10EC, "[bp-0X40]", "iv");
	define_local_var(0XEC4, 0X10EC, "[bp-0X3C]", "a6");
	define_local_var(0XEC4, 0X10EC, "[bp-0X2C]", "aesctx");
	define_local_var(0XEC4, 0X10EC, "[bp+0]", "a5");
	add_func    (0X111C,0X1184);
	set_func_flags(0X111C,0x400);
	SetType(0X111C, "signed int __fastcall dji_image_verify_final(struct ImageVerifyState *vstate);");
	set_frame_size(0X111C, 0X8, 0, 0);
	add_func    (0X119C,0X12C4);
	set_func_flags(0X119C,0x400);
	SetType(0X119C, "signed int __fastcall dji_image_verify_file(const char *a1, const char *ifname, size_t a3, const char *ofname);");
	set_frame_size(0X119C, 0X4A8, 0, 0);
	define_local_var(0X119C, 0X12C4, "[bp-0X4A8]", "a5");
	define_local_var(0X119C, 0X12C4, "[bp-0X4A0]", "vstate");
	add_func    (0X12EC,0X1366);
	set_func_flags(0X12EC,0x400);
	SetType(0X12EC, "void *__fastcall dji_image_verify_auth_key(unsigned int a1, signed int *a2);");
	set_frame_size(0X12EC, 0X10, 0, 0);
	add_func    (0X138C,0X143C);
	set_func_flags(0X138C,0x400);
	set_frame_size(0X138C, 0X180, 0, 0);
	define_local_var(0X138C, 0X143C, "[bp-0X180]", "iv");
	define_local_var(0X138C, 0X143C, "[bp-0X17C]", "a6");
	define_local_var(0X138C, 0X143C, "[bp-0X174]", "data");
	define_local_var(0X138C, 0X143C, "[bp-0X170]", "aesctx");
	define_local_var(0X138C, 0X143C, "[bp-0X6C]", "outbuf");
	define_local_var(0X138C, 0X143C, "[bp-0X4C]", "digest");
	add_func    (0X144C,0X1536);
	set_func_flags(0X144C,0x400);
	SetType(0X144C, "signed int derive_puek(void);");
	set_frame_size(0X144C, 0X38, 0, 0);
	define_local_var(0X144C, 0X1536, "[bp-0X2C]", "obuf");
	add_func    (0X1584,0X168E);
	set_func_flags(0X1584,0x400);
	SetType(0X1584, "void __cdecl SHA1_Transform(struct SHA_CTX *ctx);");
	set_frame_size(0X1584, 0X170, 0, 0);
	add_func    (0X16A0,0X16C8);
	set_func_flags(0X16A0,0x400);
	SetType(0X16A0, "void __cdecl SHA_init(struct SHA_CTX *ctx);");
	add_func    (0X16D8,0X1710);
	set_func_flags(0X16D8,0x400);
	SetType(0X16D8, "void __cdecl SHA_update(struct SHA_CTX *ctx, const void *data, int len);");
	set_frame_size(0X16D8, 0X10, 0, 0);
	add_func    (0X1710,0X17AE);
	set_func_flags(0X1710,0x400);
	SetType(0X1710, "const uint8_t *__cdecl SHA_final(struct SHA_CTX *ctx);");
	set_frame_size(0X1710, 0X28, 0, 0);
	define_local_var(0X1710, 0X17AE, "[bp-0X21]", "data");
	add_func    (0X17C0,0X1812);
	set_func_flags(0X17C0,0x400);
	SetType(0X17C0, "const uint8_t *__cdecl SHA_hash(const void *data, int len, uint8_t *digest);");
	set_frame_size(0X17C0, 0X90, 0, 0);
	add_func    (0X181C,0X184C);
	set_func_flags(0X181C,0x400);
	SetType(0X181C, "void __cdecl SHA256_init(struct SHA256_CTX *ctx);");
	add_func    (0X1870,0X1A10);
	set_func_flags(0X1870,0x400);
	SetType(0X1870, "void __cdecl SHA256_update(struct SHA256_CTX *ctx, const void *data, int len);");
	set_frame_size(0X1870, 0X168, 0, 0);
	define_local_var(0X1870, 0X1A10, "[bp-0X134]", "p");
	define_local_var(0X1870, 0X1A10, "[bp-0X128]", "W");
	add_func    (0X1A18,0X1AB4);
	set_func_flags(0X1A18,0x400);
	SetType(0X1A18, "const uint8_t *__cdecl SHA256_final(struct SHA256_CTX *ctx);");
	set_frame_size(0X1A18, 0X28, 0, 0);
	define_local_var(0X1A18, 0X1AB4, "[bp-0X21]", "data");
	add_func    (0X1AC8,0X1B1A);
	set_func_flags(0X1AC8,0x400);
	SetType(0X1AC8, "const uint8_t *__cdecl SHA256_hash(const void *data, int len, uint8_t *digest);");
	set_frame_size(0X1AC8, 0X90, 0, 0);
	add_func    (0X1B24,0X1B54);
	set_func_flags(0X1B24,0x400);
	SetType(0X1B24, "void __cdecl RSA_subM(const uint32_t *key, uint32_t *a);");
	set_frame_size(0X1B24, 0X14, 0, 0);
	add_func    (0X1B58,0X1C64);
	set_func_flags(0X1B58,0x400);
	SetType(0X1B58, "void __cdecl RSA_montMul(const uint32_t *inarr1, uint32_t *outarr, const uint32_t *inarr3, const uint32_t *inarr4);");
	set_frame_size(0X1B58, 0X70, 0, 0);
	add_func    (0X1C70,0X1E6E);
	set_func_flags(0X1C70,0x400);
	SetType(0X1C70, "signed int __cdecl RSA_verify(uint32_t *key, uint8_t *signatr, int sig_len, uint8_t *hash, int hash_len);");
	set_frame_size(0X1C70, 0X428, 0, 0);
	define_local_var(0X1C70, 0X1E6E, "[bp-0X424]", "inarr3");
	define_local_var(0X1C70, 0X1E6E, "[bp-0X324]", "outarr");
	define_local_var(0X1C70, 0X1E6E, "[bp-0X224]", "outdata");
	define_local_var(0X1C70, 0X1E6E, "[bp-0X124]", "hashdata");
	define_local_var(0X1C70, 0X1E6E, "[bp+0]", "a5");
	add_func    (0X1E80,0X2140);
	set_func_flags(0X1E80,0x400);
	SetType(0X1E80, "signed int __cdecl AES_setkey_enc(uint8_t *key, int key_bits, struct AES_CTX *ctx);");
	set_frame_size(0X1E80, 0X14, 0, 0);
	add_func    (0X2158,0X22E6);
	set_func_flags(0X2158,0x400);
	SetType(0X2158, "signed int __cdecl AES_key_set(uint8_t *enc_key, int enc_key_bits, AES_CTX *ctx);");
	set_frame_size(0X2158, 0X20, 0, 0);
	add_func    (0X22FC,0X266C);
	set_func_flags(0X22FC,0x400);
	set_frame_size(0X22FC, 0X40, 0, 0);
	add_func    (0X2680,0X29F6);
	set_func_flags(0X2680,0x400);
	set_frame_size(0X2680, 0X40, 0, 0);
	add_func    (0X2A0C,0X2BD4);
	set_func_flags(0X2A0C,0x400);
	SetType(0X2A0C, "void __cdecl AES_crypto(const uint8_t *encbuf, uint8_t *outbuf, unsigned int enclen, AES_CTX *aesctx, uint8_t *iv, int a6);");
	set_frame_size(0X2A0C, 0X50, 0, 0);
	define_local_var(0X2A0C, 0X2BD4, "[bp+0]", "iv");
	define_local_var(0X2A0C, 0X2BD4, "[bp+0X4]", "a6");
	add_func    (0X9460,0X9464);
	set_func_flags(0X9460,0x401);
	SetType(0X9460, "void __noreturn __libc_init(void *raw_args, void (*onexit)(void), int (*slingshot)(int, char **, char **), const structors_array_t *const structors);");
	add_func    (0X9464,0X9468);
	set_func_flags(0X9464,0x400);
	add_func    (0X9468,0X946C);
	set_func_flags(0X9468,0x400);
	add_func    (0X946C,0X9470);
	set_func_flags(0X946C,0x400);
	SetType(0X946C, "int printf(const char *, ...);");
	add_func    (0X9470,0X9474);
	set_func_flags(0X9470,0x400);
	SetType(0X9470, "int fprintf(FILE *, const char *, ...);");
	add_func    (0X9474,0X9478);
	set_func_flags(0X9474,0x401);
	SetType(0X9474, "void exit(int);");
	add_func    (0X9478,0X947C);
	set_func_flags(0X9478,0x400);
	SetType(0X9478, "int fputs(const char *, FILE *);");
	add_func    (0X9488,0X948C);
	set_func_flags(0X9488,0x400);
	add_func    (0X948C,0X9490);
	set_func_flags(0X948C,0x400);
	SetType(0X948C, "FILE *fopen(const char *, const char *);");
	add_func    (0X9490,0X9494);
	set_func_flags(0X9490,0x400);
	SetType(0X9490, "int fseek(FILE *, int, int);");
	add_func    (0X9494,0X9498);
	set_func_flags(0X9494,0x400);
	SetType(0X9494, "int ftell(FILE *);");
	add_func    (0X9498,0X949C);
	set_func_flags(0X9498,0x400);
	SetType(0X9498, "int fclose(FILE *);");
	add_func    (0X949C,0X94A0);
	set_func_flags(0X949C,0x400);
	SetType(0X949C, "size_t fwrite(const void *, size_t, size_t, FILE *);");
	add_func    (0X94A0,0X94A4);
	set_func_flags(0X94A0,0x400);
	SetType(0X94A0, "size_t fread(void *, size_t, size_t, FILE *);");
	add_func    (0X94A4,0X94A8);
	set_func_flags(0X94A4,0x400);
	SetType(0X94A4, "int puts(const char *);");
	add_func    (0X94A8,0X94AC);
	set_func_flags(0X94A8,0x400);
	SetType(0X94A8, "void *malloc(size_t);");
	add_func    (0X94AC,0X94B0);
	set_func_flags(0X94AC,0x400);
	SetType(0X94AC, "time_t time(time_t *);");
	add_func    (0X94B0,0X94B4);
	set_func_flags(0X94B0,0x400);
	SetType(0X94B0, "struct tm *localtime(const time_t *);");
	add_func    (0X94B4,0X94B8);
	set_func_flags(0X94B4,0x400);
	add_func    (0X94B8,0X94BC);
	set_func_flags(0X94B8,0x400);
	SetType(0X94B8, "int sscanf(const char *, const char *, ...);");
	add_func    (0X94BC,0X94C0);
	set_func_flags(0X94BC,0x401);
	add_func    (0X94C4,0X94C8);
	set_func_flags(0X94C4,0x400);
	SetType(0X94C4, "__int64 strtoll(const char *, char **, int);");
	add_func    (0X94C8,0X94CC);
	set_func_flags(0X94C8,0x400);
	add_func    (0X94CC,0X94D0);
	set_func_flags(0X94CC,0x400);
	SetType(0X94CC, "int sprintf(char *, const char *, ...);");
	add_func    (0X94D0,0X94D4);
	set_func_flags(0X94D0,0x400);
	SetType(0X94D0, "int putchar(int);");
	add_func    (0X94D4,0X94D8);
	set_func_flags(0X94D4,0x400);
	SetType(0X94D4, "size_t strlen(const char *);");
	add_func    (0X94D8,0X94DC);
	set_func_flags(0X94D8,0x400);
	SetType(0X94D8, "int strcmp(const char *, const char *);");
	add_func    (0X94DC,0X94E0);
	set_func_flags(0X94DC,0x400);
	SetType(0X94DC, "void *memset(void *, int, size_t);");
	add_func    (0X94E0,0X94E4);
	set_func_flags(0X94E0,0x400);
	SetType(0X94E0, "char *strncpy(char *, const char *, size_t);");
	add_func    (0X94E4,0X94E8);
	set_func_flags(0X94E4,0x400);
	SetType(0X94E4, "void *memcpy(void *, const void *, size_t);");
	add_func    (0X94E8,0X94EC);
	set_func_flags(0X94E8,0x400);
	SetType(0X94E8, "int memcmp(const void *, const void *, size_t);");
	add_func    (0X94EC,0X94F0);
	set_func_flags(0X94EC,0x400);
	SetType(0X94EC, "void free(void *);");
	add_func    (0X94F0,0X94F4);
	set_func_flags(0X94F0,0x400);
	SetType(0X94F0, "int system(const char *);");
	add_func    (0X94F4,0X94F8);
	set_func_flags(0X94F4,0x400);
	add_func    (0X94F8,0X94FC);
	set_func_flags(0X94F8,0x400);
	SetType(0X94F8, "char *strstr(const char *, const char *);");
	add_func    (0X94FC,0X9500);
	set_func_flags(0X94FC,0x400);
	SetType(0X94FC, "char *strchr(const char *, int);");
	add_func    (0X9500,0X9504);
	set_func_flags(0X9500,0x400);
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	split_sreg_range(0,"T",0,3);
	split_sreg_range(0X870,"T",0,3);
	split_sreg_range(0X884,"T",0,3);
	split_sreg_range(0X890,"T",0,3);
	split_sreg_range(0X89C,"T",0,3);
	split_sreg_range(0X8A8,"T",0,3);
	split_sreg_range(0X8B4,"T",0,3);
	split_sreg_range(0X8C0,"T",0,3);
	split_sreg_range(0X8CC,"T",0,3);
	split_sreg_range(0X8D8,"T",0,3);
	split_sreg_range(0X8E4,"T",0,3);
	split_sreg_range(0X8F0,"T",0,3);
	split_sreg_range(0X8FC,"T",0,3);
	split_sreg_range(0X908,"T",0,3);
	split_sreg_range(0X914,"T",0,3);
	split_sreg_range(0X920,"T",0,3);
	split_sreg_range(0X92C,"T",0,3);
	split_sreg_range(0X938,"T",0,3);
	split_sreg_range(0X944,"T",0,3);
	split_sreg_range(0X950,"T",0,3);
	split_sreg_range(0X95C,"T",0,3);
	split_sreg_range(0X968,"T",0,3);
	split_sreg_range(0X974,"T",0,3);
	split_sreg_range(0X980,"T",0,3);
	split_sreg_range(0X98C,"T",0,3);
	split_sreg_range(0X998,"T",0,3);
	split_sreg_range(0X9A4,"T",0,3);
	split_sreg_range(0X9A8,"T",0,3);
	split_sreg_range(0XA20,"T",0,3);
	split_sreg_range(0XA5C,"T",0X1,3);
	split_sreg_range(0XA78,"T",0X1,3);
	split_sreg_range(0XAC6,"T",0X1,3);
	split_sreg_range(0XAD0,"T",0X1,3);
	split_sreg_range(0XAE2,"T",0X1,3);
	split_sreg_range(0XAEC,"T",0X1,3);
	split_sreg_range(0XAF0,"T",0X1,3);
	split_sreg_range(0XB0E,"T",0X1,3);
	split_sreg_range(0XB34,"T",0X1,3);
	split_sreg_range(0XB4E,"T",0X1,3);
	split_sreg_range(0XB72,"T",0X1,3);
	split_sreg_range(0XB78,"T",0X1,3);
	split_sreg_range(0XB7C,"T",0X1,3);
	split_sreg_range(0XBE0,"T",0X1,3);
	split_sreg_range(0XC04,"T",0X1,3);
	split_sreg_range(0XC18,"T",0X1,3);
	split_sreg_range(0XC24,"T",0X1,3);
	split_sreg_range(0XC2C,"T",0X1,3);
	split_sreg_range(0XC30,"T",0X1,3);
	split_sreg_range(0XC34,"T",0X1,3);
	split_sreg_range(0XC40,"T",0X1,3);
	split_sreg_range(0XC44,"T",0X1,3);
	split_sreg_range(0XC52,"T",0X1,3);
	split_sreg_range(0XC5E,"T",0X1,3);
	split_sreg_range(0XC6A,"T",0X1,3);
	split_sreg_range(0XC70,"T",0X1,3);
	split_sreg_range(0XC7E,"T",0X1,3);
	split_sreg_range(0XC9E,"T",0X1,3);
	split_sreg_range(0XCB0,"T",0X1,3);
	split_sreg_range(0XCB4,"T",0X1,3);
	split_sreg_range(0XCBC,"T",0X1,3);
	split_sreg_range(0XCEE,"T",0X1,3);
	split_sreg_range(0XCFA,"T",0X1,3);
	split_sreg_range(0XD08,"T",0X1,3);
	split_sreg_range(0XD16,"T",0X1,3);
	split_sreg_range(0XD1C,"T",0X1,3);
	split_sreg_range(0XD36,"T",0X1,3);
	split_sreg_range(0XD60,"T",0X1,3);
	split_sreg_range(0XD66,"T",0X1,3);
	split_sreg_range(0XD6C,"T",0X1,3);
	split_sreg_range(0XD78,"T",0X1,3);
	split_sreg_range(0XDA8,"T",0X1,3);
	split_sreg_range(0XDEE,"T",0X1,3);
	split_sreg_range(0XE10,"T",0X1,3);
	split_sreg_range(0XE4A,"T",0X1,3);
	split_sreg_range(0XE56,"T",0X1,3);
	split_sreg_range(0XE7C,"T",0X1,3);
	split_sreg_range(0XE9A,"T",0X1,3);
	split_sreg_range(0XEC4,"T",0X1,3);
	split_sreg_range(0XEEE,"T",0X1,3);
	split_sreg_range(0XF18,"T",0X1,3);
	split_sreg_range(0XF3A,"T",0X1,3);
	split_sreg_range(0XF40,"T",0X1,3);
	split_sreg_range(0XF4E,"T",0X1,3);
	split_sreg_range(0XF5E,"T",0X1,3);
	split_sreg_range(0XF64,"T",0X1,3);
	split_sreg_range(0XF7A,"T",0X1,3);
	split_sreg_range(0XF7E,"T",0X1,3);
	split_sreg_range(0XF84,"T",0X1,3);
	split_sreg_range(0XF96,"T",0X1,3);
	split_sreg_range(0XF98,"T",0X1,3);
	split_sreg_range(0XFB6,"T",0X1,3);
	split_sreg_range(0XFF2,"T",0X1,3);
	split_sreg_range(0X1034,"T",0X1,3);
	split_sreg_range(0X1036,"T",0X1,3);
	split_sreg_range(0X1042,"T",0X1,3);
	split_sreg_range(0X1056,"T",0X1,3);
	split_sreg_range(0X107A,"T",0X1,3);
	split_sreg_range(0X1088,"T",0X1,3);
	split_sreg_range(0X10A0,"T",0X1,3);
	split_sreg_range(0X10AC,"T",0X1,3);
	split_sreg_range(0X10BE,"T",0X1,3);
	split_sreg_range(0X10C4,"T",0X1,3);
	split_sreg_range(0X10C8,"T",0X1,3);
	split_sreg_range(0X10CC,"T",0X1,3);
	split_sreg_range(0X10E4,"T",0X1,3);
	split_sreg_range(0X111C,"T",0X1,3);
	split_sreg_range(0X113A,"T",0X1,3);
	split_sreg_range(0X115A,"T",0X1,3);
	split_sreg_range(0X1182,"T",0X1,3);
	split_sreg_range(0X119C,"T",0X1,3);
	split_sreg_range(0X11DE,"T",0X1,3);
	split_sreg_range(0X1206,"T",0X1,3);
	split_sreg_range(0X1208,"T",0X1,3);
	split_sreg_range(0X1232,"T",0X1,3);
	split_sreg_range(0X1246,"T",0X1,3);
	split_sreg_range(0X124A,"T",0X1,3);
	split_sreg_range(0X1250,"T",0X1,3);
	split_sreg_range(0X1282,"T",0X1,3);
	split_sreg_range(0X128C,"T",0X1,3);
	split_sreg_range(0X1292,"T",0X1,3);
	split_sreg_range(0X129A,"T",0X1,3);
	split_sreg_range(0X12AA,"T",0X1,3);
	split_sreg_range(0X12B6,"T",0X1,3);
	split_sreg_range(0X12BA,"T",0X1,3);
	split_sreg_range(0X12EC,"T",0X1,3);
	split_sreg_range(0X1318,"T",0X1,3);
	split_sreg_range(0X1326,"T",0X1,3);
	split_sreg_range(0X132E,"T",0X1,3);
	split_sreg_range(0X1330,"T",0X1,3);
	split_sreg_range(0X1336,"T",0X1,3);
	split_sreg_range(0X1342,"T",0X1,3);
	split_sreg_range(0X134E,"T",0X1,3);
	split_sreg_range(0X1358,"T",0X1,3);
	split_sreg_range(0X1360,"T",0X1,3);
	split_sreg_range(0X1364,"T",0X1,3);
	split_sreg_range(0X138C,"T",0X1,3);
	split_sreg_range(0X13D2,"T",0X1,3);
	split_sreg_range(0X13D6,"T",0X1,3);
	split_sreg_range(0X13DC,"T",0X1,3);
	split_sreg_range(0X13E6,"T",0X1,3);
	split_sreg_range(0X1408,"T",0X1,3);
	split_sreg_range(0X142A,"T",0X1,3);
	split_sreg_range(0X1436,"T",0X1,3);
	split_sreg_range(0X144C,"T",0X1,3);
	split_sreg_range(0X1490,"T",0X1,3);
	split_sreg_range(0X1494,"T",0X1,3);
	split_sreg_range(0X14B6,"T",0X1,3);
	split_sreg_range(0X14DE,"T",0X1,3);
	split_sreg_range(0X1504,"T",0X1,3);
	split_sreg_range(0X1508,"T",0X1,3);
	split_sreg_range(0X1514,"T",0X1,3);
	split_sreg_range(0X152E,"T",0X1,3);
	split_sreg_range(0X1532,"T",0X1,3);
	split_sreg_range(0X1584,"T",0X1,3);
	split_sreg_range(0X1590,"T",0X1,3);
	split_sreg_range(0X15C0,"T",0X1,3);
	split_sreg_range(0X1608,"T",0X1,3);
	split_sreg_range(0X160E,"T",0X1,3);
	split_sreg_range(0X162C,"T",0X1,3);
	split_sreg_range(0X163C,"T",0X1,3);
	split_sreg_range(0X1654,"T",0X1,3);
	split_sreg_range(0X165E,"T",0X1,3);
	split_sreg_range(0X16A0,"T",0X1,3);
	split_sreg_range(0X16D8,"T",0X1,3);
	split_sreg_range(0X16F4,"T",0X1,3);
	split_sreg_range(0X170A,"T",0X1,3);
	split_sreg_range(0X1710,"T",0X1,3);
	split_sreg_range(0X1742,"T",0X1,3);
	split_sreg_range(0X174C,"T",0X1,3);
	split_sreg_range(0X1762,"T",0X1,3);
	split_sreg_range(0X1788,"T",0X1,3);
	split_sreg_range(0X17C0,"T",0X1,3);
	split_sreg_range(0X17F4,"T",0X1,3);
	split_sreg_range(0X180E,"T",0X1,3);
	split_sreg_range(0X181C,"T",0X1,3);
	split_sreg_range(0X1870,"T",0X1,3);
	split_sreg_range(0X189C,"T",0X1,3);
	split_sreg_range(0X18B2,"T",0X1,3);
	split_sreg_range(0X18E0,"T",0X1,3);
	split_sreg_range(0X1950,"T",0X1,3);
	split_sreg_range(0X195C,"T",0X1,3);
	split_sreg_range(0X1A00,"T",0X1,3);
	split_sreg_range(0X1A18,"T",0X1,3);
	split_sreg_range(0X1A4A,"T",0X1,3);
	split_sreg_range(0X1A54,"T",0X1,3);
	split_sreg_range(0X1A6A,"T",0X1,3);
	split_sreg_range(0X1A8E,"T",0X1,3);
	split_sreg_range(0X1AC8,"T",0X1,3);
	split_sreg_range(0X1AFC,"T",0X1,3);
	split_sreg_range(0X1B16,"T",0X1,3);
	split_sreg_range(0X1B24,"T",0X1,3);
	split_sreg_range(0X1B2E,"T",0X1,3);
	split_sreg_range(0X1B4C,"T",0X1,3);
	split_sreg_range(0X1B58,"T",0X1,3);
	split_sreg_range(0X1B70,"T",0X1,3);
	split_sreg_range(0X1B76,"T",0X1,3);
	split_sreg_range(0X1B86,"T",0X1,3);
	split_sreg_range(0X1BC0,"T",0X1,3);
	split_sreg_range(0X1C0C,"T",0X1,3);
	split_sreg_range(0X1C4C,"T",0X1,3);
	split_sreg_range(0X1C52,"T",0X1,3);
	split_sreg_range(0X1C70,"T",0X1,3);
	split_sreg_range(0X1C96,"T",0X1,3);
	split_sreg_range(0X1CA8,"T",0X1,3);
	split_sreg_range(0X1CB8,"T",0X1,3);
	split_sreg_range(0X1CBE,"T",0X1,3);
	split_sreg_range(0X1CD6,"T",0X1,3);
	split_sreg_range(0X1D1C,"T",0X1,3);
	split_sreg_range(0X1D4C,"T",0X1,3);
	split_sreg_range(0X1D7C,"T",0X1,3);
	split_sreg_range(0X1D80,"T",0X1,3);
	split_sreg_range(0X1D8E,"T",0X1,3);
	split_sreg_range(0X1DAA,"T",0X1,3);
	split_sreg_range(0X1DB0,"T",0X1,3);
	split_sreg_range(0X1DBC,"T",0X1,3);
	split_sreg_range(0X1DD8,"T",0X1,3);
	split_sreg_range(0X1DEA,"T",0X1,3);
	split_sreg_range(0X1DFA,"T",0X1,3);
	split_sreg_range(0X1E08,"T",0X1,3);
	split_sreg_range(0X1E1A,"T",0X1,3);
	split_sreg_range(0X1E2A,"T",0X1,3);
	split_sreg_range(0X1E32,"T",0X1,3);
	split_sreg_range(0X1E40,"T",0X1,3);
	split_sreg_range(0X1E48,"T",0X1,3);
	split_sreg_range(0X1E4A,"T",0X1,3);
	split_sreg_range(0X1E56,"T",0X1,3);
	split_sreg_range(0X1E60,"T",0X1,3);
	split_sreg_range(0X1E64,"T",0X1,3);
	split_sreg_range(0X1E80,"T",0X1,3);
	split_sreg_range(0X1E9E,"T",0X1,3);
	split_sreg_range(0X1EA8,"T",0X1,3);
	split_sreg_range(0X1EB0,"T",0X1,3);
	split_sreg_range(0X1EB2,"T",0X1,3);
	split_sreg_range(0X1F2E,"T",0X1,3);
	split_sreg_range(0X1F84,"T",0X1,3);
	split_sreg_range(0X1F88,"T",0X1,3);
	split_sreg_range(0X1F8C,"T",0X1,3);
	split_sreg_range(0X1FD0,"T",0X1,3);
	split_sreg_range(0X203A,"T",0X1,3);
	split_sreg_range(0X2080,"T",0X1,3);
	split_sreg_range(0X2134,"T",0X1,3);
	split_sreg_range(0X213A,"T",0X1,3);
	split_sreg_range(0X2158,"T",0X1,3);
	split_sreg_range(0X217A,"T",0X1,3);
	split_sreg_range(0X21AC,"T",0X1,3);
	split_sreg_range(0X21D0,"T",0X1,3);
	split_sreg_range(0X22D6,"T",0X1,3);
	split_sreg_range(0X22E2,"T",0X1,3);
	split_sreg_range(0X22FC,"T",0X1,3);
	split_sreg_range(0X23A6,"T",0X1,3);
	split_sreg_range(0X2536,"T",0X1,3);
	split_sreg_range(0X2680,"T",0X1,3);
	split_sreg_range(0X272A,"T",0X1,3);
	split_sreg_range(0X28C0,"T",0X1,3);
	split_sreg_range(0X2A0C,"T",0X1,3);
	split_sreg_range(0X2A34,"T",0X1,3);
	split_sreg_range(0X2A42,"T",0X1,3);
	split_sreg_range(0X2A44,"T",0X1,3);
	split_sreg_range(0X2A74,"T",0X1,3);
	split_sreg_range(0X2A82,"T",0X1,3);
	split_sreg_range(0X2AA2,"T",0X1,3);
	split_sreg_range(0X2AB4,"T",0X1,3);
	split_sreg_range(0X2AD0,"T",0X1,3);
	split_sreg_range(0X2AE6,"T",0X1,3);
	split_sreg_range(0X2AF8,"T",0X1,3);
	split_sreg_range(0X2B00,"T",0X1,3);
	split_sreg_range(0X2B24,"T",0X1,3);
	split_sreg_range(0X2B40,"T",0X1,3);
	split_sreg_range(0X2B56,"T",0X1,3);
	split_sreg_range(0X2B7C,"T",0X1,3);
	split_sreg_range(0X2B98,"T",0X1,3);
	split_sreg_range(0X2BAE,"T",0X1,3);
	split_sreg_range(0X2BC0,"T",0X1,3);
	split_sreg_range(0X2BCE,"T",0X1,3);
	split_sreg_range(0X2BDC,"T",0,3);
	split_sreg_range(0X2BF4,"T",0,3);
	split_sreg_range(0X2CEC,"T",0,3);
	split_sreg_range(0X62A8,"T",0,3);
	split_sreg_range(0X7DEC,"T",0,3);
	split_sreg_range(0X7E3C,"T",0,3);
	split_sreg_range(0X7E44,"T",0,3);
	split_sreg_range(0X7E4C,"T",0,3);
	split_sreg_range(0X7E54,"T",0,3);
	split_sreg_range(0X7E7C,"T",0,3);
	split_sreg_range(0X7F74,"T",0,3);
	split_sreg_range(0X8000,"T",0,3);
	split_sreg_range(0X8020,"T",0,3);
	split_sreg_range(0X945C,"T",0,3);
	split_sreg_range(0X9460,"T",0,3);
	split_sreg_range(0X9464,"T",0,3);
	split_sreg_range(0X9468,"T",0,3);
	split_sreg_range(0X946C,"T",0,3);
	split_sreg_range(0X9470,"T",0,3);
	split_sreg_range(0X9474,"T",0,3);
	split_sreg_range(0X9478,"T",0,3);
	split_sreg_range(0X948C,"T",0,3);
	split_sreg_range(0X9498,"T",0,3);
	split_sreg_range(0X949C,"T",0,3);
	split_sreg_range(0X94A0,"T",0,3);
	split_sreg_range(0X94A8,"T",0,3);
	split_sreg_range(0X94BC,"T",0,3);
	split_sreg_range(0X94D8,"T",0,3);
	split_sreg_range(0X94DC,"T",0,3);
	split_sreg_range(0X94E0,"T",0,3);
	split_sreg_range(0X94E4,"T",0,3);
	split_sreg_range(0X94E8,"T",0,3);
	split_sreg_range(0X94EC,"T",0,3);
	split_sreg_range(0X94F0,"T",0,3);
	split_sreg_range(0X94F4,"T",0,3);
	split_sreg_range(0X94F8,"T",0,3);
	split_sreg_range(0X94FC,"T",0,3);
	split_sreg_range(0X9500,"T",0,3);
	split_sreg_range(0X9504,"T",0,3);
	split_sreg_range(0,"DS",0X10,3);
	split_sreg_range(0X870,"DS",0X10,3);
	split_sreg_range(0X9A4,"DS",0X10,3);
	split_sreg_range(0X9A8,"DS",0X10,3);
	split_sreg_range(0X2BDC,"DS",0X10,3);
	split_sreg_range(0X2BF4,"DS",0X10,3);
	split_sreg_range(0X2CEC,"DS",0X10,3);
	split_sreg_range(0X62A8,"DS",0X10,3);
	split_sreg_range(0X7DEC,"DS",0X10,3);
	split_sreg_range(0X7E3C,"DS",0X10,3);
	split_sreg_range(0X7E44,"DS",0X10,3);
	split_sreg_range(0X7E4C,"DS",0X10,3);
	split_sreg_range(0X7E54,"DS",0X10,3);
	split_sreg_range(0X7E7C,"DS",0X10,3);
	split_sreg_range(0X7F74,"DS",0X10,3);
	split_sreg_range(0X8000,"DS",0X10,3);
	split_sreg_range(0X8020,"DS",0X10,3);
	split_sreg_range(0X945C,"DS",0X12,3);
	split_sreg_range(0X9460,"DS",0X13,3);
	split_sreg_range(0X9504,"DS",0X14,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
        end_type_updating(UTP_STRUCT);
}

// End of file.

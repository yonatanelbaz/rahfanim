#!/bin/sh

source /usr/local/duml/setup_duml.sh

ENGINEERING_MODE='engineering'
FACTORY_MODE='factory'
PRODUCTION_MODE='production'
OTHER_MODE='other'

AMT_TEST_FLAG_FILE=/tmp/EMMC/factory_test/AMT_TEST
AMT_TEST_FLAG_FILE_SD=/tmp/SD0/factory_test/AMT_TEST
V2SDK_ENABLE_FLAG_FILE=/tmp/EMMC/factory_test/V2SDK_ENABLE
AUTOTEST_ENABLE_FLAG_FILE=/tmp/SD0/factory_test/AUTOTEST_ENABLE
AUTOTEST_INIT_LOG_DIR=/tmp/blackbox/log/autotest/
AUTOTEST_INIT_LOG=autotest_init.log
AGING_TEST_FLAG_FILE=/tmp/EMMC/factory_test/AGING_TEST
BULK_EP2_NODE=/dev/usb-ffs/bulk/ep2

USB_CFG_FILE=/tmp/EMMC/usb_cfg.cfg

AGING_TEST_LOG_FILE=/tmp/blackbox/log/factory_test/aging_test.log
AGING_TEST_RESULT_FILE=/tmp/blackbox/log/factory_test/aging_log_result.log

timeout=20

parse_mp_state_from_cmdline()
{
    local mp_state
    mp_state=`/usr/bin/parse_cmdline.sh mp_state`
    if [ $? -ne 0 ]; then
        mp_state=$OTHER_MODE
    fi
    echo $mp_state
}

parse_mp_state_from_file()
{
    local mp_state=$OTHER_MODE
    if [[ -e $AMT_TEST_FLAG_FILE || -e $AMT_TEST_FLAG_FILE_SD ]]; then
        mp_state=$FACTORY_MODE
    fi
    echo $mp_state
}

enable_amt_service()
{
    if [ -x /usr/bin/dji_amt ]; then
        echo "enable dji_amt"
        /usr/bin/dji_amt &
    fi
}

wait_sd_mounted()
{
    local time_count=0

    echo "loop check SD card 20s to make sure the SD card is mounted"
    while true; do
        df | grep SD0
        if [ $? -eq 0 ]; then
            echo "SD card exist"
            return 0
        else
            sleep 1
            time_count=$(($time_count+1))
        fi
        if [ $time_count -ge $timeout ]; then
            echo "no SD card"
            return 1
        fi
    done
}

wait_bulk_available()
{
    local time_count=0
    ret=0

    while true
    do
        if [ -e $BULK_EP2_NODE ]; then
            echo 'bulk function is ready.'
            ret=0
            break
        elif [ $time_count -gt $timeout ]; then
            echo 'wait for bulk ready timeout.'
            ret=1
            break
        else
            sleep 1
            echo "waiting for bulk function ready..."
            time_count=$(($time_count+1))
        fi
    done

    return $ret
}

disable_service_startup()
{
    echo "disable service startup: write $1 to service_control file"
    echo $1 >> /tmp/service_control

    result=`ps | grep -v 'grep' | grep $1`
    if [ $? -eq 0 ]; then
        echo "$1 is alive, kill it"
        pid=`echo $result | busybox awk -F ' ' '{print $1}'`
        kill -9 $pid
    fi
}

kill_service_for_v2sdk()
{
    disable_service_startup 'dji_flight'
    disable_service_startup 'dji_network'
    disable_service_startup 'dji_hdvt_uav'
    disable_service_startup 'dji_sw_uav'
    disable_service_startup 'dji_navigation'
}

kill_service_for_autotest()
{
    if [ -e $AUTOTEST_ENABLE_FLAG_FILE ]; then
        for service_name in dji_flight dji_network dji_sw_uav dji_nail; do
            grep $service_name $AUTOTEST_ENABLE_FLAG_FILE | grep KEEP_ 1>/dev/null 2>&1
            ret=$?
            if [ $ret -ne 0 ]; then
                echo "need kill $service_name for autotest"
                disable_service_startup $service_name
            else
                echo "need keep $service_name for autotest"
            fi
        done
    fi
}

enable_v2_sdk_service()
{
    wait_bulk_available

    if [ $? -eq 1 ]; then
        echo "bulk is not available."
        return
    fi

    kill_service_for_v2sdk

    if [ -x /usr/bin/dji_v2_sdk ]; then
        echo "enable dji_v2_sdk"
        /usr/bin/dji_v2_sdk &
    fi
}

enable_autotest_service()
{
    sleep 10

    kill_service_for_autotest

    if [ -e $AUTOTEST_INIT_LOG_DIR ]; then
        if [ -e $AUTOTEST_INIT_LOG_DIR$AUTOTEST_INIT_LOG ]; then
            echo "rename old autotest log"
            mv $AUTOTEST_INIT_LOG_DIR$AUTOTEST_INIT_LOG $AUTOTEST_INIT_LOG_DIR$AUTOTEST_INIT_LOG.0
        fi
    else
        mkdir -p $AUTOTEST_INIT_LOG_DIR
    fi

    if [ -x /usr/bin/autotest ]; then
        echo "enable autotest"
        /usr/bin/autotest > $AUTOTEST_INIT_LOG_DIR$AUTOTEST_INIT_LOG 2>&1 &
    fi
}

enable_aging_test()
{
    if [ -x /usr/bin/factory_test/aging_test.sh ]; then
        echo "enable aging_test.sh"
        /usr/bin/factory_test/aging_test.sh &
    fi
}

report_last_aging_test_result()
{
    if [[ -e $AGING_TEST_LOG_FILE && ! -e $AGING_TEST_RESULT_FILE ]]; then
        if [ -e /usr/bin/factory_test/fc_led_ctrl.sh ]; then
            . /usr/bin/factory_test/fc_led_ctrl.sh

            wait_fc_led_avliable

            led_red_on
        fi
    fi
}

conditional_enable_autotest_service()
{
    local time_count=0

    wait_sd_mounted

    if [ $? -eq 0 ]; then
        if [ -e $AUTOTEST_ENABLE_FLAG_FILE ]; then
            echo "$AUTOTEST_ENABLE_FLAG_FILE exist, enable autotest service"
            enable_autotest_service
        else
            echo "$AUTOTEST_ENABLE_FLAG_FILE not exist."
        fi
    fi
}

conditional_enable_v2sdk_service()
{
    if [ -e $V2SDK_ENABLE_FLAG_FILE ]; then
        echo "$V2SDK_ENABLE_FLAG_FILE exist, enable dji_v2_sdk_service"
        enable_v2_sdk_service
    else
        echo "$V2SDK_ENABLE_FLAG_FILE not exist."
    fi
}

conditional_enable_aging_test()
{
    if [ -e $AGING_TEST_FLAG_FILE ]; then
        echo "$AGING_TEST_FLAG_FILE exist, enable aging_test.sh"
        enable_aging_test
    else
        echo "$AGING_TEST_FLAG_FILE not exist, report last aging test result"
        report_last_aging_test_result
    fi
}

conditional_enable_amt_service()
{
    wait_sd_mounted

    if [[ -e $AMT_TEST_FLAG_FILE || -e $AMT_TEST_FLAG_FILE_SD ]]; then
        echo "$AMT_TEST_FLAG_FILE or $AMT_TEST_FLAG_FILE_SD exist, enable amt service"
        enable_amt_service
    else
        echo "$AMT_TEST_FLAG_FILE and $AMT_TEST_FLAG_FILE_SD not exist"
    fi
}

load_usb_cfg_from_file()
{
    if [ -e $USB_CFG_FILE ]; then

        #wait usb config init finished
        wait_bulk_available

        echo "$USB_CFG_FILE exist, load usb cfg"
        lines=`cat $USB_CFG_FILE | wc -l`
        ip=''
        function=`cat $USB_CFG_FILE | head -n 1`
        if [ $? -eq 0 ]; then
            echo "usb function is $function"
            if [[ $function == 'rndis' && $lines -eq 2 ]]; then
                ip=`cat $USB_CFG_FILE | tail -n 1`
                echo "ip is $ip"
                `/bin/factory_test/usbcfg_ctrl.sh set $function $ip`
            fi
            `/bin/factory_test/usbcfg_ctrl.sh set $function`
        fi
    else
        echo "$USB_CFG_FILE does not exist"
    fi
}

handle_engineering_mode()
{
    echo 'engineering mode'

    enable_amt_service

    load_usb_cfg_from_file &
}

handle_factory_mode()
{
    enable_amt_service

    #conditional_enable_v2sdk_service &

    conditional_enable_autotest_service &

    conditional_enable_aging_test &

    load_usb_cfg_from_file &
}

handle_secure_debug_mode()
{
    conditional_enable_amt_service &

    conditional_enable_autotest_service &

    conditional_enable_aging_test &

    load_usb_cfg_from_file &
}

handle_production_mode()
{
    rm -rf /tmp/EMMC/factory_test/* >> /dev/null/ 2>&1
}

handle_other_mode()
{
    local mp_state=`parse_mp_state_from_file`
    local time_count=0
    while [ $mp_state == $OTHER_MODE ]; do
        if [ $time_count -gt $timeout ]; then
            echo 'get mp_state from file timeout'
            break
        else
            sleep 1
            echo "waiting for SD card is mounted..."
            time_count=$(($time_count+1))
            mp_state=`parse_mp_state_from_file`
        fi
    done

    if [ $mp_state != $OTHER_MODE ]; then
        handle_mp_state $mp_state
    else
        exit 1
    fi
}

handle_mp_state()
{
    local mp_state=$1
    case $mp_state in
        $ENGINEERING_MODE)
            echo "$ENGINEERING_MODE mode"
            handle_engineering_mode
            ;;
        $FACTORY_MODE)
            echo "$FACTORY_MODE mode"
            handle_factory_mode
            ;;
        $PRODUCTION_MODE)
            echo "$PRODUCTION_MODE mode"
            is_secure_debug=`/usr/bin/parse_cmdline.sh androidboot.secure_debug`
            if [ $is_secure_debug -eq 1 ]; then
                echo "secure debug mode"
                handle_secure_debug_mode
            else
                handle_production_mode
            fi
            ;;
        $OTHER_MODE)
            echo "$OTHER_MODE mode, handle it in the background"
            handle_other_mode &
            ;;
        *)
            echo 'ERROR mp_state'
            ;;
    esac
}

main() {

    echo "S56djiinner_service is running"

    mp_state=$OTHER_MODE

    mp_state=`parse_mp_state_from_cmdline`

    handle_mp_state $mp_state

    echo 'S56djiinner_service is done'
}

main
